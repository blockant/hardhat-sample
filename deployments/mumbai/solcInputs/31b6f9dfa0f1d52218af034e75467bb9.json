{
  "language": "Solidity",
  "sources": {
    "contracts/AddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\n/**\n * @title AddressRegistry\n * @notice This stores all addresses in the Oparcade\n * @author David Lee\n */\ncontract AddressRegistry is OwnableUpgradeable {\n  event OparcadeUpdated(address indexed oldOparcade, address indexed newOparcade);\n  event GameRegistryUpdated(address indexed oldGameRegistry, address indexed newGameRegistry);\n  event MaintainerUpdated(address indexed oldMaintainer, address indexed newMaintainer);\n  event TimelockUpdated(address indexed oldTimelock, address indexed newTimelock);\n\n  /// @dev Oparcade contract address, can be zero if not set\n  address public oparcade;\n\n  /// @dev GameRegistry contract address, can be zero if not set\n  address public gameRegistry;\n\n  /// @dev Maintainer address, can be zero if not set\n  address public maintainer;\n\n  /// @dev Timelock contract address, can be zero if not set\n  address public timelock;\n\n  function initialize() public initializer {\n    __Ownable_init();\n  }\n\n  /**\n   * @notice Update Oparcade contract address\n   * @dev Only owner\n   * @param _oparcade Oparcade contract address\n   */\n  function updateOparcade(address _oparcade) external onlyOwner {\n    require(_oparcade != address(0), \"!Oparcade\");\n\n    emit OparcadeUpdated(oparcade, _oparcade);\n\n    oparcade = _oparcade;\n  }\n\n  /**\n   * @notice Update GameRegistry contract address\n   * @dev Only owner\n   * @param _gameRegistry TokenRegistry contract address\n   */\n  function updateGameRegistry(address _gameRegistry) external onlyOwner {\n    require(_gameRegistry != address(0), \"!GameRegistry\");\n\n    emit GameRegistryUpdated(gameRegistry, _gameRegistry);\n\n    gameRegistry = _gameRegistry;\n  }\n\n  /**\n   * @notice Update maintainer address\n   * @dev Only owner\n   * @param _maintainer Maintainer address\n   */\n  function updateMaintainer(address _maintainer) external onlyOwner {\n    require(_maintainer != address(0), \"!Maintainer\");\n\n    emit MaintainerUpdated(maintainer, _maintainer);\n\n    maintainer = _maintainer;\n  }\n\n  /**\n   * @notice Update Timelock contract address\n   * @dev Only owner\n   * @param _timelock Maintainer address\n   */\n  function updateTimelock(address _timelock) external onlyOwner {\n    require(_timelock != address(0), \"!Timelock\");\n\n    emit TimelockUpdated(timelock, _timelock);\n\n    timelock = _timelock;\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
    },
    "contracts/Oparcade.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\";\nimport \"./interfaces/IAddressRegistry.sol\";\nimport \"./interfaces/IGameRegistry.sol\";\n\n/**\n * @title Oparcade\n * @notice This contract manages token deposit/distribution from/to the users playing the game/tournament\n * @author David Lee\n */\ncontract Oparcade is\n  OwnableUpgradeable,\n  ReentrancyGuardUpgradeable,\n  PausableUpgradeable,\n  ERC721HolderUpgradeable,\n  ERC1155HolderUpgradeable\n{\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  event UserDeposited(address by, uint256 indexed gid, uint256 indexed tid, address indexed token, uint256 amount);\n  event PrizeDistributed(\n    address by,\n    address[] winners,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    address indexed token,\n    uint256[] amounts\n  );\n  event NFTPrizeDistributed(\n    address by,\n    address[] winners,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    address indexed nftAddress,\n    uint256 nftType,\n    uint256[] tokenIds,\n    uint256[] amounts\n  );\n  event PrizeDeposited(\n    address by,\n    address depositor,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    address indexed token,\n    uint256 amount\n  );\n  event PrizeWithdrawn(\n    address by,\n    address to,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    address indexed token,\n    uint256 amount\n  );\n  event NFTPrizeDeposited(\n    address by,\n    address from,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    address indexed nftAddress,\n    uint256 nftType,\n    uint256[] tokenIds,\n    uint256[] amounts\n  );\n  event NFTPrizeWithdrawn(\n    address by,\n    address to,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    address indexed nftAddress,\n    uint256 nftType,\n    uint256[] tokenIds,\n    uint256[] amounts\n  );\n\n  bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n  bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n  struct TournamentToken {\n    uint256 totalUserDeposit;\n    uint256 totalPrizeDistribution;\n    uint256 totalPrizeFee;\n    uint256 totalPrizeDeposit;\n  }\n  /// @dev Game ID -> Tournament ID -> Token Address -> Tournament tokens\n  mapping(uint256 => mapping(uint256 => mapping(address => TournamentToken))) public tournamentTokens;\n\n  struct TournamentNftPrize {\n    uint256 totalDistribution;\n    uint256 totalDeposit;\n  }\n  /// @dev Game ID -> Tournament ID -> NFT Address -> Token ID -> Tournament NFT prizes\n  mapping(uint256 => mapping(uint256 => mapping(address => mapping(uint256 => TournamentNftPrize)))) tournamentNftPrizes;\n\n  /// @dev AddressRegistry\n  IAddressRegistry public addressRegistry;\n\n  modifier onlyMaintainer() {\n    require(msg.sender == addressRegistry.maintainer(), \"Only maintainer\");\n    _;\n  }\n\n  modifier onlyTimelock() {\n    require(msg.sender == addressRegistry.timelock(), \"Only timelock\");\n    _;\n  }\n\n  function initialize(address _addressRegistry) public initializer {\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    __Pausable_init();\n    __ERC721Holder_init();\n    __ERC1155Holder_init();\n\n    require(_addressRegistry != address(0), \"Invalid AddressRegistry\");\n\n    // initialize AddressRegistery\n    addressRegistry = IAddressRegistry(_addressRegistry);\n  }\n\n  /**\n   * @notice Deposit ERC20 tokens from user\n   * @dev Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Token address to deposit\n   */\n  function deposit(\n    uint256 _gid,\n    uint256 _tid,\n    address _token\n  ) external whenNotPaused {\n    // get token amount to deposit\n    uint256 depositTokenAmount = IGameRegistry(addressRegistry.gameRegistry()).getDepositTokenAmount(\n      _gid,\n      _tid,\n      _token\n    );\n\n    // check if the token address is valid\n    require(depositTokenAmount > 0, \"Invalid deposit token\");\n\n    // transfer the payment\n    IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), depositTokenAmount);\n    tournamentTokens[_gid][_tid][_token].totalUserDeposit += depositTokenAmount;\n\n    emit UserDeposited(msg.sender, _gid, _tid, _token, depositTokenAmount);\n  }\n\n  /**\n   * @notice Distribute winners their prizes\n   * @dev Only maintainer\n   * @dev The maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _winners Winners list\n   * @param _token Prize token address\n   * @param _amounts Prize list\n   */\n  function distributePrize(\n    uint256 _gid,\n    uint256 _tid,\n    address[] calldata _winners,\n    address _token,\n    uint256[] calldata _amounts\n  ) external whenNotPaused onlyMaintainer {\n    require(_winners.length == _amounts.length, \"Mismatched winners and amounts\");\n\n    // get gameRegistry\n    IGameRegistry gameRegistry = IGameRegistry(addressRegistry.gameRegistry());\n\n    // check if token is allowed to distribute\n    require(gameRegistry.isDistributable(_gid, _token), \"Disallowed distribution token\");\n\n    _transferPayment(_gid, _tid, _winners, _token, _amounts);\n\n    // check if the prize amount is not exceeded\n    require(\n      tournamentTokens[_gid][_tid][_token].totalPrizeDistribution +\n        tournamentTokens[_gid][_tid][_token].totalPrizeFee <=\n        tournamentTokens[_gid][_tid][_token].totalPrizeDeposit + tournamentTokens[_gid][_tid][_token].totalUserDeposit,\n      \"Prize amount exceeded\"\n    );\n\n    emit PrizeDistributed(msg.sender, _winners, _gid, _tid, _token, _amounts);\n  }\n\n  /**\n   * @notice Transfer the winners' ERC20 token prizes and relevant fees\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _winners Winners list\n   * @param _token Prize token address\n   * @param _amounts Prize list\n   */\n  function _transferPayment(\n    uint256 _gid,\n    uint256 _tid,\n    address[] calldata _winners,\n    address _token,\n    uint256[] calldata _amounts\n  ) internal {\n    // get gameRegistry\n    IGameRegistry gameRegistry = IGameRegistry(addressRegistry.gameRegistry());\n\n    // transfer the winners their prizes\n    uint256 totalPlatformFeeAmount;\n    uint256 totalGameCreatorFeeAmount;\n    uint256 totalTournamentCreatorFeeAmount;\n    for (uint256 i; i < _winners.length; i++) {\n      require(_winners[i] != address(0), \"Winner address should be defined\");\n      require(_amounts[i] != 0, \"Winner amount should be greater than zero\");\n\n      // get userAmount\n      uint256 userAmount = _amounts[i];\n\n      {\n        // calculate the platform fee\n        uint256 platformFeeAmount = (_amounts[i] * gameRegistry.platformFee()) / 100_0;\n        totalPlatformFeeAmount += platformFeeAmount;\n\n        // update userAmount\n        userAmount -= platformFeeAmount;\n      }\n\n      {\n        // calculate gameCreatorFee\n        uint256 gameCreatorFee = gameRegistry.getAppliedGameCreatorFee(_gid, _tid);\n        uint256 gameCreatorFeeAmount = (_amounts[i] * gameCreatorFee) / 100_0;\n        totalGameCreatorFeeAmount += gameCreatorFeeAmount;\n\n        // update userAmount\n        userAmount -= gameCreatorFeeAmount;\n      }\n\n      {\n        // calculate tournamentCreatorFee\n        uint256 tournamentCreatorFee = gameRegistry.getTournamentCreatorFee(_gid, _tid);\n        uint256 tournamentCreatorFeeAmount = (_amounts[i] * tournamentCreatorFee) / 100_0;\n        totalTournamentCreatorFeeAmount += tournamentCreatorFeeAmount;\n\n        // update userAmount\n        userAmount -= tournamentCreatorFeeAmount;\n      }\n\n      // transfer the prize\n      tournamentTokens[_gid][_tid][_token].totalPrizeDistribution += userAmount;\n      IERC20Upgradeable(_token).safeTransfer(_winners[i], userAmount);\n    }\n\n    // transfer the fees\n    tournamentTokens[_gid][_tid][_token].totalPrizeFee +=\n      totalPlatformFeeAmount +\n      totalGameCreatorFeeAmount +\n      totalTournamentCreatorFeeAmount;\n    IERC20Upgradeable(_token).safeTransfer(gameRegistry.feeRecipient(), totalPlatformFeeAmount);\n    IERC20Upgradeable(_token).safeTransfer(gameRegistry.getGameCreatorAddress(_gid), totalGameCreatorFeeAmount);\n    IERC20Upgradeable(_token).safeTransfer(\n      gameRegistry.getTournamentCreator(_gid, _tid),\n      totalTournamentCreatorFeeAmount\n    );\n  }\n\n  /**\n   * @notice Distribute winners' NFT prizes\n   * @dev Only maintainer\n   * @dev NFT type should be either 721 or 1155\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _winners Winners list\n   * @param _nftAddress NFT address\n   * @param _nftType NFT type (721/1155)\n   * @param _tokenIds Token Id list\n   * @param _amounts Token amount list\n   */\n  function distributeNFTPrize(\n    uint256 _gid,\n    uint256 _tid,\n    address[] calldata _winners,\n    address _nftAddress,\n    uint256 _nftType,\n    uint256[] calldata _tokenIds,\n    uint256[] calldata _amounts\n  ) external whenNotPaused nonReentrant onlyMaintainer {\n    // check if token is allowed to distribute\n    require(\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _nftAddress),\n      \"Disallowed distribution token\"\n    );\n\n    require(_nftType == 721 || _nftType == 1155, \"Unexpected NFT type\");\n    require(\n      _winners.length == _tokenIds.length && _tokenIds.length == _amounts.length,\n      \"Mismatched NFT distribution data\"\n    );\n\n    uint256 totalAmounts;\n    if (_nftType == 721) {\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \"Unexpected NFT address\");\n\n      // update totalNFTPrizeDeposit and transfer NFTs to the winners\n      for (uint256 i; i < _winners.length; i++) {\n        require(\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit == 1 &&\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution == 0,\n          \"NFT prize distribution amount exceeded\"\n        );\n\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution = 1;\n        totalAmounts += _amounts[i];\n        try IERC721Upgradeable(_nftAddress).safeTransferFrom(address(this), _winners[i], _tokenIds[i]) {} catch {\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution = 0;\n          totalAmounts -= _amounts[i];\n        }\n      }\n\n      // check if all amount value is 1\n      require(totalAmounts == _winners.length, \"Invalid amount value\");\n    } else {\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \"Unexpected NFT address\");\n\n      // update totalNFTPrizeDeposit and transfer NFTs to the winners\n      for (uint256 i; i < _winners.length; i++) {\n        require(\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution >=\n            _amounts[i],\n          \"NFT prize distribution amount exceeded\"\n        );\n\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution += _amounts[i];\n        try\n          IERC1155Upgradeable(_nftAddress).safeTransferFrom(\n            address(this),\n            _winners[i],\n            _tokenIds[i],\n            _amounts[i],\n            bytes(\"\")\n          )\n        {} catch {\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution -= _amounts[i];\n        }\n      }\n    }\n\n    emit NFTPrizeDistributed(msg.sender, _winners, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\n  }\n\n  /**\n   * @notice Deposit the prize tokens for the specific game/tournament\n   * @dev Only tokens which are allowed as a distributable token can be deposited\n   * @dev Prize is transferred from _depositor address to this contract\n   * @param _depositor Depositor address\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Prize token address\n   * @param _amount Prize amount to deposit\n   */\n  function depositPrize(\n    address _depositor,\n    uint256 _gid,\n    uint256 _tid,\n    address _token,\n    uint256 _amount\n  ) external {\n    require(msg.sender == owner() || msg.sender == addressRegistry.gameRegistry(), \"Only owner or GameRegistry\");\n    require(_token != address(0), \"Unexpected token address\");\n\n    // check if tokens are allowed to claim as a prize\n    require(\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _token),\n      \"Disallowed distribution token\"\n    );\n\n    // deposit prize tokens\n    bool supportsERC721Interface;\n    // Try-catch approach ensures that a non-implementer of EIP-165 standard still can still be deposited\n    try IERC165Upgradeable(_token).supportsInterface(INTERFACE_ID_ERC721) {\n      supportsERC721Interface = IERC165Upgradeable(_token).supportsInterface(INTERFACE_ID_ERC721);\n    } catch {\n      supportsERC721Interface = false;\n    }\n    require(!supportsERC721Interface, \"ERC721 token not allowed\");\n\n    IERC20Upgradeable(_token).safeTransferFrom(_depositor, address(this), _amount);\n    tournamentTokens[_gid][_tid][_token].totalPrizeDeposit += _amount;\n\n    emit PrizeDeposited(msg.sender, _depositor, _gid, _tid, _token, _amount);\n  }\n\n  /**\n   * @notice Withdraw the prize tokens from the specific game/tournament\n   * @dev Only owner\n   * @param _to Beneficiary address\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Prize token address\n   * @param _amount Prize amount to withdraw\n   */\n  function withdrawPrize(\n    address _to,\n    uint256 _gid,\n    uint256 _tid,\n    address _token,\n    uint256 _amount\n  ) external onlyTimelock {\n    // check if the prize is sufficient to withdraw\n    require(tournamentTokens[_gid][_tid][_token].totalPrizeDeposit >= _amount, \"Insufficient prize\");\n\n    // withdraw the prize\n    unchecked {\n      tournamentTokens[_gid][_tid][_token].totalPrizeDeposit -= _amount;\n    }\n    IERC20Upgradeable(_token).safeTransfer(_to, _amount);\n\n    emit PrizeWithdrawn(msg.sender, _to, _gid, _tid, _token, _amount);\n  }\n\n  /**\n   * @notice Deposit NFT prize for the specific game/tournament\n   * @dev NFT type should be either 721 or 1155\n   * @param _from NFT owner address\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _nftAddress NFT address\n   * @param _nftType NFT type (721/1155)\n   * @param _tokenIds Token Id list\n   * @param _amounts Token amount list\n   */\n  function depositNFTPrize(\n    address _from,\n    uint256 _gid,\n    uint256 _tid,\n    address _nftAddress,\n    uint256 _nftType,\n    uint256[] calldata _tokenIds,\n    uint256[] calldata _amounts\n  ) external {\n    require(msg.sender == owner() || msg.sender == addressRegistry.gameRegistry(), \"Only owner or GameRegistry\");\n\n    // check if NFT is allowed to distribute\n    require(\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _nftAddress),\n      \"Disallowed distribution token\"\n    );\n\n    require(_nftAddress != address(0), \"Unexpected NFT address\");\n    require(_nftType == 721 || _nftType == 1155, \"Unexpected NFT type\");\n    require(_tokenIds.length == _amounts.length, \"Mismatched deposit data\");\n\n    uint256 totalAmounts;\n    if (_nftType == 721) {\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \"Unexpected NFT address\");\n\n      // transfer NFTs to the contract and update totalNFTPrizeDeposit\n      for (uint256 i; i < _tokenIds.length; i++) {\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(_from, address(this), _tokenIds[i]);\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit = 1;\n        totalAmounts += _amounts[i];\n      }\n\n      // check if all amount value is 1\n      require(totalAmounts == _tokenIds.length, \"Invalid amount value\");\n    } else {\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \"Unexpected NFT address\");\n\n      // transfer NFTs to the contract and update totalNFTPrizeDeposit\n      IERC1155Upgradeable(_nftAddress).safeBatchTransferFrom(_from, address(this), _tokenIds, _amounts, bytes(\"\"));\n      for (uint256 i; i < _tokenIds.length; i++) {\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit += _amounts[i];\n      }\n    }\n\n    emit NFTPrizeDeposited(msg.sender, _from, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\n  }\n\n  /**\n   * @notice Withdraw NFT prize for the specific game/tournament\n   * @dev Only owner\n   * @dev NFT type should be either 721 or 1155\n   * @param _to NFT receiver address\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _nftAddress NFT address\n   * @param _nftType NFT type (721/1155)\n   * @param _tokenIds Token Id list\n   * @param _amounts Token amount list\n   */\n  function withdrawNFTPrize(\n    address _to,\n    uint256 _gid,\n    uint256 _tid,\n    address _nftAddress,\n    uint256 _nftType,\n    uint256[] calldata _tokenIds,\n    uint256[] calldata _amounts\n  ) external nonReentrant onlyOwner {\n    require(_nftType == 721 || _nftType == 1155, \"Unexpected NFT type\");\n    require(_tokenIds.length == _amounts.length, \"Mismatched deposit data\");\n\n    uint256 totalAmounts;\n    if (_nftType == 721) {\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \"Unexpected NFT address\");\n\n      // update totalNFTPrizeDeposit and transfer NFTs from the contract\n      for (uint256 i; i < _tokenIds.length; i++) {\n        require(\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution ==\n            1,\n          \"Insufficient NFT prize\"\n        );\n\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit = 0;\n        totalAmounts += _amounts[i];\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(address(this), _to, _tokenIds[i]);\n      }\n\n      // check if all amount value is 1\n      require(totalAmounts == _tokenIds.length, \"Invalid amount value\");\n    } else {\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \"Unexpected NFT address\");\n\n      // update totalNFTPrizeDeposit and transfer NFTs from the contract\n      for (uint256 i; i < _tokenIds.length; i++) {\n        require(\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution >=\n            _amounts[i],\n          \"Insufficient NFT prize\"\n        );\n\n        unchecked {\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -= _amounts[i];\n        }\n      }\n      IERC1155Upgradeable(_nftAddress).safeBatchTransferFrom(address(this), _to, _tokenIds, _amounts, bytes(\"\"));\n    }\n\n    emit NFTPrizeWithdrawn(msg.sender, _to, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\n  }\n\n  /**\n   * @notice Pause Oparcade\n   * @dev Only owner\n   */\n  function pause() external onlyOwner {\n    _pause();\n  }\n\n  /**\n   * @notice Resume Oparcade\n   * @dev Only owner\n   */\n  function unpause() external onlyOwner {\n    _unpause();\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal initializer {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal initializer {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    function __Pausable_init() internal initializer {\n        __Context_init_unchained();\n        __Pausable_init_unchained();\n    }\n\n    function __Pausable_init_unchained() internal initializer {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\n    function __ERC721Holder_init() internal initializer {\n        __ERC721Holder_init_unchained();\n    }\n\n    function __ERC721Holder_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC1155ReceiverUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n    function __ERC1155Holder_init() internal initializer {\n        __ERC165_init_unchained();\n        __ERC1155Receiver_init_unchained();\n        __ERC1155Holder_init_unchained();\n    }\n\n    function __ERC1155Holder_init_unchained() internal initializer {\n    }\n    function onERC1155Received(\n        address,\n        address,\n        uint256,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155Received.selector;\n    }\n\n    function onERC1155BatchReceived(\n        address,\n        address,\n        uint256[] memory,\n        uint256[] memory,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC1155BatchReceived.selector;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155Upgradeable is IERC165Upgradeable {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/interfaces/IAddressRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\n/**\n * @title AddressRegistry Contract Interface\n * @notice Define the interface used to get addresses in Oparcade\n * @author David Lee\n */\ninterface IAddressRegistry {\n  /**\n   * @notice Provide the Oparcade contract address\n   * @dev Can be zero in case of the Oparcade contract is not registered\n   * @return address Oparcade contract address\n   */\n  function oparcade() external view returns (address);\n\n  /**\n   * @notice Provide the GameRegistry contract address\n   * @dev Can be zero in case of the GameRegistry contract is not registered\n   * @return address GameRegistry contract address\n   */\n  function gameRegistry() external view returns (address);\n\n  /**\n   * @notice Provide the maintainer address\n   * @dev Can be zero in case of the maintainer address is not registered\n   * @return address Maintainer contract address\n   */\n  function maintainer() external view returns (address);\n\n  /**\n   * @notice Provide the timelock contract address\n   * @dev Can be zero in case of the timelock address is not registered\n   * @return address Timelock contract address\n   */\n  function timelock() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IGameRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\n/**\n * @title GameRegistry Contract Interface\n * @notice Define the interface necessary for the GameRegistry\n * @author David Lee\n */\ninterface IGameRegistry {\n  struct Token {\n    address tokenAddress;\n    uint256 tokenAmount;\n  }\n\n  struct Tournament {\n    string name;\n    address creatorAddress;\n    uint256 creatorFee;\n    uint256 appliedGameCreatorFee;\n    /// @dev Token address -> amount\n    mapping(address => uint256) depositTokenAmount;\n  }\n\n  struct Game {\n    string name;\n    address creatorAddress;\n    uint256 baseCreatorFee;\n    bool isDeprecated;\n    address[] distributableTokenList; // return all array\n    address[] depositTokenList;\n    mapping(uint256 => Tournament) tournaments;\n    uint256 tournamentsCount;\n    /// @dev Token address -> Bool\n    mapping(address => bool) distributable;\n  }\n\n  /**\n   * @return (address) Platform fee recipient\n   */\n  function feeRecipient() external returns (address);\n\n  /**\n   * @return (uint256) Platform fee\n   */\n  function platformFee() external returns (uint256);\n\n  /**\n   * @return (address) Tournament creation fee token address\n   */\n  function tournamentCreationFeeToken() external returns (address);\n\n  /**\n   * @return (uint256) Tournament creation fee token amount\n   */\n  function tournamentCreationFeeAmount() external returns (uint256);\n\n  /**\n   * @notice Returns a boolean indicating if a specific game is deprecated\n   * @param _gid Game ID\n   * @return (bool) Is deprecated\n   */\n  function isGameDeprecated(uint256 _gid) external view returns (bool);\n\n  /**\n   * @notice Returns the game name\n   * @param _gid Game ID\n   * @return (string) Game name\n   */\n  function getGameName(uint256 _gid) external view returns (string memory);\n\n  /**\n   * @notice Returns the game creator address\n   * @param _gid Game ID\n   * @return (string) Game creator address\n   */\n  function getGameCreatorAddress(uint256 _gid) external view returns (address);\n\n  /**\n   * @notice Returns the game creator fee\n   * @param _gid Game ID\n   * @return (uint256) Game creator fee\n   */\n  function getGameBaseCreatorFee(uint256 _gid) external view returns (uint256);\n\n  /**\n   * @notice Returns true if the token of a specific game is distributable, false otherwise\n   * @param _gid Game ID\n   * @param _tokenAddress token address\n   * @return (uint256) Is token distributable\n   */\n  function isDistributable(uint256 _gid, address _tokenAddress) external view returns (bool);\n\n  /**\n   * @notice Returns the deposit token list of the game\n   * @param _gid Game ID\n   * @param (address[]) Deposit token list of the game\n   */\n  function getDepositTokenList(uint256 _gid) external view returns (address[] memory);\n\n  /**\n   * @notice Returns the distributable token list of the game\n   * @param _gid Game ID\n   * @param (address[]) Distributable token list of the game\n   */\n  function getDistributableTokenList(uint256 _gid) external view returns (address[] memory);\n\n  /**\n   * @notice Returns the number of games created\n   * @return (uint256) Amount of games created\n   */\n  function gameCount() external view returns (uint256);\n\n  /**\n   * @notice Returns the number of the tournaments of the specific game\n   * @param _gid Game ID\n   * @return (uint256) Number of the tournament\n   */\n  function getTournamentCount(uint256 _gid) external view returns (uint256);\n\n  /**\n   * @notice Returns the tournament name of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @return (string) Tournament name\n   */\n  function getTournamentName(uint256 _gid, uint256 _tid) external view returns (string memory);\n\n  /**\n   * @notice Returns the tournament creator fee of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @return (uint256) Tournament creator fee\n   */\n  function getTournamentCreatorFee(uint256 _gid, uint256 _tid) external view returns (uint256);\n\n  /**\n   * @notice Returns the applied game creator fee of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @return (string) Game applied game creator fee of a tournament\n   */\n  function getAppliedGameCreatorFee(uint256 _gid, uint256 _tid) external view returns (uint256);\n\n  /**\n   * @notice Returns the deposit token amount of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _tokenAddress token address\n   * @return (uint256) Tournament deposit token amount\n   */\n  function getDepositTokenAmount(\n    uint256 _gid,\n    uint256 _tid,\n    address _tokenAddress\n  ) external view returns (uint256);\n\n  /**\n   * @notice Returns the tournament creator address of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @return (address) Tournament creator address\n   */\n  function getTournamentCreator(uint256 _gid, uint256 _tid) external view returns (address);\n\n  /**\n   * @notice Add the new game\n   * @dev Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the game\n   * @dev When creating the tournament of the game, the game creator fee can be proposed by the tournament creator\n   * @dev but the proposed value can't be less than the base one\n   * @dev If the proposed game creator fee is 0, the base game creator fee will be applied\n   * @param _gameName Game name to add\n   * @param _gameCreator Game creator address\n   * @param _baseGameCreatorFee Base game creator fee\n   */\n  function addGame(\n    string calldata _gameName,\n    address _gameCreator,\n    uint256 _baseGameCreatorFee\n  ) external returns (uint256);\n\n  /**\n   * @notice Remove the exising game\n   * @dev Game is not removed from the games array, just set it deprecated\n   * @param _gid Game ID\n   */\n  function removeGame(uint256 _gid) external;\n\n  /**\n   * @notice Update the game creator\n   * @param _gid Game ID\n   * @param _gameCreator Game creator address\n   */\n  function updateGameCreator(uint256 _gid, address _gameCreator) external;\n\n  /**\n   * @notice Update the base game creator fee\n   * @dev Tournament creator fee is the royality that will be transferred to the tournament creator address\n   * @dev Tournament creator can propose the game creator fee when creating the tournament\n   * @dev but it can't be less than the base game creator fee\n   * @param _gid Game ID\n   * @param _baseGameCreatorFee Base game creator fee\n   */\n  function updateBaseGameCreatorFee(uint256 _gid, uint256 _baseGameCreatorFee) external;\n\n  /**\n   * @notice Create the tournament and set tokens\n   * @dev Only owner\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\n   * @param _gid Game ID\n   * @param _proposedGameCreatorFee Proposed game creator fee\n   * @param _tournamentCreatorFee Tournament creator fee\n   * @param _depositToken Token to allow/disallow the deposit\n   * @param _distributionTokenAddress Distribution token address to be set to active\n   * @return tid Tournament ID created\n   */\n  function createTournamentByDAOWithTokens(\n    uint256 _gid,\n    string memory _tournamentName,\n    uint256 _proposedGameCreatorFee,\n    uint256 _tournamentCreatorFee,\n    Token calldata _depositToken,\n    address _distributionTokenAddress\n  ) external returns (uint256);\n\n  /**\n   * @notice Create the tournament\n   * @dev Only owner\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\n   * @param _gid Game ID\n   * @param _proposedGameCreatorFee Proposed game creator fee\n   * @param _tournamentCreatorFee Tournament creator fee\n   * @return tid Tournament ID created\n   */\n  function createTournamentByDAO(\n    uint256 _gid,\n    string calldata _tournamentName,\n    uint256 _proposedGameCreatorFee,\n    uint256 _tournamentCreatorFee\n  ) external returns (uint256);\n\n  /**\n   * @notice Create the tournament\n   * @dev Anyone can create the tournament and initialize the prize pool with tokens and NFTs\n   * @dev Tournament creator should set all params necessary for the tournament in 1 tx and\n   * @dev the params set is immutable. It will be prevent the fraud tournament is created\n   * @dev Tournament creator should pay fees to create the tournament\n   * @dev and the fee token address and fee token amount are set by the owner\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\n   * @dev NFT type to initialize the prize pool should be either 721 or 1155\n   * @param _gid Game ID\n   * @param _proposedGameCreatorFee Proposed game creator fee\n   * @param _tournamentCreatorFee Tournament creator fee\n   * @param _depositToken Deposit token (address and amount) for playing the tournament\n   * @param _tokenToAddPrizePool Token (address and amount) to initialize the prize pool\n   * @param _nftAddressToAddPrizePool NFT address to initialize the prize pool\n   * @param _nftTypeToAddPrizePool NFT type to initialize the prize pool\n   * @param _tokenIdsToAddPrizePool NFT token Id list to initialize the prize pool\n   * @param _amountsToAddPrizePool NFT token amount list to initialize the prize pool\n   * @return tid Tournament ID created\n   */\n  function createTournamentByUser(\n    uint256 _gid,\n    string calldata _tournamentName,\n    uint256 _proposedGameCreatorFee,\n    uint256 _tournamentCreatorFee,\n    Token calldata _depositToken,\n    Token calldata _tokenToAddPrizePool,\n    address _nftAddressToAddPrizePool,\n    uint256 _nftTypeToAddPrizePool,\n    uint256[] memory _tokenIdsToAddPrizePool,\n    uint256[] memory _amountsToAddPrizePool\n  ) external returns (uint256 tid);\n\n  /**\n   * @notice Update deposit token amount\n   * @dev Only owner\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Token address to allow/disallow the deposit\n   * @param _amount Token amount\n   */\n  function updateDepositTokenAmount(\n    uint256 _gid,\n    uint256 _tid,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  /**\n   * @notice Update distributable token address\n   * @dev Only owner\n   * @param _gid Game ID\n   * @param _token Token address to allow/disallow the deposit\n   * @param _isDistributable true: distributable false: not distributable\n   */\n  function updateDistributableTokenAddress(\n    uint256 _gid,\n    address _token,\n    bool _isDistributable\n  ) external;\n\n  /**\n   * @notice Update the platform fee\n   * @dev Only owner\n   * @dev Allow zero recipient address only of fee is also zero\n   * @param _feeRecipient Platform fee recipient address\n   * @param _platformFee platform fee\n   */\n  function updatePlatformFee(address _feeRecipient, uint256 _platformFee) external;\n\n  /**\n   * @notice Update the tournament creation fee\n   * @dev Only owner\n   * @dev Tournament creator should pay this fee when creating the tournament\n   * @param _tournamentCreationFeeToken Fee token address\n   * @param _tournamentCreationFeeAmount Fee token amount\n   */\n  function updateTournamentCreationFee(address _tournamentCreationFeeToken, uint256 _tournamentCreationFeeAmount)\n    external;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721ReceiverUpgradeable {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155ReceiverUpgradeable.sol\";\nimport \"../../../utils/introspection/ERC165Upgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n    function __ERC1155Receiver_init() internal initializer {\n        __ERC165_init_unchained();\n        __ERC1155Receiver_init_unchained();\n    }\n\n    function __ERC1155Receiver_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165Upgradeable.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal initializer {\n        __ERC165_init_unchained();\n    }\n\n    function __ERC165_init_unchained() internal initializer {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/GameRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"./interfaces/IAddressRegistry.sol\";\nimport \"./interfaces/IOparcade.sol\";\n\n/**\n * @title GameRegistry\n * @notice This contract stores all info related to the game and tournament creation\n * @author David Lee\n */\ncontract GameRegistry is OwnableUpgradeable {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  event GameAdded(\n    address indexed by,\n    uint256 indexed gid,\n    string gameName,\n    address indexed gameCreator,\n    uint256 baseGameCreatorFee\n  );\n  event GameRemoved(\n    address indexed by,\n    uint256 indexed gid,\n    string gameName,\n    address indexed gameCreator,\n    uint256 baseGameCreatorFee\n  );\n  event GameCreatorUpdated(\n    address indexed by,\n    uint256 indexed gid,\n    address indexed oldGameCreator,\n    address newGameCreator\n  );\n  event BaseGameCreatorFeeUpdated(\n    address indexed by,\n    uint256 indexed gid,\n    uint256 indexed oldBaseGameCreatorFee,\n    uint256 newBaseGameCreatorFee\n  );\n  event TournamentCreated(\n    address indexed by,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    string tournamentName,\n    uint256 appliedGameCreatorFee,\n    uint256 tournamentCreatorFee\n  );\n  event DepositAmountUpdated(\n    address indexed by,\n    uint256 indexed gid,\n    uint256 indexed tid,\n    string tournamentName,\n    address token,\n    uint256 oldAmount,\n    uint256 newAmount\n  );\n  event DistributableTokenAddressUpdated(\n    address indexed by,\n    uint256 indexed gid,\n    address indexed token,\n    bool oldStatus,\n    bool newStatus\n  );\n  event PlatformFeeUpdated(\n    address indexed by,\n    address indexed oldFeeRecipient,\n    uint256 oldPlatformFee,\n    address indexed newFeeRecipient,\n    uint256 newPlatformFee\n  );\n  event TournamentCreationFeeUpdated(\n    address indexed by,\n    address indexed oldTournamentCreationFeeToken,\n    uint256 oldTournamentCreationFeeAmount,\n    address indexed newTournamentCreationFeeToken,\n    uint256 newTournamentCreationFeeAmount\n  );\n\n  struct Token {\n    address tokenAddress;\n    uint256 tokenAmount;\n  }\n\n  struct Tournament {\n    string name;\n    address creatorAddress;\n    uint256 creatorFee;\n    uint256 appliedGameCreatorFee;\n    /// @dev Token address -> amount\n    mapping(address => uint256) depositTokenAmount;\n  }\n\n  struct Game {\n    string name;\n    address creatorAddress;\n    uint256 baseCreatorFee;\n    bool isDeprecated;\n    address[] distributableTokenList; // return all array\n    address[] depositTokenList;\n    mapping(uint256 => Tournament) tournaments;\n    uint256 tournamentsCount;\n    /// @dev Token address -> Bool\n    mapping(address => bool) distributable;\n  }\n\n  /// @dev Game name array\n  Game[] public games;\n\n  /// @dev AddressRegistry\n  IAddressRegistry public addressRegistry;\n\n  /// @dev Platform fee recipient\n  address public feeRecipient;\n\n  /// @dev Platform fee\n  uint256 public platformFee;\n\n  /// @dev Tournament creation fee token address\n  address public tournamentCreationFeeToken;\n\n  /// @dev Tournament creation fee token amount\n  uint256 public tournamentCreationFeeAmount;\n\n  /// @dev Max fee constant in permillage (percentage * 10)\n  uint256 constant MAX_PERMILLAGE = 100_0;\n\n  modifier onlyValidGID(uint256 _gid) {\n    require(_gid < games.length, \"Invalid game index\");\n    _;\n  }\n\n  modifier onlyActiveGame(uint256 _gid) {\n    require(_gid < games.length && !games[_gid].isDeprecated, \"Game not active\");\n    _;\n  }\n\n  modifier onlyValidTID(uint256 _gid, uint256 _tid) {\n    require(_tid < games[_gid].tournamentsCount, \"Invalid tournament index\");\n    _;\n  }\n\n  function initialize(\n    address _addressRegistry,\n    address _feeRecipient,\n    uint256 _platformFee,\n    address _tournamentCreationFeeToken,\n    uint256 _tournamentCreationFeeAmount\n  ) public initializer {\n    __Ownable_init();\n\n    require(_addressRegistry != address(0), \"Zero address registry\");\n    require(_tournamentCreationFeeToken != address(0), \"Zero tournament fee token\");\n    require(_feeRecipient != address(0) || _platformFee == 0, \"Fee recipient not set\");\n    require(_platformFee <= MAX_PERMILLAGE, \"Platform fee exceeded\");\n\n    // initialize AddressRegistery\n    addressRegistry = IAddressRegistry(_addressRegistry);\n\n    // initialize fee and recipient\n    feeRecipient = _feeRecipient;\n    platformFee = _platformFee;\n    tournamentCreationFeeToken = _tournamentCreationFeeToken;\n    tournamentCreationFeeAmount = _tournamentCreationFeeAmount;\n  }\n\n  /**\n   * @notice Returns a boolean indicating if a specific game is deprecated\n   * @param _gid Game ID\n   * @return (bool) Is deprecated\n   */\n  function isGameDeprecated(uint256 _gid) external view onlyValidGID(_gid) returns (bool) {\n    return games[_gid].isDeprecated;\n  }\n\n  /**\n   * @notice Returns the game name\n   * @param _gid Game ID\n   * @return (string) Game name\n   */\n  function getGameName(uint256 _gid) external view onlyValidGID(_gid) returns (string memory) {\n    return games[_gid].name;\n  }\n\n  /**\n   * @notice Returns the game creator address\n   * @param _gid Game ID\n   * @return (string) Game creator address\n   */\n  function getGameCreatorAddress(uint256 _gid) external view onlyValidGID(_gid) returns (address) {\n    return games[_gid].creatorAddress;\n  }\n\n  /**\n   * @notice Returns the game creator fee\n   * @param _gid Game ID\n   * @return (uint256) Game creator fee\n   */\n  function getGameBaseCreatorFee(uint256 _gid) external view onlyValidGID(_gid) returns (uint256) {\n    return games[_gid].baseCreatorFee;\n  }\n\n  /**\n   * @notice Returns true if the token of a specific game is distributable, false otherwise\n   * @param _gid Game ID\n   * @param _tokenAddress token address\n   * @return (uint256) Is token distributable\n   */\n  function isDistributable(uint256 _gid, address _tokenAddress) external view onlyValidGID(_gid) returns (bool) {\n    return games[_gid].distributable[_tokenAddress];\n  }\n\n  /**\n   * @notice Returns the deposit token list of the game\n   * @param _gid Game ID\n   * @param (address[]) Deposit token list of the game\n   */\n  function getDepositTokenList(uint256 _gid) external view returns (address[] memory) {\n    return games[_gid].depositTokenList;\n  }\n\n  /**\n   * @notice Returns the distributable token list of the game\n   * @param _gid Game ID\n   * @param (address[]) Distributable token list of the game\n   */\n  function getDistributableTokenList(uint256 _gid) external view returns (address[] memory) {\n    return games[_gid].distributableTokenList;\n  }\n\n  /**\n   * @notice Returns the number of games created\n   * @return (uint256) Amount of games created\n   */\n  function gameCount() external view returns (uint256) {\n    return games.length;\n  }\n\n  /**\n   * @notice Returns the number of the tournaments of the specific game\n   * @param _gid Game ID\n   * @return (uint256) Number of the tournament\n   */\n  function getTournamentCount(uint256 _gid) external view onlyValidGID(_gid) returns (uint256) {\n    return games[_gid].tournamentsCount;\n  }\n\n  /**\n   * @notice Returns the tournament name of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @return (string) Tournament name\n   */\n  function getTournamentName(uint256 _gid, uint256 _tid)\n    external\n    view\n    onlyValidGID(_gid)\n    onlyValidTID(_gid, _tid)\n    returns (string memory)\n  {\n    return games[_gid].tournaments[_tid].name;\n  }\n\n  /**\n   * @notice Returns the tournament creator fee of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @return (uint256) Tournament creator fee\n   */\n  function getTournamentCreatorFee(uint256 _gid, uint256 _tid)\n    external\n    view\n    onlyValidGID(_gid)\n    onlyValidTID(_gid, _tid)\n    returns (uint256)\n  {\n    return games[_gid].tournaments[_tid].creatorFee;\n  }\n\n  /**\n   * @notice Returns the applied game creator fee of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @return (string) Game applied game creator fee of a tournament\n   */\n  function getAppliedGameCreatorFee(uint256 _gid, uint256 _tid)\n    external\n    view\n    onlyValidGID(_gid)\n    onlyValidTID(_gid, _tid)\n    returns (uint256)\n  {\n    return games[_gid].tournaments[_tid].appliedGameCreatorFee;\n  }\n\n  /**\n   * @notice Returns the deposit token amount of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _tokenAddress token address\n   * @return (uint256) Tournament deposit token amount\n   */\n  function getDepositTokenAmount(\n    uint256 _gid,\n    uint256 _tid,\n    address _tokenAddress\n  ) external view onlyValidGID(_gid) onlyValidTID(_gid, _tid) returns (uint256) {\n    return games[_gid].tournaments[_tid].depositTokenAmount[_tokenAddress];\n  }\n\n  /**\n   * @notice Returns the tournament creator address of the specific tournament\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @return (address) Tournament creator address\n   */\n  function getTournamentCreator(uint256 _gid, uint256 _tid)\n    external\n    view\n    onlyValidGID(_gid)\n    onlyValidTID(_gid, _tid)\n    returns (address)\n  {\n    return games[_gid].tournaments[_tid].creatorAddress;\n  }\n\n  /**\n   * @notice Add the new game\n   * @dev Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the game\n   * @dev When creating the tournament of the game, the game creator fee can be proposed by the tournament creator\n   * @dev but the proposed value can't be less than the base one\n   * @dev If the proposed game creator fee is 0, the base game creator fee will be applied\n   * @param _gameName Game name to add\n   * @param _gameCreator Game creator address\n   * @param _baseGameCreatorFee Base game creator fee\n   */\n  function addGame(\n    string calldata _gameName,\n    address _gameCreator,\n    uint256 _baseGameCreatorFee\n  ) external onlyOwner returns (uint256 gid) {\n    require(bytes(_gameName).length != 0, \"Empty game name\");\n    require(_gameCreator != address(0), \"Zero game creator address\");\n    require(platformFee + _baseGameCreatorFee <= MAX_PERMILLAGE, \"Exceeded base game creator fee\");\n\n    // Create game and set properties\n    gid = games.length;\n    games.push();\n    games[gid].name = _gameName;\n    games[gid].creatorAddress = _gameCreator;\n    games[gid].baseCreatorFee = _baseGameCreatorFee;\n\n    emit GameAdded(msg.sender, gid, _gameName, _gameCreator, _baseGameCreatorFee);\n  }\n\n  /**\n   * @notice Remove the exising game\n   * @dev Game is not removed from the games array, just set it deprecated\n   * @param _gid Game ID\n   */\n  function removeGame(uint256 _gid) external onlyOwner onlyActiveGame(_gid) {\n    // remove game\n    games[_gid].isDeprecated = true;\n\n    emit GameRemoved(msg.sender, _gid, games[_gid].name, games[_gid].creatorAddress, games[_gid].baseCreatorFee);\n  }\n\n  /**\n   * @notice Update the game creator\n   * @param _gid Game ID\n   * @param _gameCreator Game creator address\n   */\n  function updateGameCreator(uint256 _gid, address _gameCreator) external onlyActiveGame(_gid) {\n    require(msg.sender == games[_gid].creatorAddress, \"Only game creator\");\n    require(_gameCreator != address(0), \"Zero game creator address\");\n\n    emit GameCreatorUpdated(msg.sender, _gid, games[_gid].creatorAddress, _gameCreator);\n\n    // update the game creator address\n    games[_gid].creatorAddress = _gameCreator;\n  }\n\n  /**\n   * @notice Update the base game creator fee\n   * @dev Tournament creator fee is the royality that will be transferred to the tournament creator address\n   * @dev Tournament creator can propose the game creator fee when creating the tournament\n   * @dev but it can't be less than the base game creator fee\n   * @param _gid Game ID\n   * @param _baseGameCreatorFee Base game creator fee\n   */\n  function updateBaseGameCreatorFee(uint256 _gid, uint256 _baseGameCreatorFee) external onlyOwner onlyActiveGame(_gid) {\n    require(platformFee + _baseGameCreatorFee <= MAX_PERMILLAGE, \"Exceeded game creator fee\");\n\n    emit BaseGameCreatorFeeUpdated(msg.sender, _gid, games[_gid].baseCreatorFee, _baseGameCreatorFee);\n\n    // update the game creator fee\n    games[_gid].baseCreatorFee = _baseGameCreatorFee;\n  }\n\n  /**\n   * @notice Create the tournament and set tokens\n   * @dev Only owner\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\n   * @param _gid Game ID\n   * @param _proposedGameCreatorFee Proposed game creator fee\n   * @param _tournamentCreatorFee Tournament creator fee\n   * @param _depositToken Token to allow/disallow the deposit\n   * @param _distributionTokenAddress Distribution token address to be set to active\n   * @return tid Tournament ID created\n   */\n  function createTournamentByDAOWithTokens(\n    uint256 _gid,\n    string memory _tournamentName,\n    uint256 _proposedGameCreatorFee,\n    uint256 _tournamentCreatorFee,\n    Token calldata _depositToken,\n    address _distributionTokenAddress\n  ) external onlyOwner onlyActiveGame(_gid) returns (uint256 tid) {\n    // create the tournament\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\n\n    // set the deposit token address and amount\n    _updateDepositTokenAmount(_gid, tid, _depositToken.tokenAddress, _depositToken.tokenAmount);\n\n    // set the distributable token address\n    if (!games[_gid].distributable[_distributionTokenAddress]) {\n      _updateDistributableTokenAddress(_gid, _distributionTokenAddress, true);\n    }\n\n    return tid;\n  }\n\n  /**\n   * @notice Create the tournament\n   * @dev Only owner\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\n   * @param _gid Game ID\n   * @param _proposedGameCreatorFee Proposed game creator fee\n   * @param _tournamentCreatorFee Tournament creator fee\n   * @return tid Tournament ID created\n   */\n  function createTournamentByDAO(\n    uint256 _gid,\n    string calldata _tournamentName,\n    uint256 _proposedGameCreatorFee,\n    uint256 _tournamentCreatorFee\n  ) external onlyOwner onlyActiveGame(_gid) returns (uint256 tid) {\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\n  }\n\n  /**\n   * @notice Create the tournament\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\n   * @param _gid Game ID\n   * @param _proposedGameCreatorFee Proposed game creator fee\n   * @param _tournamentCreatorFee Tournament creator fee\n   * @return tid Tournament ID created\n   */\n  function _createTournament(\n    uint256 _gid,\n    string memory _tournamentName,\n    uint256 _proposedGameCreatorFee,\n    uint256 _tournamentCreatorFee\n  ) internal returns (uint256 tid) {\n    // use baseCreatorFee if _proposedGameCreatorFee is zero\n    uint256 appliedGameCreatorFee;\n    if (_proposedGameCreatorFee == 0) {\n      appliedGameCreatorFee = games[_gid].baseCreatorFee;\n    } else {\n      appliedGameCreatorFee = _proposedGameCreatorFee;\n    }\n\n    // check fees\n    require(games[_gid].baseCreatorFee <= appliedGameCreatorFee, \"Low game creator fee proposed\");\n    require(platformFee + appliedGameCreatorFee + _tournamentCreatorFee <= MAX_PERMILLAGE, \"Exceeded fees\");\n\n    // get the new tournament ID\n    tid = games[_gid].tournamentsCount;\n\n    // add tournament\n    games[_gid].tournamentsCount += 1;\n    games[_gid].tournaments[tid].name = _tournamentName;\n    games[_gid].tournaments[tid].creatorAddress = msg.sender;\n    games[_gid].tournaments[tid].appliedGameCreatorFee = appliedGameCreatorFee;\n    games[_gid].tournaments[tid].creatorFee = _tournamentCreatorFee;\n\n    emit TournamentCreated(msg.sender, _gid, tid, _tournamentName, appliedGameCreatorFee, _tournamentCreatorFee);\n  }\n\n  /**\n   * @notice Create the tournament\n   * @dev Anyone can create the tournament and initialize the prize pool with tokens and NFTs\n   * @dev Tournament creator should set all params necessary for the tournament in 1 tx and\n   * @dev the params set is immutable. It will be prevent the fraud tournament is created\n   * @dev Tournament creator should pay fees to create the tournament\n   * @dev and the fee token address and fee token amount are set by the owner\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\n   * @dev NFT type to initialize the prize pool should be either 721 or 1155\n   * @param _gid Game ID\n   * @param _proposedGameCreatorFee Proposed game creator fee\n   * @param _tournamentCreatorFee Tournament creator fee\n   * @param _depositToken Deposit token (address and amount) for playing the tournament\n   * @param _tokenToAddPrizePool Token (address and amount) to initialize the prize pool\n   * @param _nftAddressToAddPrizePool NFT address to initialize the prize pool\n   * @param _nftTypeToAddPrizePool NFT type to initialize the prize pool\n   * @param _tokenIdsToAddPrizePool NFT token Id list to initialize the prize pool\n   * @param _amountsToAddPrizePool NFT token amount list to initialize the prize pool\n   * @return tid Tournament ID created\n   */\n  function createTournamentByUser(\n    uint256 _gid,\n    string calldata _tournamentName,\n    uint256 _proposedGameCreatorFee,\n    uint256 _tournamentCreatorFee,\n    Token calldata _depositToken,\n    Token calldata _tokenToAddPrizePool,\n    address _nftAddressToAddPrizePool,\n    uint256 _nftTypeToAddPrizePool,\n    uint256[] memory _tokenIdsToAddPrizePool,\n    uint256[] memory _amountsToAddPrizePool\n  ) external onlyActiveGame(_gid) returns (uint256 tid) {\n    // pay the tournament creation fee\n    IERC20Upgradeable(tournamentCreationFeeToken).safeTransferFrom(\n      msg.sender,\n      feeRecipient,\n      tournamentCreationFeeAmount\n    );\n\n    // create new tournament\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\n\n    // set the deposit token amount\n    _updateDepositTokenAmount(_gid, tid, _depositToken.tokenAddress, _depositToken.tokenAmount);\n\n    // set the distributable token\n    if (!games[_gid].distributable[_depositToken.tokenAddress] && _depositToken.tokenAmount > 0) {\n      _updateDistributableTokenAddress(_gid, _depositToken.tokenAddress, true);\n    }\n    if (!games[_gid].distributable[_tokenToAddPrizePool.tokenAddress] && _tokenToAddPrizePool.tokenAmount > 0) {\n      _updateDistributableTokenAddress(_gid, _tokenToAddPrizePool.tokenAddress, true);\n    }\n\n    // initialize the prize pool with tokens\n    if (_tokenToAddPrizePool.tokenAmount > 0) {\n      IOparcade(addressRegistry.oparcade()).depositPrize(\n        msg.sender,\n        _gid,\n        tid,\n        _tokenToAddPrizePool.tokenAddress,\n        _tokenToAddPrizePool.tokenAmount\n      );\n    }\n\n    // initialize the prize pool with NFTs\n    if (_nftTypeToAddPrizePool == 721 || _nftTypeToAddPrizePool == 1155) {\n      // set the distributable token\n      if (!games[_gid].distributable[_nftAddressToAddPrizePool] && _amountsToAddPrizePool.length > 0) {\n        _updateDistributableTokenAddress(_gid, _nftAddressToAddPrizePool, true);\n      }\n\n      IOparcade(addressRegistry.oparcade()).depositNFTPrize(\n        msg.sender,\n        _gid,\n        tid,\n        _nftAddressToAddPrizePool,\n        _nftTypeToAddPrizePool,\n        _tokenIdsToAddPrizePool,\n        _amountsToAddPrizePool\n      );\n    }\n  }\n\n  /**\n   * @notice Update deposit token amount\n   * @dev Only owner\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Token address to allow/disallow the deposit\n   * @param _amount Token amount\n   */\n  function updateDepositTokenAmount(\n    uint256 _gid,\n    uint256 _tid,\n    address _token,\n    uint256 _amount\n  ) external onlyOwner onlyActiveGame(_gid) onlyValidTID(_gid, _tid) {\n    _updateDepositTokenAmount(_gid, _tid, _token, _amount);\n  }\n\n  /**\n   * @notice Update deposit token amount\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Token address to allow/disallow the deposit\n   * @param _amount Token amount\n   */\n  function _updateDepositTokenAmount(\n    uint256 _gid,\n    uint256 _tid,\n    address _token,\n    uint256 _amount\n  ) internal {\n    emit DepositAmountUpdated(\n      msg.sender,\n      _gid,\n      _tid,\n      games[_gid].tournaments[_tid].name,\n      _token,\n      games[_gid].tournaments[_tid].depositTokenAmount[_token],\n      _amount\n    );\n\n    // update deposit token list\n    if (_amount > 0) {\n      if (games[_gid].tournaments[_tid].depositTokenAmount[_token] == 0) {\n        // add the token into the list only if it's added newly\n        games[_gid].depositTokenList.push(_token);\n      }\n    } else {\n      for (uint256 i; i < games[_gid].depositTokenList.length; i++) {\n        if (_token == games[_gid].depositTokenList[i]) {\n          // remove the token from the list\n          games[_gid].depositTokenList[i] = games[_gid].depositTokenList[games[_gid].depositTokenList.length - 1];\n          games[_gid].depositTokenList.pop();\n          break;\n        }\n      }\n    }\n\n    // update deposit token amount\n    games[_gid].tournaments[_tid].depositTokenAmount[_token] = _amount;\n  }\n\n  /**\n   * @notice Update distributable token address\n   * @dev Only owner\n   * @param _gid Game ID\n   * @param _token Token address to allow/disallow the deposit\n   * @param _isDistributable true: distributable false: not distributable\n   */\n  function updateDistributableTokenAddress(\n    uint256 _gid,\n    address _token,\n    bool _isDistributable\n  ) external onlyOwner onlyActiveGame(_gid) {\n    _updateDistributableTokenAddress(_gid, _token, _isDistributable);\n  }\n\n  /**\n   * @notice Update distributable token address\n   * @dev Only owner\n   * @param _gid Game ID\n   * @param _token Token address to allow/disallow the deposit\n   * @param _isDistributable true: distributable false: not distributable\n   */\n  function _updateDistributableTokenAddress(\n    uint256 _gid,\n    address _token,\n    bool _isDistributable\n  ) internal {\n    emit DistributableTokenAddressUpdated(\n      msg.sender,\n      _gid,\n      _token,\n      games[_gid].distributable[_token],\n      _isDistributable\n    );\n\n    // update distributable token list\n    if (_isDistributable) {\n      if (!games[_gid].distributable[_token]) {\n        // add token to the list only if it's added newly\n        games[_gid].distributableTokenList.push(_token);\n      }\n    } else {\n      for (uint256 i; i < games[_gid].distributableTokenList.length; i++) {\n        if (_token == games[_gid].distributableTokenList[i]) {\n          games[_gid].distributableTokenList[i] = games[_gid].distributableTokenList[\n            games[_gid].distributableTokenList.length - 1\n          ];\n          games[_gid].distributableTokenList.pop();\n          break;\n        }\n      }\n    }\n\n    // update distributable token amount\n    games[_gid].distributable[_token] = _isDistributable;\n  }\n\n  /**\n   * @notice Update the platform fee\n   * @dev Only owner\n   * @dev Allow zero recipient address only of fee is also zero\n   * @param _feeRecipient Platform fee recipient address\n   * @param _platformFee platform fee\n   */\n  function updatePlatformFee(address _feeRecipient, uint256 _platformFee) external onlyOwner {\n    require(_feeRecipient != address(0) || _platformFee == 0, \"Fee recipient not set\");\n    require(_platformFee <= MAX_PERMILLAGE, \"Platform fee exceeded\");\n\n    emit PlatformFeeUpdated(msg.sender, feeRecipient, platformFee, _feeRecipient, _platformFee);\n\n    feeRecipient = _feeRecipient;\n    platformFee = _platformFee;\n  }\n\n  /**\n   * @notice Update the tournament creation fee\n   * @dev Only owner\n   * @dev Tournament creator should pay this fee when creating the tournament\n   * @param _tournamentCreationFeeToken Fee token address\n   * @param _tournamentCreationFeeAmount Fee token amount\n   */\n  function updateTournamentCreationFee(address _tournamentCreationFeeToken, uint256 _tournamentCreationFeeAmount)\n    external\n    onlyOwner\n  {\n    require(_tournamentCreationFeeToken != address(0), \"Zero tournament creation fee token\");\n    require(_tournamentCreationFeeAmount > 0, \"Zero tournament creation fee\");\n\n    emit TournamentCreationFeeUpdated(\n      msg.sender,\n      tournamentCreationFeeToken,\n      tournamentCreationFeeAmount,\n      _tournamentCreationFeeToken,\n      _tournamentCreationFeeAmount\n    );\n\n    tournamentCreationFeeToken = _tournamentCreationFeeToken;\n    tournamentCreationFeeAmount = _tournamentCreationFeeAmount;\n  }\n}\n"
    },
    "contracts/interfaces/IOparcade.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\n/**\n * @title Oparcade Contract Interface\n * @notice Define the interface used to get the token deposit and withdrawal info\n * @author David Lee\n */\ninterface IOparcade {\n  /**\n   * @notice Deposit ERC20 tokens from user\n   * @dev Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Token address to deposit\n   */\n  function deposit(\n    uint256 _gid,\n    uint256 _tid,\n    address _token\n  ) external;\n\n  /**\n   * @notice Deposit the prize tokens for the specific game/tournament\n   * @dev Only tokens which are allowed as a distributable token can be deposited\n   * @dev Prize is transferred from _depositor address to this contract\n   * @param _depositor Depositor address\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Prize token address\n   * @param _amount Prize amount to deposit\n   */\n  function depositPrize(\n    address _depositor,\n    uint256 _gid,\n    uint256 _tid,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  /**\n   * @notice Deposit NFT prize for the specific game/tournament\n   * @dev NFT type should be either 721 or 1155\n   * @param _from NFT owner address\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _nftAddress NFT address\n   * @param _nftType NFT type (721/1155)\n   * @param _tokenIds Token Id list\n   * @param _amounts Token amount list\n   */\n  function depositNFTPrize(\n    address _from,\n    uint256 _gid,\n    uint256 _tid,\n    address _nftAddress,\n    uint256 _nftType,\n    uint256[] calldata _tokenIds,\n    uint256[] calldata _amounts\n  ) external;\n\n  /**\n   * @notice Distribute winners their prizes\n   * @dev Only maintainer\n   * @dev The maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _winners Winners list\n   * @param _token Prize token address\n   * @param _amounts Prize list\n   */\n  function distributePrize(\n    uint256 _gid,\n    uint256 _tid,\n    address[] calldata _winners,\n    address _token,\n    uint256[] calldata _amounts\n  ) external;\n\n  /**\n   * @notice Distribute winners' NFT prizes\n   * @dev Only maintainer\n   * @dev NFT type should be either 721 or 1155\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _winners Winners list\n   * @param _nftAddress NFT address\n   * @param _nftType NFT type (721/1155)\n   * @param _tokenIds Token Id list\n   * @param _amounts Token amount list\n   */\n  function distributeNFTPrize(\n    uint256 _gid,\n    uint256 _tid,\n    address[] calldata _winners,\n    address _nftAddress,\n    uint256 _nftType,\n    uint256[] calldata _tokenIds,\n    uint256[] calldata _amounts\n  ) external;\n\n  /**\n   * @notice Withdraw the prize tokens from the specific game/tournament\n   * @dev Only owner\n   * @param _to Beneficiary address\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _token Prize token address\n   * @param _amount Prize amount to withdraw\n   */\n  function withdrawPrize(\n    address _to,\n    uint256 _gid,\n    uint256 _tid,\n    address _token,\n    uint256 _amount\n  ) external;\n\n  /**\n   * @notice Withdraw NFT prize for the specific game/tournament\n   * @dev Only owner\n   * @dev NFT type should be either 721 or 1155\n   * @param _to NFT receiver address\n   * @param _gid Game ID\n   * @param _tid Tournament ID\n   * @param _nftAddress NFT address\n   * @param _nftType NFT type (721/1155)\n   * @param _tokenIds Token Id list\n   * @param _amounts Token amount list\n   */\n  function withdrawNFTPrize(\n    address _to,\n    uint256 _gid,\n    uint256 _tid,\n    address _nftAddress,\n    uint256 _nftType,\n    uint256[] calldata _tokenIds,\n    uint256[] calldata _amounts\n  ) external;\n\n  /**\n   * @notice Pause Oparcade\n   * @dev Only owner\n   */\n  function pause() external;\n\n  /**\n   * @notice Resume Oparcade\n   * @dev Only owner\n   */\n  function unpause() external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(operator != _msgSender(), \"ERC721: approve to caller\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver(to).onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    function grantRole(bytes32 role, address account) external;\n\n    function revokeRole(bytes32 role, address account) external;\n\n    function renounceRole(bytes32 role, address account) external;\n}\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n        _roles[role].adminRole = adminRole;\n    }\n\n    function _grantRole(bytes32 role, address account) private {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    function _revokeRole(bytes32 role, address account) private {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        require(_msgSender() != operator, \"ERC1155: setting approval status for self\");\n\n        _operatorApprovals[_msgSender()][operator] = approved;\n        emit ApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][account] += amount;\n        emit TransferSingle(operator, address(0), account, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `account`\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address account,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 accountBalance = _balances[id][account];\n        require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][account] = accountBalance - amount;\n        }\n\n        emit TransferSingle(operator, account, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address account,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(account != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 accountBalance = _balances[id][account];\n            require(accountBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][account] = accountBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, account, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "contracts/mocks/MockERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n\ncontract MockERC1155 is ERC1155 {\n  constructor() ERC1155(\"\") {}\n\n  function mint(\n    address to,\n    uint256[] memory ids,\n    uint256[] memory amounts\n  ) public {\n    _mintBatch(to, ids, amounts, bytes(\"\"));\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/mocks/ERC20Mock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract ERC20Mock is ERC20 {\n  constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n    _mint(msg.sender, 10**30);\n  }\n}\n"
    },
    "@openzeppelin/contracts/governance/TimelockController.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../access/AccessControl.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract TimelockController is AccessControl {\n    bytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n    bytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n    bytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n    uint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n    mapping(bytes32 => uint256) private _timestamps;\n    uint256 private _minDelay;\n\n    /**\n     * @dev Emitted when a call is scheduled as part of operation `id`.\n     */\n    event CallScheduled(\n        bytes32 indexed id,\n        uint256 indexed index,\n        address target,\n        uint256 value,\n        bytes data,\n        bytes32 predecessor,\n        uint256 delay\n    );\n\n    /**\n     * @dev Emitted when a call is performed as part of operation `id`.\n     */\n    event CallExecuted(bytes32 indexed id, uint256 indexed index, address target, uint256 value, bytes data);\n\n    /**\n     * @dev Emitted when operation `id` is cancelled.\n     */\n    event Cancelled(bytes32 indexed id);\n\n    /**\n     * @dev Emitted when the minimum delay for future operations is modified.\n     */\n    event MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n    /**\n     * @dev Initializes the contract with a given `minDelay`.\n     */\n    constructor(\n        uint256 minDelay,\n        address[] memory proposers,\n        address[] memory executors\n    ) {\n        _setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n        _setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n\n        // deployer + self administration\n        _setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n        _setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n        // register proposers\n        for (uint256 i = 0; i < proposers.length; ++i) {\n            _setupRole(PROPOSER_ROLE, proposers[i]);\n        }\n\n        // register executors\n        for (uint256 i = 0; i < executors.length; ++i) {\n            _setupRole(EXECUTOR_ROLE, executors[i]);\n        }\n\n        _minDelay = minDelay;\n        emit MinDelayChange(0, minDelay);\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by a certain role. In\n     * addition to checking the sender's role, `address(0)` 's role is also\n     * considered. Granting a role to `address(0)` is equivalent to enabling\n     * this role for everyone.\n     */\n    modifier onlyRoleOrOpenRole(bytes32 role) {\n        if (!hasRole(role, address(0))) {\n            _checkRole(role, _msgSender());\n        }\n        _;\n    }\n\n    /**\n     * @dev Contract might receive/hold ETH as part of the maintenance process.\n     */\n    receive() external payable {}\n\n    /**\n     * @dev Returns whether an id correspond to a registered operation. This\n     * includes both Pending, Ready and Done operations.\n     */\n    function isOperation(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > 0;\n    }\n\n    /**\n     * @dev Returns whether an operation is pending or not.\n     */\n    function isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n        return getTimestamp(id) > _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns whether an operation is ready or not.\n     */\n    function isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n        uint256 timestamp = getTimestamp(id);\n        return timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n    }\n\n    /**\n     * @dev Returns whether an operation is done or not.\n     */\n    function isOperationDone(bytes32 id) public view virtual returns (bool done) {\n        return getTimestamp(id) == _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Returns the timestamp at with an operation becomes ready (0 for\n     * unset operations, 1 for done operations).\n     */\n    function getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n        return _timestamps[id];\n    }\n\n    /**\n     * @dev Returns the minimum delay for an operation to become valid.\n     *\n     * This value can be changed by executing an operation that calls `updateDelay`.\n     */\n    function getMinDelay() public view virtual returns (uint256 duration) {\n        return _minDelay;\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a single\n     * transaction.\n     */\n    function hashOperation(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(target, value, data, predecessor, salt));\n    }\n\n    /**\n     * @dev Returns the identifier of an operation containing a batch of\n     * transactions.\n     */\n    function hashOperationBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public pure virtual returns (bytes32 hash) {\n        return keccak256(abi.encode(targets, values, datas, predecessor, salt));\n    }\n\n    /**\n     * @dev Schedule an operation containing a single transaction.\n     *\n     * Emits a {CallScheduled} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function schedule(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _schedule(id, delay);\n        emit CallScheduled(id, 0, target, value, data, predecessor, delay);\n    }\n\n    /**\n     * @dev Schedule an operation containing a batch of transactions.\n     *\n     * Emits one {CallScheduled} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function scheduleBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt,\n        uint256 delay\n    ) public virtual onlyRole(PROPOSER_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _schedule(id, delay);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            emit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, delay);\n        }\n    }\n\n    /**\n     * @dev Schedule an operation that is to becomes valid after a given delay.\n     */\n    function _schedule(bytes32 id, uint256 delay) private {\n        require(!isOperation(id), \"TimelockController: operation already scheduled\");\n        require(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n        _timestamps[id] = block.timestamp + delay;\n    }\n\n    /**\n     * @dev Cancel an operation.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'proposer' role.\n     */\n    function cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\n        require(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n        delete _timestamps[id];\n\n        emit Cancelled(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a single transaction.\n     *\n     * Emits a {CallExecuted} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function execute(\n        address target,\n        uint256 value,\n        bytes calldata data,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        bytes32 id = hashOperation(target, value, data, predecessor, salt);\n        _beforeCall(predecessor);\n        _call(id, 0, target, value, data);\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Execute an (ready) operation containing a batch of transactions.\n     *\n     * Emits one {CallExecuted} event per transaction in the batch.\n     *\n     * Requirements:\n     *\n     * - the caller must have the 'executor' role.\n     */\n    function executeBatch(\n        address[] calldata targets,\n        uint256[] calldata values,\n        bytes[] calldata datas,\n        bytes32 predecessor,\n        bytes32 salt\n    ) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n        require(targets.length == values.length, \"TimelockController: length mismatch\");\n        require(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n        bytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n        _beforeCall(predecessor);\n        for (uint256 i = 0; i < targets.length; ++i) {\n            _call(id, i, targets[i], values[i], datas[i]);\n        }\n        _afterCall(id);\n    }\n\n    /**\n     * @dev Checks before execution of an operation's calls.\n     */\n    function _beforeCall(bytes32 predecessor) private view {\n        require(predecessor == bytes32(0) || isOperationDone(predecessor), \"TimelockController: missing dependency\");\n    }\n\n    /**\n     * @dev Checks after execution of an operation's calls.\n     */\n    function _afterCall(bytes32 id) private {\n        require(isOperationReady(id), \"TimelockController: operation is not ready\");\n        _timestamps[id] = _DONE_TIMESTAMP;\n    }\n\n    /**\n     * @dev Execute an operation's call.\n     *\n     * Emits a {CallExecuted} event.\n     */\n    function _call(\n        bytes32 id,\n        uint256 index,\n        address target,\n        uint256 value,\n        bytes calldata data\n    ) private {\n        (bool success, ) = target.call{value: value}(data);\n        require(success, \"TimelockController: underlying transaction reverted\");\n\n        emit CallExecuted(id, index, target, value, data);\n    }\n\n    /**\n     * @dev Changes the minimum timelock duration for future operations.\n     *\n     * Emits a {MinDelayChange} event.\n     *\n     * Requirements:\n     *\n     * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n     * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n     */\n    function updateDelay(uint256 newDelay) external virtual {\n        require(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n        emit MinDelayChange(_minDelay, newDelay);\n        _minDelay = newDelay;\n    }\n}\n"
    },
    "contracts/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/governance/TimelockController.sol\";\n\ncontract Timelock is TimelockController {\n  constructor(\n    uint256 minDelay,\n    address admin,\n    address[] memory proposers,\n    address[] memory executors\n  ) TimelockController(minDelay, proposers, executors) {\n    // revoke admin role from msg.sender\n    revokeRole(TIMELOCK_ADMIN_ROLE, msg.sender);\n\n    // setup admin role\n    _setupRole(TIMELOCK_ADMIN_ROLE, admin);\n  }\n}\n"
    },
    "contracts/mocks/MockERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.11;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MockERC721 is ERC721 {\n  constructor() ERC721(\"MockERC721\", \"MockERC721\") {}\n\n  function mint(address to, uint256 id) public {\n    _mint(to, id);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}