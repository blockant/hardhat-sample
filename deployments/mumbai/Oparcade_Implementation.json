{
  "address": "0xf578664dD86F58b7A3630c5429f4357FE189A023",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrizeDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "PrizeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrizeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposited",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract IAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_winners",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "distributeNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_winners",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "distributePrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tournamentTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalUserDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrizeDistribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrizeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrizeDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5311d6ca5b41ea1eb0b06c7feb6aa67a80d78c50dd0b1b44c7fd20e766091782",
  "receipt": {
    "to": null,
    "from": "0xaD733B7055eCAebFb3B38626f0148c5d12158F03",
    "contractAddress": "0xf578664dD86F58b7A3630c5429f4357FE189A023",
    "transactionIndex": 1,
    "gasUsed": "4102813",
    "logsBloom": "0x
    "blockHash": "0xb9359227538c67dbd38300962b3d31c8f76b679a568c94c780abbca042fe0693",
    "transactionHash": "0x5311d6ca5b41ea1eb0b06c7feb6aa67a80d78c50dd0b1b44c7fd20e766091782",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 28476750,
        "transactionHash": "0x5311d6ca5b41ea1eb0b06c7feb6aa67a80d78c50dd0b1b44c7fd20e766091782",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000ad733b7055ecaebfb3b38626f0148c5d12158f03",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002470b77a041c2150000000000000000000000000000000000000000000000000bd2143d221c2c940000000000000000000000000000000000000000000016146690487370f033cf000000000000000000000000000000000000000000000000098b08c581da6a7f00000000000000000000000000000000000000000000161468d753eb1131f5e4",
        "logIndex": 2,
        "blockHash": "0xb9359227538c67dbd38300962b3d31c8f76b679a568c94c780abbca042fe0693"
      }
    ],
    "blockNumber": 28476750,
    "cumulativeGasUsed": "4131619",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "31b6f9dfa0f1d52218af034e75467bb9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"PrizeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributePrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tournamentTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUserDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrizeDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrizeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrizeDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lee\",\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256,address)\":{\"details\":\"Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\",\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Token address to deposit\"}},\"depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"details\":\"NFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_from\":\"NFT owner address\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_tokenIds\":\"Token Id list\"}},\"depositPrize(address,uint256,uint256,address,uint256)\":{\"details\":\"Only tokens which are allowed as a distributable token can be depositedPrize is transferred from _depositor address to this contract\",\"params\":{\"_amount\":\"Prize amount to deposit\",\"_depositor\":\"Depositor address\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Prize token address\"}},\"distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])\":{\"details\":\"Only maintainerNFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_tokenIds\":\"Token Id list\",\"_winners\":\"Winners list\"}},\"distributePrize(uint256,uint256,address[],address,uint256[])\":{\"details\":\"Only maintainerThe maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\",\"params\":{\"_amounts\":\"Prize list\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Prize token address\",\"_winners\":\"Winners list\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only owner\"},\"withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"details\":\"Only ownerNFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_to\":\"NFT receiver address\",\"_tokenIds\":\"Token Id list\"}},\"withdrawPrize(address,uint256,uint256,address,uint256)\":{\"details\":\"Only owner\",\"params\":{\"_amount\":\"Prize amount to withdraw\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_to\":\"Beneficiary address\",\"_token\":\"Prize token address\"}}},\"stateVariables\":{\"addressRegistry\":{\"details\":\"AddressRegistry\"},\"tournamentNftPrizes\":{\"details\":\"Game ID -> Tournament ID -> NFT Address -> Token ID -> Tournament NFT prizes\"},\"tournamentTokens\":{\"details\":\"Game ID -> Tournament ID -> Token Address -> Tournament tokens\"}},\"title\":\"Oparcade\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256,address)\":{\"notice\":\"Deposit ERC20 tokens from user\"},\"depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"notice\":\"Deposit NFT prize for the specific game/tournament\"},\"depositPrize(address,uint256,uint256,address,uint256)\":{\"notice\":\"Deposit the prize tokens for the specific game/tournament\"},\"distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])\":{\"notice\":\"Distribute winners' NFT prizes\"},\"distributePrize(uint256,uint256,address[],address,uint256[])\":{\"notice\":\"Distribute winners their prizes\"},\"pause()\":{\"notice\":\"Pause Oparcade\"},\"unpause()\":{\"notice\":\"Resume Oparcade\"},\"withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"notice\":\"Withdraw NFT prize for the specific game/tournament\"},\"withdrawPrize(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraw the prize tokens from the specific game/tournament\"}},\"notice\":\"This contract manages token deposit/distribution from/to the users playing the game/tournament\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oparcade.sol\":\"Oparcade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xdf3a49167ee6c6ba60205aa5eefe29d3ff340b73d7326733eb53f440371b717e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x06971bd1720c85e4771b94c83eb1e058af6070f6f6306ebc874a11501b238b8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n        __ERC1155Holder_init_unchained();\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal initializer {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xe2ef9cf50e39f6d3f02112d61faa73e66ee09f8240d7579cda40c88d7d1d5119\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC1155Receiver_init_unchained();\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xac30b71710258ed0f0d1fea3d245577c4d3187cd85e9dc584a9cfa258addfcd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf449ca0a763d4b1b4462cf8706857074492f324020a2b9d099181b5383055ad3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7d7fe7d5ed5068742927e37b400591153dbe8526cd942cfcf5dbb971ba5e8e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x3d03f5cb8b9f17b75c3b6eb4921b1fe7b87ed77cf0c8638496eee5183a5101e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xfbb3ca7272af58dc245a20e91a1f68481ee04706fa3fe46d184000efc21f4bad\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal initializer {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x430803579a1c09eb16a4275d43d8c9cd71b2931e40a9ab6c9feeff603ad70745\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37c56d5e4a1c4c65ad0dcc6af28442c5d35c6ca07d9ad6e966e07dceb97e6c8d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x828a6fb02c79a63dc5867427f355c0a9c65b4359fecadae73883154da550f6f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/Oparcade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/IGameRegistry.sol\\\";\\n\\n/**\\n * @title Oparcade\\n * @notice This contract manages token deposit/distribution from/to the users playing the game/tournament\\n * @author David Lee\\n */\\ncontract Oparcade is\\n  OwnableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable,\\n  ERC721HolderUpgradeable,\\n  ERC1155HolderUpgradeable\\n{\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event UserDeposited(address by, uint256 indexed gid, uint256 indexed tid, address indexed token, uint256 amount);\\n  event PrizeDistributed(\\n    address by,\\n    address[] winners,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed token,\\n    uint256[] amounts\\n  );\\n  event NFTPrizeDistributed(\\n    address by,\\n    address[] winners,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n  event PrizeDeposited(\\n    address by,\\n    address depositor,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed token,\\n    uint256 amount\\n  );\\n  event PrizeWithdrawn(\\n    address by,\\n    address to,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed token,\\n    uint256 amount\\n  );\\n  event NFTPrizeDeposited(\\n    address by,\\n    address from,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n  event NFTPrizeWithdrawn(\\n    address by,\\n    address to,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n\\n  bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n  bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n  struct TournamentToken {\\n    uint256 totalUserDeposit;\\n    uint256 totalPrizeDistribution;\\n    uint256 totalPrizeFee;\\n    uint256 totalPrizeDeposit;\\n  }\\n  /// @dev Game ID -> Tournament ID -> Token Address -> Tournament tokens\\n  mapping(uint256 => mapping(uint256 => mapping(address => TournamentToken))) public tournamentTokens;\\n\\n  struct TournamentNftPrize {\\n    uint256 totalDistribution;\\n    uint256 totalDeposit;\\n  }\\n  /// @dev Game ID -> Tournament ID -> NFT Address -> Token ID -> Tournament NFT prizes\\n  mapping(uint256 => mapping(uint256 => mapping(address => mapping(uint256 => TournamentNftPrize)))) tournamentNftPrizes;\\n\\n  /// @dev AddressRegistry\\n  IAddressRegistry public addressRegistry;\\n\\n  modifier onlyMaintainer() {\\n    require(msg.sender == addressRegistry.maintainer(), \\\"Only maintainer\\\");\\n    _;\\n  }\\n\\n  modifier onlyTimelock() {\\n    require(msg.sender == addressRegistry.timelock(), \\\"Only timelock\\\");\\n    _;\\n  }\\n\\n  function initialize(address _addressRegistry) public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n    __ERC721Holder_init();\\n    __ERC1155Holder_init();\\n\\n    require(_addressRegistry != address(0), \\\"Invalid AddressRegistry\\\");\\n\\n    // initialize AddressRegistery\\n    addressRegistry = IAddressRegistry(_addressRegistry);\\n  }\\n\\n  /**\\n   * @notice Deposit ERC20 tokens from user\\n   * @dev Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to deposit\\n   */\\n  function deposit(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token\\n  ) external whenNotPaused {\\n    // get token amount to deposit\\n    uint256 depositTokenAmount = IGameRegistry(addressRegistry.gameRegistry()).getDepositTokenAmount(\\n      _gid,\\n      _tid,\\n      _token\\n    );\\n\\n    // check if the token address is valid\\n    require(depositTokenAmount > 0, \\\"Invalid deposit token\\\");\\n\\n    // transfer the payment\\n    IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), depositTokenAmount);\\n    tournamentTokens[_gid][_tid][_token].totalUserDeposit += depositTokenAmount;\\n\\n    emit UserDeposited(msg.sender, _gid, _tid, _token, depositTokenAmount);\\n  }\\n\\n  /**\\n   * @notice Distribute winners their prizes\\n   * @dev Only maintainer\\n   * @dev The maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _token Prize token address\\n   * @param _amounts Prize list\\n   */\\n  function distributePrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _token,\\n    uint256[] calldata _amounts\\n  ) external whenNotPaused onlyMaintainer {\\n    require(_winners.length == _amounts.length, \\\"Mismatched winners and amounts\\\");\\n\\n    // get gameRegistry\\n    IGameRegistry gameRegistry = IGameRegistry(addressRegistry.gameRegistry());\\n\\n    // check if token is allowed to distribute\\n    require(gameRegistry.isDistributable(_gid, _token), \\\"Disallowed distribution token\\\");\\n\\n    _transferPayment(_gid, _tid, _winners, _token, _amounts);\\n\\n    // check if the prize amount is not exceeded\\n    require(\\n      tournamentTokens[_gid][_tid][_token].totalPrizeDistribution +\\n        tournamentTokens[_gid][_tid][_token].totalPrizeFee <=\\n        tournamentTokens[_gid][_tid][_token].totalPrizeDeposit + tournamentTokens[_gid][_tid][_token].totalUserDeposit,\\n      \\\"Prize amount exceeded\\\"\\n    );\\n\\n    emit PrizeDistributed(msg.sender, _winners, _gid, _tid, _token, _amounts);\\n  }\\n\\n  /**\\n   * @notice Transfer the winners' ERC20 token prizes and relevant fees\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _token Prize token address\\n   * @param _amounts Prize list\\n   */\\n  function _transferPayment(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _token,\\n    uint256[] calldata _amounts\\n  ) internal {\\n    // get gameRegistry\\n    IGameRegistry gameRegistry = IGameRegistry(addressRegistry.gameRegistry());\\n\\n    // transfer the winners their prizes\\n    uint256 totalPlatformFeeAmount;\\n    uint256 totalGameCreatorFeeAmount;\\n    uint256 totalTournamentCreatorFeeAmount;\\n    for (uint256 i; i < _winners.length; i++) {\\n      require(_winners[i] != address(0), \\\"Winner address should be defined\\\");\\n      require(_amounts[i] != 0, \\\"Winner amount should be greater than zero\\\");\\n\\n      // get userAmount\\n      uint256 userAmount = _amounts[i];\\n\\n      {\\n        // calculate the platform fee\\n        uint256 platformFeeAmount = (_amounts[i] * gameRegistry.platformFee()) / 100_0;\\n        totalPlatformFeeAmount += platformFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= platformFeeAmount;\\n      }\\n\\n      {\\n        // calculate gameCreatorFee\\n        uint256 gameCreatorFee = gameRegistry.getAppliedGameCreatorFee(_gid, _tid);\\n        uint256 gameCreatorFeeAmount = (_amounts[i] * gameCreatorFee) / 100_0;\\n        totalGameCreatorFeeAmount += gameCreatorFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= gameCreatorFeeAmount;\\n      }\\n\\n      {\\n        // calculate tournamentCreatorFee\\n        uint256 tournamentCreatorFee = gameRegistry.getTournamentCreatorFee(_gid, _tid);\\n        uint256 tournamentCreatorFeeAmount = (_amounts[i] * tournamentCreatorFee) / 100_0;\\n        totalTournamentCreatorFeeAmount += tournamentCreatorFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= tournamentCreatorFeeAmount;\\n      }\\n\\n      // transfer the prize\\n      tournamentTokens[_gid][_tid][_token].totalPrizeDistribution += userAmount;\\n      IERC20Upgradeable(_token).safeTransfer(_winners[i], userAmount);\\n    }\\n\\n    // transfer the fees\\n    tournamentTokens[_gid][_tid][_token].totalPrizeFee +=\\n      totalPlatformFeeAmount +\\n      totalGameCreatorFeeAmount +\\n      totalTournamentCreatorFeeAmount;\\n    IERC20Upgradeable(_token).safeTransfer(gameRegistry.feeRecipient(), totalPlatformFeeAmount);\\n    IERC20Upgradeable(_token).safeTransfer(gameRegistry.getGameCreatorAddress(_gid), totalGameCreatorFeeAmount);\\n    IERC20Upgradeable(_token).safeTransfer(\\n      gameRegistry.getTournamentCreator(_gid, _tid),\\n      totalTournamentCreatorFeeAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Distribute winners' NFT prizes\\n   * @dev Only maintainer\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function distributeNFTPrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external whenNotPaused nonReentrant onlyMaintainer {\\n    // check if token is allowed to distribute\\n    require(\\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _nftAddress),\\n      \\\"Disallowed distribution token\\\"\\n    );\\n\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(\\n      _winners.length == _tokenIds.length && _tokenIds.length == _amounts.length,\\n      \\\"Mismatched NFT distribution data\\\"\\n    );\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs to the winners\\n      for (uint256 i; i < _winners.length; i++) {\\n        require(\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit == 1 &&\\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution == 0,\\n          \\\"NFT prize distribution amount exceeded\\\"\\n        );\\n\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution = 1;\\n        totalAmounts += _amounts[i];\\n        try IERC721Upgradeable(_nftAddress).safeTransferFrom(address(this), _winners[i], _tokenIds[i]) {} catch {\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution = 0;\\n          totalAmounts -= _amounts[i];\\n        }\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _winners.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs to the winners\\n      for (uint256 i; i < _winners.length; i++) {\\n        require(\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution >=\\n            _amounts[i],\\n          \\\"NFT prize distribution amount exceeded\\\"\\n        );\\n\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution += _amounts[i];\\n        try\\n          IERC1155Upgradeable(_nftAddress).safeTransferFrom(\\n            address(this),\\n            _winners[i],\\n            _tokenIds[i],\\n            _amounts[i],\\n            bytes(\\\"\\\")\\n          )\\n        {} catch {\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution -= _amounts[i];\\n        }\\n      }\\n    }\\n\\n    emit NFTPrizeDistributed(msg.sender, _winners, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Deposit the prize tokens for the specific game/tournament\\n   * @dev Only tokens which are allowed as a distributable token can be deposited\\n   * @dev Prize is transferred from _depositor address to this contract\\n   * @param _depositor Depositor address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to deposit\\n   */\\n  function depositPrize(\\n    address _depositor,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external {\\n    require(msg.sender == owner() || msg.sender == addressRegistry.gameRegistry(), \\\"Only owner or GameRegistry\\\");\\n    require(_token != address(0), \\\"Unexpected token address\\\");\\n\\n    // check if tokens are allowed to claim as a prize\\n    require(\\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _token),\\n      \\\"Disallowed distribution token\\\"\\n    );\\n\\n    // deposit prize tokens\\n    bool supportsERC721Interface;\\n    // Try-catch approach ensures that a non-implementer of EIP-165 standard still can still be deposited\\n    try IERC165Upgradeable(_token).supportsInterface(INTERFACE_ID_ERC721) {\\n      supportsERC721Interface = IERC165Upgradeable(_token).supportsInterface(INTERFACE_ID_ERC721);\\n    } catch {\\n      supportsERC721Interface = false;\\n    }\\n    require(!supportsERC721Interface, \\\"ERC721 token not allowed\\\");\\n\\n    IERC20Upgradeable(_token).safeTransferFrom(_depositor, address(this), _amount);\\n    tournamentTokens[_gid][_tid][_token].totalPrizeDeposit += _amount;\\n\\n    emit PrizeDeposited(msg.sender, _depositor, _gid, _tid, _token, _amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw the prize tokens from the specific game/tournament\\n   * @dev Only owner\\n   * @param _to Beneficiary address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to withdraw\\n   */\\n  function withdrawPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external onlyTimelock {\\n    // check if the prize is sufficient to withdraw\\n    require(tournamentTokens[_gid][_tid][_token].totalPrizeDeposit >= _amount, \\\"Insufficient prize\\\");\\n\\n    // withdraw the prize\\n    unchecked {\\n      tournamentTokens[_gid][_tid][_token].totalPrizeDeposit -= _amount;\\n    }\\n    IERC20Upgradeable(_token).safeTransfer(_to, _amount);\\n\\n    emit PrizeWithdrawn(msg.sender, _to, _gid, _tid, _token, _amount);\\n  }\\n\\n  /**\\n   * @notice Deposit NFT prize for the specific game/tournament\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _from NFT owner address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function depositNFTPrize(\\n    address _from,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external {\\n    require(msg.sender == owner() || msg.sender == addressRegistry.gameRegistry(), \\\"Only owner or GameRegistry\\\");\\n\\n    // check if NFT is allowed to distribute\\n    require(\\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _nftAddress),\\n      \\\"Disallowed distribution token\\\"\\n    );\\n\\n    require(_nftAddress != address(0), \\\"Unexpected NFT address\\\");\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(_tokenIds.length == _amounts.length, \\\"Mismatched deposit data\\\");\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // transfer NFTs to the contract and update totalNFTPrizeDeposit\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(_from, address(this), _tokenIds[i]);\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit = 1;\\n        totalAmounts += _amounts[i];\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _tokenIds.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // transfer NFTs to the contract and update totalNFTPrizeDeposit\\n      IERC1155Upgradeable(_nftAddress).safeBatchTransferFrom(_from, address(this), _tokenIds, _amounts, bytes(\\\"\\\"));\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit += _amounts[i];\\n      }\\n    }\\n\\n    emit NFTPrizeDeposited(msg.sender, _from, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Withdraw NFT prize for the specific game/tournament\\n   * @dev Only owner\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _to NFT receiver address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function withdrawNFTPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external nonReentrant onlyOwner {\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(_tokenIds.length == _amounts.length, \\\"Mismatched deposit data\\\");\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs from the contract\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        require(\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution ==\\n            1,\\n          \\\"Insufficient NFT prize\\\"\\n        );\\n\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit = 0;\\n        totalAmounts += _amounts[i];\\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(address(this), _to, _tokenIds[i]);\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _tokenIds.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs from the contract\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        require(\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution >=\\n            _amounts[i],\\n          \\\"Insufficient NFT prize\\\"\\n        );\\n\\n        unchecked {\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -= _amounts[i];\\n        }\\n      }\\n      IERC1155Upgradeable(_nftAddress).safeBatchTransferFrom(address(this), _to, _tokenIds, _amounts, bytes(\\\"\\\"));\\n    }\\n\\n    emit NFTPrizeWithdrawn(msg.sender, _to, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Pause Oparcade\\n   * @dev Only owner\\n   */\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Resume Oparcade\\n   * @dev Only owner\\n   */\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0x5b14f811e0f7bcebc867c86746fefd5707f91e3cbee71501721ee5b2b7f2621d\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title AddressRegistry Contract Interface\\n * @notice Define the interface used to get addresses in Oparcade\\n * @author David Lee\\n */\\ninterface IAddressRegistry {\\n  /**\\n   * @notice Provide the Oparcade contract address\\n   * @dev Can be zero in case of the Oparcade contract is not registered\\n   * @return address Oparcade contract address\\n   */\\n  function oparcade() external view returns (address);\\n\\n  /**\\n   * @notice Provide the GameRegistry contract address\\n   * @dev Can be zero in case of the GameRegistry contract is not registered\\n   * @return address GameRegistry contract address\\n   */\\n  function gameRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Provide the maintainer address\\n   * @dev Can be zero in case of the maintainer address is not registered\\n   * @return address Maintainer contract address\\n   */\\n  function maintainer() external view returns (address);\\n\\n  /**\\n   * @notice Provide the timelock contract address\\n   * @dev Can be zero in case of the timelock address is not registered\\n   * @return address Timelock contract address\\n   */\\n  function timelock() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f2cbab5d28ad41e776c8ec62d06b756bad0d20f587c3c028d119b6068017908\",\"license\":\"MIT\"},\"contracts/interfaces/IGameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title GameRegistry Contract Interface\\n * @notice Define the interface necessary for the GameRegistry\\n * @author David Lee\\n */\\ninterface IGameRegistry {\\n  struct Token {\\n    address tokenAddress;\\n    uint256 tokenAmount;\\n  }\\n\\n  struct Tournament {\\n    string name;\\n    address creatorAddress;\\n    uint256 creatorFee;\\n    uint256 appliedGameCreatorFee;\\n    /// @dev Token address -> amount\\n    mapping(address => uint256) depositTokenAmount;\\n  }\\n\\n  struct Game {\\n    string name;\\n    address creatorAddress;\\n    uint256 baseCreatorFee;\\n    bool isDeprecated;\\n    address[] distributableTokenList; // return all array\\n    address[] depositTokenList;\\n    mapping(uint256 => Tournament) tournaments;\\n    uint256 tournamentsCount;\\n    /// @dev Token address -> Bool\\n    mapping(address => bool) distributable;\\n  }\\n\\n  /**\\n   * @return (address) Platform fee recipient\\n   */\\n  function feeRecipient() external returns (address);\\n\\n  /**\\n   * @return (uint256) Platform fee\\n   */\\n  function platformFee() external returns (uint256);\\n\\n  /**\\n   * @return (address) Tournament creation fee token address\\n   */\\n  function tournamentCreationFeeToken() external returns (address);\\n\\n  /**\\n   * @return (uint256) Tournament creation fee token amount\\n   */\\n  function tournamentCreationFeeAmount() external returns (uint256);\\n\\n  /**\\n   * @notice Returns a boolean indicating if a specific game is deprecated\\n   * @param _gid Game ID\\n   * @return (bool) Is deprecated\\n   */\\n  function isGameDeprecated(uint256 _gid) external view returns (bool);\\n\\n  /**\\n   * @notice Returns the game name\\n   * @param _gid Game ID\\n   * @return (string) Game name\\n   */\\n  function getGameName(uint256 _gid) external view returns (string memory);\\n\\n  /**\\n   * @notice Returns the game creator address\\n   * @param _gid Game ID\\n   * @return (string) Game creator address\\n   */\\n  function getGameCreatorAddress(uint256 _gid) external view returns (address);\\n\\n  /**\\n   * @notice Returns the game creator fee\\n   * @param _gid Game ID\\n   * @return (uint256) Game creator fee\\n   */\\n  function getGameBaseCreatorFee(uint256 _gid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns true if the token of a specific game is distributable, false otherwise\\n   * @param _gid Game ID\\n   * @param _tokenAddress token address\\n   * @return (uint256) Is token distributable\\n   */\\n  function isDistributable(uint256 _gid, address _tokenAddress) external view returns (bool);\\n\\n  /**\\n   * @notice Returns the deposit token list of the game\\n   * @param _gid Game ID\\n   * @param (address[]) Deposit token list of the game\\n   */\\n  function getDepositTokenList(uint256 _gid) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the distributable token list of the game\\n   * @param _gid Game ID\\n   * @param (address[]) Distributable token list of the game\\n   */\\n  function getDistributableTokenList(uint256 _gid) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the number of games created\\n   * @return (uint256) Amount of games created\\n   */\\n  function gameCount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the number of the tournaments of the specific game\\n   * @param _gid Game ID\\n   * @return (uint256) Number of the tournament\\n   */\\n  function getTournamentCount(uint256 _gid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the tournament name of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (string) Tournament name\\n   */\\n  function getTournamentName(uint256 _gid, uint256 _tid) external view returns (string memory);\\n\\n  /**\\n   * @notice Returns the tournament creator fee of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (uint256) Tournament creator fee\\n   */\\n  function getTournamentCreatorFee(uint256 _gid, uint256 _tid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the applied game creator fee of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (string) Game applied game creator fee of a tournament\\n   */\\n  function getAppliedGameCreatorFee(uint256 _gid, uint256 _tid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the deposit token amount of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _tokenAddress token address\\n   * @return (uint256) Tournament deposit token amount\\n   */\\n  function getDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _tokenAddress\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the tournament creator address of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (address) Tournament creator address\\n   */\\n  function getTournamentCreator(uint256 _gid, uint256 _tid) external view returns (address);\\n\\n  /**\\n   * @notice Add the new game\\n   * @dev Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the game\\n   * @dev When creating the tournament of the game, the game creator fee can be proposed by the tournament creator\\n   * @dev but the proposed value can't be less than the base one\\n   * @dev If the proposed game creator fee is 0, the base game creator fee will be applied\\n   * @param _gameName Game name to add\\n   * @param _gameCreator Game creator address\\n   * @param _baseGameCreatorFee Base game creator fee\\n   */\\n  function addGame(\\n    string calldata _gameName,\\n    address _gameCreator,\\n    uint256 _baseGameCreatorFee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Remove the exising game\\n   * @dev Game is not removed from the games array, just set it deprecated\\n   * @param _gid Game ID\\n   */\\n  function removeGame(uint256 _gid) external;\\n\\n  /**\\n   * @notice Update the game creator\\n   * @param _gid Game ID\\n   * @param _gameCreator Game creator address\\n   */\\n  function updateGameCreator(uint256 _gid, address _gameCreator) external;\\n\\n  /**\\n   * @notice Update the base game creator fee\\n   * @dev Tournament creator fee is the royality that will be transferred to the tournament creator address\\n   * @dev Tournament creator can propose the game creator fee when creating the tournament\\n   * @dev but it can't be less than the base game creator fee\\n   * @param _gid Game ID\\n   * @param _baseGameCreatorFee Base game creator fee\\n   */\\n  function updateBaseGameCreatorFee(uint256 _gid, uint256 _baseGameCreatorFee) external;\\n\\n  /**\\n   * @notice Create the tournament and set tokens\\n   * @dev Only owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @param _depositToken Token to allow/disallow the deposit\\n   * @param _distributionTokenAddress Distribution token address to be set to active\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByDAOWithTokens(\\n    uint256 _gid,\\n    string memory _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee,\\n    Token calldata _depositToken,\\n    address _distributionTokenAddress\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev Only owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByDAO(\\n    uint256 _gid,\\n    string calldata _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev Anyone can create the tournament and initialize the prize pool with tokens and NFTs\\n   * @dev Tournament creator should set all params necessary for the tournament in 1 tx and\\n   * @dev the params set is immutable. It will be prevent the fraud tournament is created\\n   * @dev Tournament creator should pay fees to create the tournament\\n   * @dev and the fee token address and fee token amount are set by the owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev NFT type to initialize the prize pool should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @param _depositToken Deposit token (address and amount) for playing the tournament\\n   * @param _tokenToAddPrizePool Token (address and amount) to initialize the prize pool\\n   * @param _nftAddressToAddPrizePool NFT address to initialize the prize pool\\n   * @param _nftTypeToAddPrizePool NFT type to initialize the prize pool\\n   * @param _tokenIdsToAddPrizePool NFT token Id list to initialize the prize pool\\n   * @param _amountsToAddPrizePool NFT token amount list to initialize the prize pool\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByUser(\\n    uint256 _gid,\\n    string calldata _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee,\\n    Token calldata _depositToken,\\n    Token calldata _tokenToAddPrizePool,\\n    address _nftAddressToAddPrizePool,\\n    uint256 _nftTypeToAddPrizePool,\\n    uint256[] memory _tokenIdsToAddPrizePool,\\n    uint256[] memory _amountsToAddPrizePool\\n  ) external returns (uint256 tid);\\n\\n  /**\\n   * @notice Update deposit token amount\\n   * @dev Only owner\\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _amount Token amount\\n   */\\n  function updateDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Update distributable token address\\n   * @dev Only owner\\n   * @param _gid Game ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _isDistributable true: distributable false: not distributable\\n   */\\n  function updateDistributableTokenAddress(\\n    uint256 _gid,\\n    address _token,\\n    bool _isDistributable\\n  ) external;\\n\\n  /**\\n   * @notice Update the platform fee\\n   * @dev Only owner\\n   * @dev Allow zero recipient address only of fee is also zero\\n   * @param _feeRecipient Platform fee recipient address\\n   * @param _platformFee platform fee\\n   */\\n  function updatePlatformFee(address _feeRecipient, uint256 _platformFee) external;\\n\\n  /**\\n   * @notice Update the tournament creation fee\\n   * @dev Only owner\\n   * @dev Tournament creator should pay this fee when creating the tournament\\n   * @param _tournamentCreationFeeToken Fee token address\\n   * @param _tournamentCreationFeeAmount Fee token amount\\n   */\\n  function updateTournamentCreationFee(address _tournamentCreationFeeToken, uint256 _tournamentCreationFeeAmount)\\n    external;\\n}\\n\",\"keccak256\":\"0xd226e0825d9b427952abaf310d48d9c9a943ea30ec0491988167e6e4684ae7d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c80638da5cb5b116100cd578063c4d66de811610081578063f23a6e6111610066578063f23a6e6114610338578063f2fde38b14610357578063f3ad65f41461036a57600080fd5b8063c4d66de814610312578063e3b2facc1461032557600080fd5b80638f1a33ff116100b25780638f1a33ff14610279578063b3a833b8146102e0578063bc197c81146102f357600080fd5b80638da5cb5b146102415780638dbdbe6d1461026657600080fd5b80635c975abb116101245780638456cb59116101095780638456cb59146102135780638639c9a71461021b5780638bd67fe81461022e57600080fd5b80635c975abb14610200578063715018a61461020b57600080fd5b80631de6ba17116101555780631de6ba17146101d05780633f4ba83a146101e55780634ceba21a146101ed57600080fd5b806301ffc9a714610171578063150b7a0214610199575b600080fd5b61018461017f366004613f4b565b61037e565b60405190151581526020015b60405180910390f35b6101b76101a7366004614041565b630a85bd0160e11b949350505050565b6040516001600160e01b03199091168152602001610190565b6101e36101de3660046140ad565b6103b5565b005b6101e361081d565b6101e36101fb36600461414b565b610881565b60975460ff16610184565b6101e3610c3f565b6101e3610ca3565b6101e36102293660046141e3565b610d05565b6101e361023c3660046140ad565b6118f0565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610190565b6101e36102743660046142b1565b611ae0565b6102c06102873660046142b1565b61019160209081526000938452604080852082529284528284209052825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610190565b6101e36102ee3660046142ea565b611d04565b6101b7610301366004614413565b63bc197c8160e01b95945050505050565b6101e36103203660046144c1565b612481565b6101e36103333660046142ea565b6125ca565b6101b76103463660046144de565b63f23a6e6160e01b95945050505050565b6101e36103653660046144c1565b612daa565b6101935461024e906001600160a01b031681565b60006001600160e01b03198216630271189760e51b14806103af57506301ffc9a760e01b6001600160e01b03198316145b92915050565b6033546001600160a01b0316331480610456575061019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561041d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104419190614547565b6001600160a01b0316336001600160a01b0316145b6104a75760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d65526567697374727900000000000060448201526064015b60405180910390fd5b6001600160a01b0382166104fd5760405162461bcd60e51b815260206004820152601860248201527f556e657870656374656420746f6b656e20616464726573730000000000000000604482015260640161049e565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610551573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105759190614547565b60405163aba869c560e01b8152600481018690526001600160a01b038481166024830152919091169063aba869c590604401602060405180830381865afa1580156105c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e89190614564565b6106345760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e000000604482015260640161049e565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038416906301ffc9a790602401602060405180830381865afa92505050801561069e575060408051601f3d908101601f1916820190925261069b91810190614564565b60015b6106aa5750600061071d565b506040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a790602401602060405180830381865afa1580156106f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071a9190614564565b90505b801561076b5760405162461bcd60e51b815260206004820152601860248201527f45524337323120746f6b656e206e6f7420616c6c6f7765640000000000000000604482015260640161049e565b6107806001600160a01b038416873085612e8c565b60008581526101916020908152604080832087845282528083206001600160a01b0387168452909152812060030180548492906107be90849061459c565b9091555050604080513381526001600160a01b03888116602083015291810184905290841690859087907fa555954f2adaf5a353a1db2b9a28e229f872593323659c9f5ab9cc426d0c58a29060600160405180910390a4505050505050565b6033546001600160a01b031633146108775760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161049e565b61087f612f12565b565b60975460ff16156108c75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161049e565b61019360009054906101000a90046001600160a01b03166001600160a01b0316639850d32b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561091b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093f9190614547565b6001600160a01b0316336001600160a01b0316146109915760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b604482015260640161049e565b8381146109e05760405162461bcd60e51b815260206004820152601e60248201527f4d69736d6174636865642077696e6e65727320616e6420616d6f756e74730000604482015260640161049e565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015610a2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a4f9190614547565b60405163aba869c560e01b8152600481018a90526001600160a01b0386811660248301529192509082169063aba869c590604401602060405180830381865afa158015610aa0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ac49190614564565b610b105760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e000000604482015260640161049e565b610b1f88888888888888612fae565b6000888152610191602090815260408083208a845282528083206001600160a01b038816845290915290208054600390910154610b5c919061459c565b6000898152610191602090815260408083208b845282528083206001600160a01b038916845290915290206002810154600190910154610b9c919061459c565b1115610bea5760405162461bcd60e51b815260206004820152601560248201527f5072697a6520616d6f756e742065786365656465640000000000000000000000604482015260640161049e565b836001600160a01b031687897f6b4488e823ebb77fdc3a58bb5cbc1af38a0b2e39ff4dc84c080c08540dcd1ebc338a8a8989604051610c2d95949392919061464c565b60405180910390a45050505050505050565b6033546001600160a01b03163314610c995760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161049e565b61087f6000613633565b6033546001600160a01b03163314610cfd5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161049e565b61087f613692565b60975460ff1615610d4b5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161049e565b60026065541415610d9e5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161049e565b60026065556101935460408051639850d32b60e01b815290516001600160a01b0390921691639850d32b916004808201926020929091908290030181865afa158015610dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e129190614547565b6001600160a01b0316336001600160a01b031614610e645760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b604482015260640161049e565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc9190614547565b60405163aba869c560e01b8152600481018c90526001600160a01b038881166024830152919091169063aba869c590604401602060405180830381865afa158015610f2b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4f9190614564565b610f9b5760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e000000604482015260640161049e565b846102d11480610fac575084610483145b610fee5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b604482015260640161049e565b8683148015610ffc57508281145b6110485760405162461bcd60e51b815260206004820181905260248201527f4d69736d617463686564204e465420646973747269627574696f6e2064617461604482015260640161049e565b6000856102d11415611440576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa15801561109f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c39190614564565b6111085760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b604482015260640161049e565b60005b888110156113f45760008c8152610192602090815260408083208e845282528083206001600160a01b038c1684529091528120908787848181106111515761115161468e565b9050602002013581526020019081526020016000206001015460011480156111cf575060008c8152610192602090815260408083208e845282528083206001600160a01b038c1684529091528120908787848181106111b2576111b261468e565b905060200201358152602001908152602001600020600001546000145b61122a5760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b606482015260840161049e565b60008c8152610192602090815260408083208e845282528083206001600160a01b038c168452909152812060019188888581811061126a5761126a61468e565b905060200201358152602001908152602001600020600001819055508383828181106112985761129861468e565b90506020020135826112aa919061459c565b9150876001600160a01b03166342842e0e308c8c858181106112ce576112ce61468e565b90506020020160208101906112e391906144c1565b8989868181106112f5576112f561468e565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561134c57600080fd5b505af192505050801561135d575060015b6113e25760008c8152610192602090815260408083208e845282528083206001600160a01b038c16845290915281208188888581811061139f5761139f61468e565b905060200201358152602001908152602001600020600001819055508383828181106113cd576113cd61468e565b90506020020135826113df91906146a4565b91505b806113ec816146bb565b91505061110b565b5080881461143b5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b604482015260640161049e565b61188d565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa15801561148b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114af9190614564565b6114f45760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b604482015260640161049e565b60005b8881101561188b578383828181106115115761151161468e565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008888858181106115745761157461468e565b9050602002013581526020019081526020016000206000015461019260008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008989868181106115e9576115e961468e565b9050602002013581526020019081526020016000206001015461160c91906146a4565b10156116695760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b606482015260840161049e565b83838281811061167b5761167b61468e565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008888858181106116de576116de61468e565b9050602002013581526020019081526020016000206000016000828254611705919061459c565b90915550506001600160a01b03881663f242432a308c8c8581811061172c5761172c61468e565b905060200201602081019061174191906144c1565b8989868181106117535761175361468e565b9050602002013588888781811061176c5761176c61468e565b90506020020135604051806020016040528060008152506040518663ffffffff1660e01b81526004016117a395949392919061472e565b600060405180830381600087803b1580156117bd57600080fd5b505af19250505080156117ce575060015b611879578383828181106117e4576117e461468e565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008888858181106118475761184761468e565b905060200201358152602001908152602001600020600001600082825461186e91906146a4565b909155506118799050565b80611883816146bb565b9150506114f7565b505b866001600160a01b03168a8c7fa825c8731f1dfe5c99472b7e94c839c9e6489ed55d0277366e867d8d88a306cf338d8d8c8c8c8c8c6040516118d6989796959493929190614766565b60405180910390a450506001606555505050505050505050565b61019360009054906101000a90046001600160a01b03166001600160a01b031663d33219b46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611944573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119689190614547565b6001600160a01b0316336001600160a01b0316146119c85760405162461bcd60e51b815260206004820152600d60248201527f4f6e6c792074696d656c6f636b00000000000000000000000000000000000000604482015260640161049e565b60008481526101916020908152604080832086845282528083206001600160a01b0386168452909152902060030154811115611a465760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e74207072697a650000000000000000000000000000604482015260640161049e565b60008481526101916020908152604080832086845282528083206001600160a01b038616808552925290912060030180548390039055611a8790868361370d565b604080513381526001600160a01b03878116602083015291810183905290831690849086907fe64a3a357c20289b8fff53d7fabedc1fec8b86c76f070a66dd167c055e43e38d9060600160405180910390a45050505050565b60975460ff1615611b265760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161049e565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015611b71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b959190614547565b604051633586597160e01b815260048101869052602481018590526001600160a01b0384811660448301529190911690633586597190606401602060405180830381865afa158015611beb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c0f91906147c6565b905060008111611c615760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964206465706f73697420746f6b656e0000000000000000000000604482015260640161049e565b611c766001600160a01b038316333084612e8c565b60008481526101916020908152604080832086845282528083206001600160a01b038616845290915281208054839290611cb190849061459c565b909155505060408051338152602081018390526001600160a01b03841691859187917f3360a6f28beae2ecd8c3c807e274aaae13fd8264155337e6d0535a44468f0942910160405180910390a450505050565b6033546001600160a01b0316331480611da5575061019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d909190614547565b6001600160a01b0316336001600160a01b0316145b611df15760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d655265676973747279000000000000604482015260640161049e565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e699190614547565b60405163aba869c560e01b8152600481018a90526001600160a01b038881166024830152919091169063aba869c590604401602060405180830381865afa158015611eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611edc9190614564565b611f285760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e000000604482015260640161049e565b6001600160a01b038616611f775760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b604482015260640161049e565b846102d11480611f88575084610483145b611fca5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b604482015260640161049e565b8281146120195760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f7369742064617461000000000000000000604482015260640161049e565b6000856102d11415612257576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015612070573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120949190614564565b6120d95760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b604482015260640161049e565b60005b8481101561220b57876001600160a01b03166342842e0e8c308989868181106121075761210761468e565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561215e57600080fd5b505af1158015612172573d6000803e3d6000fd5b50505060008b8152610192602090815260408083208d845282528083206001600160a01b038d168452909152812060019250908888858181106121b7576121b761468e565b905060200201358152602001908152602001600020600101819055508383828181106121e5576121e561468e565b90506020020135826121f7919061459c565b915080612203816146bb565b9150506120dc565b508084146122525760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b604482015260640161049e565b612426565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156122a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c69190614564565b61230b5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b604482015260640161049e565b60408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d69161234f918e9130918b918b918b918b91906004016147df565b600060405180830381600087803b15801561236957600080fd5b505af115801561237d573d6000803e3d6000fd5b5050505060005b848110156124245783838281811061239e5761239e61468e565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f1684528252822092029390930135929091508888858181106123e5576123e561468e565b905060200201358152602001908152602001600020600101600082825461240c919061459c565b9091555081905061241c816146bb565b915050612384565b505b866001600160a01b0316888a7f8aa5f867116bd0007022fe5e2205d78c5a5922c47331762e9e69ce2c9a8f6a95338e8b8b8b8b8b60405161246d9796959493929190614841565b60405180910390a450505050505050505050565b600054610100900460ff168061249a575060005460ff16155b6124eb5760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff1615801561250d576000805461ffff19166101011790555b612515613742565b61251d6137f2565b612525613886565b61252d613922565b6125356139b6565b6001600160a01b03821661258b5760405162461bcd60e51b815260206004820152601760248201527f496e76616c696420416464726573735265676973747279000000000000000000604482015260640161049e565b610193805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03841617905580156125c6576000805461ff00191690555b5050565b6002606554141561261d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161049e565b60026065556033546001600160a01b0316331461267c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161049e565b846102d1148061268d575084610483145b6126cf5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b604482015260640161049e565b82811461271e5760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f7369742064617461000000000000000000604482015260640161049e565b6000856102d11415612a61576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015612775573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127999190614564565b6127de5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b604482015260640161049e565b60005b84811015612a155760008a8152610192602090815260408083208c845282528083206001600160a01b038c1684529091528120908787848181106128275761282761468e565b602090810292909201358352508181019290925260409081016000908120548d825261019284528282208d835284528282206001600160a01b038d1683529093529081209088888581811061287e5761287e61468e565b905060200201358152602001908152602001600020600101546128a191906146a4565b6001146128f05760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a6500000000000000000000604482015260640161049e565b60008a8152610192602090815260408083208c845282528083206001600160a01b038c16845290915281208188888581811061292e5761292e61468e565b9050602002013581526020019081526020016000206001018190555083838281811061295c5761295c61468e565b905060200201358261296e919061459c565b9150876001600160a01b03166342842e0e308d8989868181106129935761299361468e565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156129ea57600080fd5b505af11580156129fe573d6000803e3d6000fd5b505050508080612a0d906146bb565b9150506127e1565b50808414612a5c5760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b604482015260640161049e565b612d4a565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015612aac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ad09190614564565b612b155760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b604482015260640161049e565b60005b84811015612cd257838382818110612b3257612b3261468e565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f168452825282209202939093013592909150888885818110612b7957612b7961468e565b602090810292909201358352508181019290925260409081016000908120548e825261019284528282208e835284528282206001600160a01b038e16835290935290812090898986818110612bd057612bd061468e565b90506020020135815260200190815260200160002060010154612bf391906146a4565b1015612c415760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a6500000000000000000000604482015260640161049e565b838382818110612c5357612c5361468e565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f168452825282209202939093013592909150888885818110612c9a57612c9a61468e565b905060200201358152602001908152602001600020600101600082825403925050819055508080612cca906146bb565b915050612b18565b5060408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612d179130918f918b918b918b918b91906004016147df565b600060405180830381600087803b158015612d3157600080fd5b505af1158015612d45573d6000803e3d6000fd5b505050505b866001600160a01b0316888a7f5a8dca5c67110aaf25dc3f613084907009569128e7e31216a0802dce0db9c784338e8b8b8b8b8b604051612d919796959493929190614841565b60405180910390a4505060016065555050505050505050565b6033546001600160a01b03163314612e045760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161049e565b6001600160a01b038116612e805760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161049e565b612e8981613633565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052612f0c9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613a52565b50505050565b60975460ff16612f645760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161049e565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015612ff9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301d9190614547565b90506000806000805b888110156134505760008a8a838181106130425761304261468e565b905060200201602081019061305791906144c1565b6001600160a01b031614156130ae5760405162461bcd60e51b815260206004820181905260248201527f57696e6e657220616464726573732073686f756c6420626520646566696e6564604482015260640161049e565b8686828181106130c0576130c061468e565b905060200201356000141561313d5760405162461bcd60e51b815260206004820152602960248201527f57696e6e657220616d6f756e742073686f756c6420626520677265617465722060448201527f7468616e207a65726f0000000000000000000000000000000000000000000000606482015260840161049e565b60008787838181106131515761315161468e565b90506020020135905060006103e8876001600160a01b03166326232a2e6040518163ffffffff1660e01b81526004016020604051808303816000875af115801561319f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131c391906147c6565b8a8a868181106131d5576131d561468e565b905060200201356131e69190614887565b6131f091906148a6565b90506131fc818761459c565b955061320881836146a4565b9150506000866001600160a01b031663a7ab05498f8f6040518363ffffffff1660e01b8152600401613244929190918252602082015260400190565b602060405180830381865afa158015613261573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061328591906147c6565b905060006103e8828b8b8781811061329f5761329f61468e565b905060200201356132b09190614887565b6132ba91906148a6565b90506132c6818761459c565b95506132d281846146a4565b925050506000866001600160a01b03166322871dcd8f8f6040518363ffffffff1660e01b815260040161330f929190918252602082015260400190565b602060405180830381865afa15801561332c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061335091906147c6565b905060006103e8828b8b8781811061336a5761336a61468e565b9050602002013561337b9190614887565b61338591906148a6565b9050613391818661459c565b945061339d81846146a4565b925050508061019160008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160008282546133fc919061459c565b9091555061343d90508b8b848181106134175761341761468e565b905060200201602081019061342c91906144c1565b6001600160a01b038b16908361370d565b5080613448816146bb565b915050613026565b508061345c838561459c565b613466919061459c565b60008c8152610191602090815260408083208e845282528083206001600160a01b038c168452909152812060020180549091906134a490849061459c565b92505081905550613523846001600160a01b031663469048406040518163ffffffff1660e01b81526004016020604051808303816000875af11580156134ee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135129190614547565b6001600160a01b038916908561370d565b6040516366f4688560e11b8152600481018c90526135a1906001600160a01b0386169063cde8d10a90602401602060405180830381865afa15801561356c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135909190614547565b6001600160a01b038916908461370d565b60405163f406c2d160e01b8152600481018c9052602481018b9052613626906001600160a01b0386169063f406c2d190604401602060405180830381865afa1580156135f1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136159190614547565b6001600160a01b038916908361370d565b5050505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60975460ff16156136d85760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b604482015260640161049e565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612f913390565b6040516001600160a01b03831660248201526044810182905261373d90849063a9059cbb60e01b90606401612ec0565b505050565b600054610100900460ff168061375b575060005460ff16155b6137ac5760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff161580156137ce576000805461ffff19166101011790555b6137d6613b37565b6137de613bd6565b8015612e89576000805461ff001916905550565b600054610100900460ff168061380b575060005460ff16155b61385c5760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff1615801561387e576000805461ffff19166101011790555b6137de613c6b565b600054610100900460ff168061389f575060005460ff16155b6138f05760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff16158015613912576000805461ffff19166101011790555b61391a613b37565b6137de613d10565b600054610100900460ff168061393b575060005460ff16155b61398c5760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff161580156139ae576000805461ffff19166101011790555b6137de613b37565b600054610100900460ff16806139cf575060005460ff16155b613a205760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff16158015613a42576000805461ffff19166101011790555b613a4a613b37565b6139ae613b37565b6000613aa7826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613dba9092919063ffffffff16565b80519091501561373d5780806020019051810190613ac59190614564565b61373d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161049e565b600054610100900460ff1680613b50575060005460ff16155b613ba15760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff161580156137de576000805461ffff19166101011790558015612e89576000805461ff001916905550565b600054610100900460ff1680613bef575060005460ff16155b613c405760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff16158015613c62576000805461ffff19166101011790555b6137de33613633565b600054610100900460ff1680613c84575060005460ff16155b613cd55760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff16158015613cf7576000805461ffff19166101011790555b60016065558015612e89576000805461ff001916905550565b600054610100900460ff1680613d29575060005460ff16155b613d7a5760405162461bcd60e51b815260206004820152602e60248201526000805160206148f883398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161049e565b600054610100900460ff16158015613d9c576000805461ffff19166101011790555b6097805460ff191690558015612e89576000805461ff001916905550565b6060613dc98484600085613dd3565b90505b9392505050565b606082471015613e4b5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161049e565b843b613e995760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161049e565b600080866001600160a01b03168587604051613eb591906148c8565b60006040518083038185875af1925050503d8060008114613ef2576040519150601f19603f3d011682016040523d82523d6000602084013e613ef7565b606091505b5091509150613f07828286613f12565b979650505050505050565b60608315613f21575081613dcc565b825115613f315782518084602001fd5b8160405162461bcd60e51b815260040161049e91906148e4565b600060208284031215613f5d57600080fd5b81356001600160e01b031981168114613dcc57600080fd5b6001600160a01b0381168114612e8957600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613fc957613fc9613f8a565b604052919050565b600082601f830112613fe257600080fd5b813567ffffffffffffffff811115613ffc57613ffc613f8a565b61400f601f8201601f1916602001613fa0565b81815284602083860101111561402457600080fd5b816020850160208301376000918101602001919091529392505050565b6000806000806080858703121561405757600080fd5b843561406281613f75565b9350602085013561407281613f75565b925060408501359150606085013567ffffffffffffffff81111561409557600080fd5b6140a187828801613fd1565b91505092959194509250565b600080600080600060a086880312156140c557600080fd5b85356140d081613f75565b9450602086013593506040860135925060608601356140ee81613f75565b949793965091946080013592915050565b60008083601f84011261411157600080fd5b50813567ffffffffffffffff81111561412957600080fd5b6020830191508360208260051b850101111561414457600080fd5b9250929050565b600080600080600080600060a0888a03121561416657600080fd5b8735965060208801359550604088013567ffffffffffffffff8082111561418c57600080fd5b6141988b838c016140ff565b909750955060608a013591506141ad82613f75565b909350608089013590808211156141c357600080fd5b506141d08a828b016140ff565b989b979a50959850939692959293505050565b60008060008060008060008060008060e08b8d03121561420257600080fd5b8a35995060208b0135985060408b013567ffffffffffffffff8082111561422857600080fd5b6142348e838f016140ff565b909a50985060608d0135915061424982613f75565b90965060808c0135955060a08c0135908082111561426657600080fd5b6142728e838f016140ff565b909650945060c08d013591508082111561428b57600080fd5b506142988d828e016140ff565b915080935050809150509295989b9194979a5092959850565b6000806000606084860312156142c657600080fd5b833592506020840135915060408401356142df81613f75565b809150509250925092565b600080600080600080600080600060e08a8c03121561430857600080fd5b893561431381613f75565b985060208a0135975060408a0135965060608a013561433181613f75565b955060808a0135945060a08a013567ffffffffffffffff8082111561435557600080fd5b6143618d838e016140ff565b909650945060c08c013591508082111561437a57600080fd5b506143878c828d016140ff565b915080935050809150509295985092959850929598565b600082601f8301126143af57600080fd5b8135602067ffffffffffffffff8211156143cb576143cb613f8a565b8160051b6143da828201613fa0565b92835284810182019282810190878511156143f457600080fd5b83870192505b84831015613f07578235825291830191908301906143fa565b600080600080600060a0868803121561442b57600080fd5b853561443681613f75565b9450602086013561444681613f75565b9350604086013567ffffffffffffffff8082111561446357600080fd5b61446f89838a0161439e565b9450606088013591508082111561448557600080fd5b61449189838a0161439e565b935060808801359150808211156144a757600080fd5b506144b488828901613fd1565b9150509295509295909350565b6000602082840312156144d357600080fd5b8135613dcc81613f75565b600080600080600060a086880312156144f657600080fd5b853561450181613f75565b9450602086013561451181613f75565b93506040860135925060608601359150608086013567ffffffffffffffff81111561453b57600080fd5b6144b488828901613fd1565b60006020828403121561455957600080fd5b8151613dcc81613f75565b60006020828403121561457657600080fd5b81518015158114613dcc57600080fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156145af576145af614586565b500190565b8183526000602080850194508260005b858110156145f25781356145d781613f75565b6001600160a01b0316875295820195908201906001016145c4565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83111561462f57600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b038616815260606020820152600061466f6060830186886145b4565b82810360408401526146828185876145fd565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000828210156146b6576146b6614586565b500390565b60006000198214156146cf576146cf614586565b5060010190565b60005b838110156146f15781810151838201526020016146d9565b83811115612f0c5750506000910152565b6000815180845261471a8160208601602086016146d6565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613f0760a0830184614702565b6001600160a01b038916815260a06020820152600061478960a08301898b6145b4565b87604084015282810360608401526147a28187896145fd565b905082810360808401526147b78185876145fd565b9b9a5050505050505050505050565b6000602082840312156147d857600080fd5b5051919050565b60006001600160a01b03808a16835280891660208401525060a0604083015261480c60a0830187896145fd565b828103606084015261481f8186886145fd565b905082810360808401526148338185614702565b9a9950505050505050505050565b60006001600160a01b03808a16835280891660208401525086604083015260a0606083015261487460a0830186886145fd565b82810360808401526148338185876145fd565b60008160001904831182151516156148a1576148a1614586565b500290565b6000826148c357634e487b7160e01b600052601260045260246000fd5b500490565b600082516148da8184602087016146d6565b9190910192915050565b602081526000613dcc602083018461470256fe496e697469616c697a61626c653a20636f6e747261637420697320616c726561a2646970667358221220a845842a01453fa90f88964184fa7e3e920c42c501a38c0277195afbd9d6fbb564736f6c634300080b0033",
  "devdoc": {
    "author": "David Lee",
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256,address)": {
        "details": "Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit",
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Token address to deposit"
        }
      },
      "depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "details": "NFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_from": "NFT owner address",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_tokenIds": "Token Id list"
        }
      },
      "depositPrize(address,uint256,uint256,address,uint256)": {
        "details": "Only tokens which are allowed as a distributable token can be depositedPrize is transferred from _depositor address to this contract",
        "params": {
          "_amount": "Prize amount to deposit",
          "_depositor": "Depositor address",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Prize token address"
        }
      },
      "distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])": {
        "details": "Only maintainerNFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_tokenIds": "Token Id list",
          "_winners": "Winners list"
        }
      },
      "distributePrize(uint256,uint256,address[],address,uint256[])": {
        "details": "Only maintainerThe maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited",
        "params": {
          "_amounts": "Prize list",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Prize token address",
          "_winners": "Winners list"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only owner"
      },
      "withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "details": "Only ownerNFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_to": "NFT receiver address",
          "_tokenIds": "Token Id list"
        }
      },
      "withdrawPrize(address,uint256,uint256,address,uint256)": {
        "details": "Only owner",
        "params": {
          "_amount": "Prize amount to withdraw",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_to": "Beneficiary address",
          "_token": "Prize token address"
        }
      }
    },
    "stateVariables": {
      "addressRegistry": {
        "details": "AddressRegistry"
      },
      "tournamentNftPrizes": {
        "details": "Game ID -> Tournament ID -> NFT Address -> Token ID -> Tournament NFT prizes"
      },
      "tournamentTokens": {
        "details": "Game ID -> Tournament ID -> Token Address -> Tournament tokens"
      }
    },
    "title": "Oparcade",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256,address)": {
        "notice": "Deposit ERC20 tokens from user"
      },
      "depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "notice": "Deposit NFT prize for the specific game/tournament"
      },
      "depositPrize(address,uint256,uint256,address,uint256)": {
        "notice": "Deposit the prize tokens for the specific game/tournament"
      },
      "distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])": {
        "notice": "Distribute winners' NFT prizes"
      },
      "distributePrize(uint256,uint256,address[],address,uint256[])": {
        "notice": "Distribute winners their prizes"
      },
      "pause()": {
        "notice": "Pause Oparcade"
      },
      "unpause()": {
        "notice": "Resume Oparcade"
      },
      "withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "notice": "Withdraw NFT prize for the specific game/tournament"
      },
      "withdrawPrize(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraw the prize tokens from the specific game/tournament"
      }
    },
    "notice": "This contract manages token deposit/distribution from/to the users playing the game/tournament",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1413,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 297,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1126,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1459,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 641,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 582,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 7980,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "tournamentTokens",
        "offset": 0,
        "slot": "401",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_struct(TournamentToken)7970_storage)))"
      },
      {
        "astId": 7997,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "tournamentNftPrizes",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)7985_storage))))"
      },
      {
        "astId": 8001,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IAddressRegistry)9529"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressRegistry)9529": {
        "encoding": "inplace",
        "label": "contract IAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)7985_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Oparcade.TournamentNftPrize))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TournamentNftPrize)7985_storage)"
      },
      "t_mapping(t_address,t_struct(TournamentToken)7970_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Oparcade.TournamentToken)",
        "numberOfBytes": "32",
        "value": "t_struct(TournamentToken)7970_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)7985_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => struct Oparcade.TournamentNftPrize)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)7985_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(TournamentToken)7970_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Oparcade.TournamentToken))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(TournamentToken)7970_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)7985_storage))))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => mapping(uint256 => struct Oparcade.TournamentNftPrize))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)7985_storage)))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_struct(TournamentToken)7970_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => struct Oparcade.TournamentToken)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TournamentToken)7970_storage))"
      },
      "t_mapping(t_uint256,t_struct(TournamentNftPrize)7985_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Oparcade.TournamentNftPrize)",
        "numberOfBytes": "32",
        "value": "t_struct(TournamentNftPrize)7985_storage"
      },
      "t_struct(TournamentNftPrize)7985_storage": {
        "encoding": "inplace",
        "label": "struct Oparcade.TournamentNftPrize",
        "members": [
          {
            "astId": 7982,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalDistribution",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7984,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TournamentToken)7970_storage": {
        "encoding": "inplace",
        "label": "struct Oparcade.TournamentToken",
        "members": [
          {
            "astId": 7963,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalUserDeposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7965,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalPrizeDistribution",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7967,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalPrizeFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7969,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalPrizeDeposit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}