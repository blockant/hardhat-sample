{
  "address": "0x9eC216AAc6b8729f4265483815F60Ab21B7fD540",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "nftAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nftType",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "NFTPrizeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrizeDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "winners",
          "type": "address[]"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "PrizeDistributed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "PrizeWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UserDeposited",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract IAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "depositNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depositor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_winners",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "distributeNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_winners",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "distributePrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressRegistry",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tournamentTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalUserDeposit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrizeDistribution",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrizeFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalPrizeDeposit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftType",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawNFTPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawPrize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1f14e3e1a3cc0bc16e5def795711b13547956df54f6017dad6e44747a7ea9214",
  "receipt": {
    "to": null,
    "from": "0xC1580afC68C82E110325b09313e059a8F5Cd68E9",
    "contractAddress": "0x9eC216AAc6b8729f4265483815F60Ab21B7fD540",
    "transactionIndex": 87,
    "gasUsed": "3850965",
    "logsBloom": "0x
    "blockHash": "0x7742b12f8e711ae0c1971e7e09fd625a1a6281d1df125c9bd07729e2297dc19d",
    "transactionHash": "0x1f14e3e1a3cc0bc16e5def795711b13547956df54f6017dad6e44747a7ea9214",
    "logs": [
      {
        "transactionIndex": 87,
        "blockNumber": 35419580,
        "transactionHash": "0x1f14e3e1a3cc0bc16e5def795711b13547956df54f6017dad6e44747a7ea9214",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c1580afc68c82e110325b09313e059a8f5cd68e9",
          "0x000000000000000000000000ef46d5fe753c988606e6f703260d816af53b03eb"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001b6eb4071d1c42300000000000000000000000000000000000000000000000033d94dc3eac65aa200000000000000000000000000000000000000000000398b97a48c9c16ab30540000000000000000000000000000000000000000000000003222628378f4967f00000000000000000000000000000000000000000000398b995b77dc887cf477",
        "logIndex": 321,
        "blockHash": "0x7742b12f8e711ae0c1971e7e09fd625a1a6281d1df125c9bd07729e2297dc19d"
      }
    ],
    "blockNumber": 35419580,
    "cumulativeGasUsed": "15372873",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1f056055441669d784e7e6671908d28c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nftType\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"NFTPrizeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"winners\",\"type\":\"address[]\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"PrizeDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PrizeWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UserDeposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"depositNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributeNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_winners\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"distributePrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tournamentTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUserDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrizeDistribution\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrizeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPrizeDeposit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"withdrawNFTPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawPrize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lee\",\"kind\":\"dev\",\"methods\":{\"deposit(uint256,uint256,address)\":{\"details\":\"Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\",\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Token address to deposit\"}},\"depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"details\":\"NFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_from\":\"NFT owner address\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_tokenIds\":\"Token Id list\"}},\"depositPrize(address,uint256,uint256,address,uint256)\":{\"details\":\"Only tokens which are allowed as a distributable token can be depositedPrize is transferred from _depositor address to this contract\",\"params\":{\"_amount\":\"Prize amount to deposit\",\"_depositor\":\"Depositor address\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Prize token address\"}},\"distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])\":{\"details\":\"Only maintainerNFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_tokenIds\":\"Token Id list\",\"_winners\":\"Winners list\"}},\"distributePrize(uint256,uint256,address[],address,uint256[])\":{\"details\":\"Only maintainerThe maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\",\"params\":{\"_amounts\":\"Prize list\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Prize token address\",\"_winners\":\"Winners list\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Only owner\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Only owner\"},\"withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"details\":\"Only ownerNFT type should be either 721 or 1155\",\"params\":{\"_amounts\":\"Token amount list\",\"_gid\":\"Game ID\",\"_nftAddress\":\"NFT address\",\"_nftType\":\"NFT type (721/1155)\",\"_tid\":\"Tournament ID\",\"_to\":\"NFT receiver address\",\"_tokenIds\":\"Token Id list\"}},\"withdrawPrize(address,uint256,uint256,address,uint256)\":{\"details\":\"Only owner\",\"params\":{\"_amount\":\"Prize amount to withdraw\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_to\":\"Beneficiary address\",\"_token\":\"Prize token address\"}}},\"stateVariables\":{\"addressRegistry\":{\"details\":\"AddressRegistry\"},\"tournamentNftPrizes\":{\"details\":\"Game ID -> Tournament ID -> NFT Address -> Token ID -> Tournament NFT prizes\"},\"tournamentTokens\":{\"details\":\"Game ID -> Tournament ID -> Token Address -> Tournament tokens\"}},\"title\":\"Oparcade\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit(uint256,uint256,address)\":{\"notice\":\"Deposit ERC20 tokens from user\"},\"depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"notice\":\"Deposit NFT prize for the specific game/tournament\"},\"depositPrize(address,uint256,uint256,address,uint256)\":{\"notice\":\"Deposit the prize tokens for the specific game/tournament\"},\"distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])\":{\"notice\":\"Distribute winners' NFT prizes\"},\"distributePrize(uint256,uint256,address[],address,uint256[])\":{\"notice\":\"Distribute winners their prizes\"},\"pause()\":{\"notice\":\"Pause Oparcade\"},\"unpause()\":{\"notice\":\"Resume Oparcade\"},\"withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])\":{\"notice\":\"Withdraw NFT prize for the specific game/tournament\"},\"withdrawPrize(address,uint256,uint256,address,uint256)\":{\"notice\":\"Withdraw the prize tokens from the specific game/tournament\"}},\"notice\":\"This contract manages token deposit/distribution from/to the users playing the game/tournament\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Oparcade.sol\":\"Oparcade\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x247c62047745915c0af6b955470a72d1696ebad4352d7d3011aef1a2463cd888\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x2b3005a0064cfc558bdf64b2bae94b565f4574a536aadd61c13838d4f2157790\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xffcb29612efb57efc8f0d4897deb5abaeac830022c59a3aa17446d698dbc856b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x091a49ef99a2be002680781a10cc9dd74c0f348301ede5482c4ea625f79a8ffe\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * Simple implementation of `ERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n *\\n * @dev _Available since v3.1._\\n */\\ncontract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\\n    function __ERC1155Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Holder_init_unchained() internal onlyInitializing {\\n    }\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa8a1f16aa62b4d8c9e380057d9c3ee5c992e4a10dccc5650b26e38d4c61287d4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/utils/ERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\nabstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\\n    function __ERC1155Receiver_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1155Receiver_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155ReceiverUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xa1b77d6d0f4591359c42b747a31375f20b0571b5e1fb62652d8184fb10f1d63a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xbb2ed8106d94aeae6858e2551a1e7174df73994b77b13ebd120ccaaef80155f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2c0b89cef83f353c6f9488c013d8a5968587ffdd6dfc26aad53774214b97e229\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xb7f90ab8af7dae0bd4acfa088f9e606ea039110face097ca7c8beef563f71e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Oparcade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/utils/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/utils/ERC1155HolderUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/IGameRegistry.sol\\\";\\n\\n/**\\n * @title Oparcade\\n * @notice This contract manages token deposit/distribution from/to the users playing the game/tournament\\n * @author David Lee\\n */\\ncontract Oparcade is\\n  OwnableUpgradeable,\\n  ReentrancyGuardUpgradeable,\\n  PausableUpgradeable,\\n  ERC721HolderUpgradeable,\\n  ERC1155HolderUpgradeable\\n{\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event UserDeposited(address by, uint256 indexed gid, uint256 indexed tid, address indexed token, uint256 amount);\\n  event PrizeDistributed(\\n    address by,\\n    address[] winners,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed token,\\n    uint256[] amounts\\n  );\\n  event NFTPrizeDistributed(\\n    address by,\\n    address[] winners,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n  event PrizeDeposited(\\n    address by,\\n    address depositor,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed token,\\n    uint256 amount\\n  );\\n  event PrizeWithdrawn(\\n    address by,\\n    address to,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed token,\\n    uint256 amount\\n  );\\n  event NFTPrizeDeposited(\\n    address by,\\n    address from,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n  event NFTPrizeWithdrawn(\\n    address by,\\n    address to,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    address indexed nftAddress,\\n    uint256 nftType,\\n    uint256[] tokenIds,\\n    uint256[] amounts\\n  );\\n\\n  bytes4 private constant INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n  bytes4 private constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\\n\\n  struct TournamentToken {\\n    uint256 totalUserDeposit;\\n    uint256 totalPrizeDistribution;\\n    uint256 totalPrizeFee;\\n    uint256 totalPrizeDeposit;\\n  }\\n  /// @dev Game ID -> Tournament ID -> Token Address -> Tournament tokens\\n  mapping(uint256 => mapping(uint256 => mapping(address => TournamentToken))) public tournamentTokens;\\n\\n  struct TournamentNftPrize {\\n    uint256 totalDistribution;\\n    uint256 totalDeposit;\\n  }\\n  /// @dev Game ID -> Tournament ID -> NFT Address -> Token ID -> Tournament NFT prizes\\n  mapping(uint256 => mapping(uint256 => mapping(address => mapping(uint256 => TournamentNftPrize)))) tournamentNftPrizes;\\n\\n  /// @dev AddressRegistry\\n  IAddressRegistry public addressRegistry;\\n\\n  modifier onlyMaintainer() {\\n    require(msg.sender == addressRegistry.maintainer(), \\\"Only maintainer\\\");\\n    _;\\n  }\\n\\n  modifier onlyTimelock() {\\n    require(msg.sender == addressRegistry.timelock(), \\\"Only timelock\\\");\\n    _;\\n  }\\n\\n  function initialize(address _addressRegistry) public initializer {\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    __Pausable_init();\\n    __ERC721Holder_init();\\n    __ERC1155Holder_init();\\n\\n    require(_addressRegistry != address(0), \\\"Invalid AddressRegistry\\\");\\n\\n    // initialize AddressRegistery\\n    addressRegistry = IAddressRegistry(_addressRegistry);\\n  }\\n\\n  /**\\n   * @notice Deposit ERC20 tokens from user\\n   * @dev Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to deposit\\n   */\\n  function deposit(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token\\n  ) external whenNotPaused {\\n    // get token amount to deposit\\n    uint256 depositTokenAmount = IGameRegistry(addressRegistry.gameRegistry()).getDepositTokenAmount(\\n      _gid,\\n      _tid,\\n      _token\\n    );\\n\\n    // check if the token address is valid\\n    require(depositTokenAmount > 0, \\\"Invalid deposit token\\\");\\n\\n    // transfer the payment\\n    IERC20Upgradeable(_token).safeTransferFrom(msg.sender, address(this), depositTokenAmount);\\n    tournamentTokens[_gid][_tid][_token].totalUserDeposit += depositTokenAmount;\\n\\n    emit UserDeposited(msg.sender, _gid, _tid, _token, depositTokenAmount);\\n  }\\n\\n  /**\\n   * @notice Distribute winners their prizes\\n   * @dev Only maintainer\\n   * @dev The maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _token Prize token address\\n   * @param _amounts Prize list\\n   */\\n  function distributePrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _token,\\n    uint256[] calldata _amounts\\n  ) external whenNotPaused onlyMaintainer {\\n    require(_winners.length == _amounts.length, \\\"Mismatched winners and amounts\\\");\\n\\n    // get gameRegistry\\n    IGameRegistry gameRegistry = IGameRegistry(addressRegistry.gameRegistry());\\n\\n    // check if token is allowed to distribute\\n    require(gameRegistry.isDistributable(_gid, _token), \\\"Disallowed distribution token\\\");\\n\\n    _transferPayment(_gid, _tid, _winners, _token, _amounts);\\n\\n    // check if the prize amount is not exceeded\\n    require(\\n      tournamentTokens[_gid][_tid][_token].totalPrizeDistribution +\\n        tournamentTokens[_gid][_tid][_token].totalPrizeFee <=\\n        tournamentTokens[_gid][_tid][_token].totalPrizeDeposit + tournamentTokens[_gid][_tid][_token].totalUserDeposit,\\n      \\\"Prize amount exceeded\\\"\\n    );\\n\\n    emit PrizeDistributed(msg.sender, _winners, _gid, _tid, _token, _amounts);\\n  }\\n\\n  /**\\n   * @notice Transfer the winners' ERC20 token prizes and relevant fees\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _token Prize token address\\n   * @param _amounts Prize list\\n   */\\n  function _transferPayment(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _token,\\n    uint256[] calldata _amounts\\n  ) internal {\\n    // get gameRegistry\\n    IGameRegistry gameRegistry = IGameRegistry(addressRegistry.gameRegistry());\\n\\n    // transfer the winners their prizes\\n    uint256 totalPlatformFeeAmount;\\n    uint256 totalGameCreatorFeeAmount;\\n    uint256 totalTournamentCreatorFeeAmount;\\n    for (uint256 i; i < _winners.length; i++) {\\n      require(_winners[i] != address(0), \\\"Winner address should be defined\\\");\\n      require(_amounts[i] != 0, \\\"Winner amount should be greater than zero\\\");\\n\\n      // get userAmount\\n      uint256 userAmount = _amounts[i];\\n\\n      {\\n        // calculate the platform fee\\n        uint256 platformFeeAmount = (_amounts[i] * gameRegistry.platformFee()) / 100_0;\\n        totalPlatformFeeAmount += platformFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= platformFeeAmount;\\n      }\\n\\n      {\\n        // calculate gameCreatorFee\\n        uint256 gameCreatorFee = gameRegistry.getAppliedGameCreatorFee(_gid, _tid);\\n        uint256 gameCreatorFeeAmount = (_amounts[i] * gameCreatorFee) / 100_0;\\n        totalGameCreatorFeeAmount += gameCreatorFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= gameCreatorFeeAmount;\\n      }\\n\\n      {\\n        // calculate tournamentCreatorFee\\n        uint256 tournamentCreatorFee = gameRegistry.getTournamentCreatorFee(_gid, _tid);\\n        uint256 tournamentCreatorFeeAmount = (_amounts[i] * tournamentCreatorFee) / 100_0;\\n        totalTournamentCreatorFeeAmount += tournamentCreatorFeeAmount;\\n\\n        // update userAmount\\n        userAmount -= tournamentCreatorFeeAmount;\\n      }\\n\\n      // transfer the prize\\n      tournamentTokens[_gid][_tid][_token].totalPrizeDistribution += userAmount;\\n      IERC20Upgradeable(_token).safeTransfer(_winners[i], userAmount);\\n    }\\n\\n    // transfer the fees\\n    tournamentTokens[_gid][_tid][_token].totalPrizeFee +=\\n      totalPlatformFeeAmount +\\n      totalGameCreatorFeeAmount +\\n      totalTournamentCreatorFeeAmount;\\n    IERC20Upgradeable(_token).safeTransfer(gameRegistry.feeRecipient(), totalPlatformFeeAmount);\\n    IERC20Upgradeable(_token).safeTransfer(gameRegistry.getGameCreatorAddress(_gid), totalGameCreatorFeeAmount);\\n    IERC20Upgradeable(_token).safeTransfer(\\n      gameRegistry.getTournamentCreator(_gid, _tid),\\n      totalTournamentCreatorFeeAmount\\n    );\\n  }\\n\\n  /**\\n   * @notice Distribute winners' NFT prizes\\n   * @dev Only maintainer\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function distributeNFTPrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external whenNotPaused nonReentrant onlyMaintainer {\\n    // check if token is allowed to distribute\\n    require(\\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _nftAddress),\\n      \\\"Disallowed distribution token\\\"\\n    );\\n\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(\\n      _winners.length == _tokenIds.length && _tokenIds.length == _amounts.length,\\n      \\\"Mismatched NFT distribution data\\\"\\n    );\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs to the winners\\n      for (uint256 i; i < _winners.length; i++) {\\n        require(\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit == 1 &&\\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution == 0,\\n          \\\"NFT prize distribution amount exceeded\\\"\\n        );\\n\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution = 1;\\n        totalAmounts += _amounts[i];\\n        try IERC721Upgradeable(_nftAddress).safeTransferFrom(address(this), _winners[i], _tokenIds[i]) {} catch {\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution = 0;\\n          totalAmounts -= _amounts[i];\\n        }\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _winners.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs to the winners\\n      for (uint256 i; i < _winners.length; i++) {\\n        require(\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution >=\\n            _amounts[i],\\n          \\\"NFT prize distribution amount exceeded\\\"\\n        );\\n\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution += _amounts[i];\\n        try\\n          IERC1155Upgradeable(_nftAddress).safeTransferFrom(\\n            address(this),\\n            _winners[i],\\n            _tokenIds[i],\\n            _amounts[i],\\n            bytes(\\\"\\\")\\n          )\\n        {} catch {\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution -= _amounts[i];\\n        }\\n      }\\n    }\\n\\n    emit NFTPrizeDistributed(msg.sender, _winners, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Deposit the prize tokens for the specific game/tournament\\n   * @dev Only tokens which are allowed as a distributable token can be deposited\\n   * @dev Prize is transferred from _depositor address to this contract\\n   * @param _depositor Depositor address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to deposit\\n   */\\n  function depositPrize(\\n    address _depositor,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external {\\n    require(msg.sender == owner() || msg.sender == addressRegistry.gameRegistry(), \\\"Only owner or GameRegistry\\\");\\n    require(_token != address(0), \\\"Unexpected token address\\\");\\n\\n    // check if tokens are allowed to claim as a prize\\n    require(\\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _token),\\n      \\\"Disallowed distribution token\\\"\\n    );\\n\\n    // deposit prize tokens\\n    bool supportsERC721Interface;\\n    // Try-catch approach ensures that a non-implementer of EIP-165 standard still can still be deposited\\n    try IERC165Upgradeable(_token).supportsInterface(INTERFACE_ID_ERC721) {\\n      supportsERC721Interface = IERC165Upgradeable(_token).supportsInterface(INTERFACE_ID_ERC721);\\n    } catch {\\n      supportsERC721Interface = false;\\n    }\\n    require(!supportsERC721Interface, \\\"ERC721 token not allowed\\\");\\n\\n    IERC20Upgradeable(_token).safeTransferFrom(_depositor, address(this), _amount);\\n    tournamentTokens[_gid][_tid][_token].totalPrizeDeposit += _amount;\\n\\n    emit PrizeDeposited(msg.sender, _depositor, _gid, _tid, _token, _amount);\\n  }\\n\\n  /**\\n   * @notice Withdraw the prize tokens from the specific game/tournament\\n   * @dev Only owner\\n   * @param _to Beneficiary address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to withdraw\\n   */\\n  function withdrawPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external onlyTimelock {\\n    // check if the prize is sufficient to withdraw\\n    require(tournamentTokens[_gid][_tid][_token].totalPrizeDeposit >= _amount, \\\"Insufficient prize\\\");\\n\\n    // withdraw the prize\\n    unchecked {\\n      tournamentTokens[_gid][_tid][_token].totalPrizeDeposit -= _amount;\\n    }\\n    IERC20Upgradeable(_token).safeTransfer(_to, _amount);\\n\\n    emit PrizeWithdrawn(msg.sender, _to, _gid, _tid, _token, _amount);\\n  }\\n\\n  /**\\n   * @notice Deposit NFT prize for the specific game/tournament\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _from NFT owner address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function depositNFTPrize(\\n    address _from,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external {\\n    require(msg.sender == owner() || msg.sender == addressRegistry.gameRegistry(), \\\"Only owner or GameRegistry\\\");\\n\\n    // check if NFT is allowed to distribute\\n    require(\\n      IGameRegistry(addressRegistry.gameRegistry()).isDistributable(_gid, _nftAddress),\\n      \\\"Disallowed distribution token\\\"\\n    );\\n\\n    require(_nftAddress != address(0), \\\"Unexpected NFT address\\\");\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(_tokenIds.length == _amounts.length, \\\"Mismatched deposit data\\\");\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // transfer NFTs to the contract and update totalNFTPrizeDeposit\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(_from, address(this), _tokenIds[i]);\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit = 1;\\n        totalAmounts += _amounts[i];\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _tokenIds.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // transfer NFTs to the contract and update totalNFTPrizeDeposit\\n      IERC1155Upgradeable(_nftAddress).safeBatchTransferFrom(_from, address(this), _tokenIds, _amounts, bytes(\\\"\\\"));\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit += _amounts[i];\\n      }\\n    }\\n\\n    emit NFTPrizeDeposited(msg.sender, _from, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Withdraw NFT prize for the specific game/tournament\\n   * @dev Only owner\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _to NFT receiver address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function withdrawNFTPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external nonReentrant onlyOwner {\\n    require(_nftType == 721 || _nftType == 1155, \\\"Unexpected NFT type\\\");\\n    require(_tokenIds.length == _amounts.length, \\\"Mismatched deposit data\\\");\\n\\n    uint256 totalAmounts;\\n    if (_nftType == 721) {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC721), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs from the contract\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        require(\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution ==\\n            1,\\n          \\\"Insufficient NFT prize\\\"\\n        );\\n\\n        tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit = 0;\\n        totalAmounts += _amounts[i];\\n        IERC721Upgradeable(_nftAddress).safeTransferFrom(address(this), _to, _tokenIds[i]);\\n      }\\n\\n      // check if all amount value is 1\\n      require(totalAmounts == _tokenIds.length, \\\"Invalid amount value\\\");\\n    } else {\\n      require(IERC165(_nftAddress).supportsInterface(INTERFACE_ID_ERC1155), \\\"Unexpected NFT address\\\");\\n\\n      // update totalNFTPrizeDeposit and transfer NFTs from the contract\\n      for (uint256 i; i < _tokenIds.length; i++) {\\n        require(\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -\\n            tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDistribution >=\\n            _amounts[i],\\n          \\\"Insufficient NFT prize\\\"\\n        );\\n\\n        unchecked {\\n          tournamentNftPrizes[_gid][_tid][_nftAddress][_tokenIds[i]].totalDeposit -= _amounts[i];\\n        }\\n      }\\n      IERC1155Upgradeable(_nftAddress).safeBatchTransferFrom(address(this), _to, _tokenIds, _amounts, bytes(\\\"\\\"));\\n    }\\n\\n    emit NFTPrizeWithdrawn(msg.sender, _to, _gid, _tid, _nftAddress, _nftType, _tokenIds, _amounts);\\n  }\\n\\n  /**\\n   * @notice Pause Oparcade\\n   * @dev Only owner\\n   */\\n  function pause() external onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @notice Resume Oparcade\\n   * @dev Only owner\\n   */\\n  function unpause() external onlyOwner {\\n    _unpause();\\n  }\\n}\\n\",\"keccak256\":\"0x5b14f811e0f7bcebc867c86746fefd5707f91e3cbee71501721ee5b2b7f2621d\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title AddressRegistry Contract Interface\\n * @notice Define the interface used to get addresses in Oparcade\\n * @author David Lee\\n */\\ninterface IAddressRegistry {\\n  /**\\n   * @notice Provide the Oparcade contract address\\n   * @dev Can be zero in case of the Oparcade contract is not registered\\n   * @return address Oparcade contract address\\n   */\\n  function oparcade() external view returns (address);\\n\\n  /**\\n   * @notice Provide the GameRegistry contract address\\n   * @dev Can be zero in case of the GameRegistry contract is not registered\\n   * @return address GameRegistry contract address\\n   */\\n  function gameRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Provide the maintainer address\\n   * @dev Can be zero in case of the maintainer address is not registered\\n   * @return address Maintainer contract address\\n   */\\n  function maintainer() external view returns (address);\\n\\n  /**\\n   * @notice Provide the timelock contract address\\n   * @dev Can be zero in case of the timelock address is not registered\\n   * @return address Timelock contract address\\n   */\\n  function timelock() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f2cbab5d28ad41e776c8ec62d06b756bad0d20f587c3c028d119b6068017908\",\"license\":\"MIT\"},\"contracts/interfaces/IGameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title GameRegistry Contract Interface\\n * @notice Define the interface necessary for the GameRegistry\\n * @author David Lee\\n */\\ninterface IGameRegistry {\\n  struct Token {\\n    address tokenAddress;\\n    uint256 tokenAmount;\\n  }\\n\\n  struct Tournament {\\n    string name;\\n    address creatorAddress;\\n    uint256 creatorFee;\\n    uint256 appliedGameCreatorFee;\\n    /// @dev Token address -> amount\\n    mapping(address => uint256) depositTokenAmount;\\n  }\\n\\n  struct Game {\\n    string name;\\n    address creatorAddress;\\n    uint256 baseCreatorFee;\\n    bool isDeprecated;\\n    address[] distributableTokenList; // return all array\\n    address[] depositTokenList;\\n    mapping(uint256 => Tournament) tournaments;\\n    uint256 tournamentsCount;\\n    /// @dev Token address -> Bool\\n    mapping(address => bool) distributable;\\n  }\\n\\n  /**\\n   * @return (address) Platform fee recipient\\n   */\\n  function feeRecipient() external returns (address);\\n\\n  /**\\n   * @return (uint256) Platform fee\\n   */\\n  function platformFee() external returns (uint256);\\n\\n  /**\\n   * @return (address) Tournament creation fee token address\\n   */\\n  function tournamentCreationFeeToken() external returns (address);\\n\\n  /**\\n   * @return (uint256) Tournament creation fee token amount\\n   */\\n  function tournamentCreationFeeAmount() external returns (uint256);\\n\\n  /**\\n   * @notice Returns a boolean indicating if a specific game is deprecated\\n   * @param _gid Game ID\\n   * @return (bool) Is deprecated\\n   */\\n  function isGameDeprecated(uint256 _gid) external view returns (bool);\\n\\n  /**\\n   * @notice Returns the game name\\n   * @param _gid Game ID\\n   * @return (string) Game name\\n   */\\n  function getGameName(uint256 _gid) external view returns (string memory);\\n\\n  /**\\n   * @notice Returns the game creator address\\n   * @param _gid Game ID\\n   * @return (string) Game creator address\\n   */\\n  function getGameCreatorAddress(uint256 _gid) external view returns (address);\\n\\n  /**\\n   * @notice Returns the game creator fee\\n   * @param _gid Game ID\\n   * @return (uint256) Game creator fee\\n   */\\n  function getGameBaseCreatorFee(uint256 _gid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns true if the token of a specific game is distributable, false otherwise\\n   * @param _gid Game ID\\n   * @param _tokenAddress token address\\n   * @return (uint256) Is token distributable\\n   */\\n  function isDistributable(uint256 _gid, address _tokenAddress) external view returns (bool);\\n\\n  /**\\n   * @notice Returns the deposit token list of the game\\n   * @param _gid Game ID\\n   * @param (address[]) Deposit token list of the game\\n   */\\n  function getDepositTokenList(uint256 _gid) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the distributable token list of the game\\n   * @param _gid Game ID\\n   * @param (address[]) Distributable token list of the game\\n   */\\n  function getDistributableTokenList(uint256 _gid) external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the number of games created\\n   * @return (uint256) Amount of games created\\n   */\\n  function gameCount() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the number of the tournaments of the specific game\\n   * @param _gid Game ID\\n   * @return (uint256) Number of the tournament\\n   */\\n  function getTournamentCount(uint256 _gid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the tournament name of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (string) Tournament name\\n   */\\n  function getTournamentName(uint256 _gid, uint256 _tid) external view returns (string memory);\\n\\n  /**\\n   * @notice Returns the tournament creator fee of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (uint256) Tournament creator fee\\n   */\\n  function getTournamentCreatorFee(uint256 _gid, uint256 _tid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the applied game creator fee of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (string) Game applied game creator fee of a tournament\\n   */\\n  function getAppliedGameCreatorFee(uint256 _gid, uint256 _tid) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the deposit token amount of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _tokenAddress token address\\n   * @return (uint256) Tournament deposit token amount\\n   */\\n  function getDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _tokenAddress\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the tournament creator address of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (address) Tournament creator address\\n   */\\n  function getTournamentCreator(uint256 _gid, uint256 _tid) external view returns (address);\\n\\n  /**\\n   * @notice Add the new game\\n   * @dev Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the game\\n   * @dev When creating the tournament of the game, the game creator fee can be proposed by the tournament creator\\n   * @dev but the proposed value can't be less than the base one\\n   * @dev If the proposed game creator fee is 0, the base game creator fee will be applied\\n   * @param _gameName Game name to add\\n   * @param _gameCreator Game creator address\\n   * @param _baseGameCreatorFee Base game creator fee\\n   */\\n  function addGame(\\n    string calldata _gameName,\\n    address _gameCreator,\\n    uint256 _baseGameCreatorFee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Remove the exising game\\n   * @dev Game is not removed from the games array, just set it deprecated\\n   * @param _gid Game ID\\n   */\\n  function removeGame(uint256 _gid) external;\\n\\n  /**\\n   * @notice Update the game creator\\n   * @param _gid Game ID\\n   * @param _gameCreator Game creator address\\n   */\\n  function updateGameCreator(uint256 _gid, address _gameCreator) external;\\n\\n  /**\\n   * @notice Update the base game creator fee\\n   * @dev Tournament creator fee is the royality that will be transferred to the tournament creator address\\n   * @dev Tournament creator can propose the game creator fee when creating the tournament\\n   * @dev but it can't be less than the base game creator fee\\n   * @param _gid Game ID\\n   * @param _baseGameCreatorFee Base game creator fee\\n   */\\n  function updateBaseGameCreatorFee(uint256 _gid, uint256 _baseGameCreatorFee) external;\\n\\n  /**\\n   * @notice Create the tournament and set tokens\\n   * @dev Only owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @param _depositToken Token to allow/disallow the deposit\\n   * @param _distributionTokenAddress Distribution token address to be set to active\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByDAOWithTokens(\\n    uint256 _gid,\\n    string memory _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee,\\n    Token calldata _depositToken,\\n    address _distributionTokenAddress\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev Only owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByDAO(\\n    uint256 _gid,\\n    string calldata _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev Anyone can create the tournament and initialize the prize pool with tokens and NFTs\\n   * @dev Tournament creator should set all params necessary for the tournament in 1 tx and\\n   * @dev the params set is immutable. It will be prevent the fraud tournament is created\\n   * @dev Tournament creator should pay fees to create the tournament\\n   * @dev and the fee token address and fee token amount are set by the owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev NFT type to initialize the prize pool should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @param _depositToken Deposit token (address and amount) for playing the tournament\\n   * @param _tokenToAddPrizePool Token (address and amount) to initialize the prize pool\\n   * @param _nftAddressToAddPrizePool NFT address to initialize the prize pool\\n   * @param _nftTypeToAddPrizePool NFT type to initialize the prize pool\\n   * @param _tokenIdsToAddPrizePool NFT token Id list to initialize the prize pool\\n   * @param _amountsToAddPrizePool NFT token amount list to initialize the prize pool\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByUser(\\n    uint256 _gid,\\n    string calldata _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee,\\n    Token calldata _depositToken,\\n    Token calldata _tokenToAddPrizePool,\\n    address _nftAddressToAddPrizePool,\\n    uint256 _nftTypeToAddPrizePool,\\n    uint256[] memory _tokenIdsToAddPrizePool,\\n    uint256[] memory _amountsToAddPrizePool\\n  ) external returns (uint256 tid);\\n\\n  /**\\n   * @notice Update deposit token amount\\n   * @dev Only owner\\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _amount Token amount\\n   */\\n  function updateDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Update distributable token address\\n   * @dev Only owner\\n   * @param _gid Game ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _isDistributable true: distributable false: not distributable\\n   */\\n  function updateDistributableTokenAddress(\\n    uint256 _gid,\\n    address _token,\\n    bool _isDistributable\\n  ) external;\\n\\n  /**\\n   * @notice Update the platform fee\\n   * @dev Only owner\\n   * @dev Allow zero recipient address only of fee is also zero\\n   * @param _feeRecipient Platform fee recipient address\\n   * @param _platformFee platform fee\\n   */\\n  function updatePlatformFee(address _feeRecipient, uint256 _platformFee) external;\\n\\n  /**\\n   * @notice Update the tournament creation fee\\n   * @dev Only owner\\n   * @dev Tournament creator should pay this fee when creating the tournament\\n   * @param _tournamentCreationFeeToken Fee token address\\n   * @param _tournamentCreationFeeAmount Fee token amount\\n   */\\n  function updateTournamentCreationFee(address _tournamentCreationFeeToken, uint256 _tournamentCreationFeeAmount)\\n    external;\\n}\\n\",\"keccak256\":\"0xd226e0825d9b427952abaf310d48d9c9a943ea30ec0491988167e6e4684ae7d0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506144be806100206000396000f3fe608060405234801561001057600080fd5b506004361061016c5760003560e01c80638da5cb5b116100cd578063c4d66de811610081578063f23a6e6111610066578063f23a6e611461032d578063f2fde38b1461034c578063f3ad65f41461035f57600080fd5b8063c4d66de814610307578063e3b2facc1461031a57600080fd5b80638f1a33ff116100b25780638f1a33ff1461026e578063b3a833b8146102d5578063bc197c81146102e857600080fd5b80638da5cb5b146102365780638dbdbe6d1461025b57600080fd5b80635c975abb116101245780638456cb59116101095780638456cb59146102085780638639c9a7146102105780638bd67fe81461022357600080fd5b80635c975abb146101f5578063715018a61461020057600080fd5b80631de6ba17116101555780631de6ba17146101c55780633f4ba83a146101da5780634ceba21a146101e257600080fd5b806301ffc9a714610171578063150b7a0214610199575b600080fd5b61018461017f366004613ad5565b610373565b60405190151581526020015b60405180910390f35b6101ac6101a7366004613bd2565b6103aa565b6040516001600160e01b03199091168152602001610190565b6101d86101d3366004613c3e565b6103bb565b005b6101d8610823565b6101d86101f0366004613cdc565b610835565b60975460ff16610184565b6101d8610bb5565b6101d8610bc7565b6101d861021e366004613d74565b610bd7565b6101d8610231366004613c3e565b611742565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610190565b6101d8610269366004613e42565b611932565b6102b561027c366004613e42565b61019160209081526000938452604080852082529284528284209052825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610190565b6101d86102e3366004613e7b565b611b18565b6101ac6102f6366004613fa4565b63bc197c8160e01b95945050505050565b6101d8610315366004614052565b612295565b6101d8610328366004613e7b565b612455565b6101ac61033b36600461406f565b63f23a6e6160e01b95945050505050565b6101d861035a366004614052565b612b98565b61019354610243906001600160a01b031681565b60006001600160e01b03198216630271189760e51b14806103a457506301ffc9a760e01b6001600160e01b03198316145b92915050565b630a85bd0160e11b5b949350505050565b6033546001600160a01b031633148061045c575061019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044791906140d8565b6001600160a01b0316336001600160a01b0316145b6104ad5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d65526567697374727900000000000060448201526064015b60405180910390fd5b6001600160a01b0382166105035760405162461bcd60e51b815260206004820152601860248201527f556e657870656374656420746f6b656e2061646472657373000000000000000060448201526064016104a4565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b91906140d8565b60405163aba869c560e01b8152600481018690526001600160a01b038481166024830152919091169063aba869c590604401602060405180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee91906140f5565b61063a5760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e00000060448201526064016104a4565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038416906301ffc9a790602401602060405180830381865afa9250505080156106a4575060408051601f3d908101601f191682019092526106a1918101906140f5565b60015b6106b057506000610723565b506040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a790602401602060405180830381865afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072091906140f5565b90505b80156107715760405162461bcd60e51b815260206004820152601860248201527f45524337323120746f6b656e206e6f7420616c6c6f776564000000000000000060448201526064016104a4565b6107866001600160a01b038416873085612c28565b60008581526101916020908152604080832087845282528083206001600160a01b0387168452909152812060030180548492906107c490849061412d565b9091555050604080513381526001600160a01b03888116602083015291810184905290841690859087907fa555954f2adaf5a353a1db2b9a28e229f872593323659c9f5ab9cc426d0c58a29060600160405180910390a4505050505050565b61082b612cae565b610833612d08565b565b61083d612d5a565b61019360009054906101000a90046001600160a01b03166001600160a01b0316639850d32b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b591906140d8565b6001600160a01b0316336001600160a01b0316146109075760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b60448201526064016104a4565b8381146109565760405162461bcd60e51b815260206004820152601e60248201527f4d69736d6174636865642077696e6e65727320616e6420616d6f756e7473000060448201526064016104a4565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c591906140d8565b60405163aba869c560e01b8152600481018a90526001600160a01b0386811660248301529192509082169063aba869c590604401602060405180830381865afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a91906140f5565b610a865760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e00000060448201526064016104a4565b610a9588888888888888612dad565b6000888152610191602090815260408083208a845282528083206001600160a01b038816845290915290208054600390910154610ad2919061412d565b6000898152610191602090815260408083208b845282528083206001600160a01b038916845290915290206002810154600190910154610b12919061412d565b1115610b605760405162461bcd60e51b815260206004820152601560248201527f5072697a6520616d6f756e74206578636565646564000000000000000000000060448201526064016104a4565b836001600160a01b031687897f6b4488e823ebb77fdc3a58bb5cbc1af38a0b2e39ff4dc84c080c08540dcd1ebc338a8a8989604051610ba39594939291906141dd565b60405180910390a45050505050505050565b610bbd612cae565b6108336000613432565b610bcf612cae565b610833613491565b610bdf612d5a565b610be76134ce565b61019360009054906101000a90046001600160a01b03166001600160a01b0316639850d32b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906140d8565b6001600160a01b0316336001600160a01b031614610cb15760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b60448201526064016104a4565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2991906140d8565b60405163aba869c560e01b8152600481018c90526001600160a01b038881166024830152919091169063aba869c590604401602060405180830381865afa158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c91906140f5565b610de85760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e00000060448201526064016104a4565b846102d11480610df9575084610483145b610e3b5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b60448201526064016104a4565b8683148015610e4957508281145b610e955760405162461bcd60e51b815260206004820181905260248201527f4d69736d617463686564204e465420646973747269627574696f6e206461746160448201526064016104a4565b6000856102d1141561128d576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906140f5565b610f555760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b888110156112415760008c8152610192602090815260408083208e845282528083206001600160a01b038c168452909152812090878784818110610f9e57610f9e61421f565b90506020020135815260200190815260200160002060010154600114801561101c575060008c8152610192602090815260408083208e845282528083206001600160a01b038c168452909152812090878784818110610fff57610fff61421f565b905060200201358152602001908152602001600020600001546000145b6110775760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b60648201526084016104a4565b60008c8152610192602090815260408083208e845282528083206001600160a01b038c16845290915281206001918888858181106110b7576110b761421f565b905060200201358152602001908152602001600020600001819055508383828181106110e5576110e561421f565b90506020020135826110f7919061412d565b9150876001600160a01b03166342842e0e308c8c8581811061111b5761111b61421f565b90506020020160208101906111309190614052565b8989868181106111425761114261421f565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561119957600080fd5b505af19250505080156111aa575060015b61122f5760008c8152610192602090815260408083208e845282528083206001600160a01b038c1684529091528120818888858181106111ec576111ec61421f565b9050602002013581526020019081526020016000206000018190555083838281811061121a5761121a61421f565b905060200201358261122c9190614235565b91505b806112398161424c565b915050610f58565b508088146112885760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b60448201526064016104a4565b6116da565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc91906140f5565b6113415760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b888110156116d85783838281811061135e5761135e61421f565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008888858181106113c1576113c161421f565b9050602002013581526020019081526020016000206000015461019260008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008989868181106114365761143661421f565b905060200201358152602001908152602001600020600101546114599190614235565b10156114b65760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b60648201526084016104a4565b8383828181106114c8576114c861421f565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b03168152602001908152602001600020600088888581811061152b5761152b61421f565b9050602002013581526020019081526020016000206000016000828254611552919061412d565b90915550506001600160a01b03881663f242432a308c8c858181106115795761157961421f565b905060200201602081019061158e9190614052565b8989868181106115a0576115a061421f565b905060200201358888878181106115b9576115b961421f565b90506020020135604051806020016040528060008152506040518663ffffffff1660e01b81526004016115f09594939291906142bf565b600060405180830381600087803b15801561160a57600080fd5b505af192505050801561161b575060015b6116c6578383828181106116315761163161421f565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008888858181106116945761169461421f565b90506020020135815260200190815260200160002060000160008282546116bb9190614235565b909155506116c69050565b806116d08161424c565b915050611344565b505b866001600160a01b03168a8c7fa825c8731f1dfe5c99472b7e94c839c9e6489ed55d0277366e867d8d88a306cf338d8d8c8c8c8c8c6040516117239897969594939291906142f7565b60405180910390a4506117366001606555565b50505050505050505050565b61019360009054906101000a90046001600160a01b03166001600160a01b031663d33219b46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba91906140d8565b6001600160a01b0316336001600160a01b03161461181a5760405162461bcd60e51b815260206004820152600d60248201527f4f6e6c792074696d656c6f636b0000000000000000000000000000000000000060448201526064016104a4565b60008481526101916020908152604080832086845282528083206001600160a01b03861684529091529020600301548111156118985760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e74207072697a65000000000000000000000000000060448201526064016104a4565b60008481526101916020908152604080832086845282528083206001600160a01b0386168085529252909120600301805483900390556118d990868361352f565b604080513381526001600160a01b03878116602083015291810183905290831690849086907fe64a3a357c20289b8fff53d7fabedc1fec8b86c76f070a66dd167c055e43e38d9060600160405180910390a45050505050565b61193a612d5a565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a991906140d8565b604051633586597160e01b815260048101869052602481018590526001600160a01b0384811660448301529190911690633586597190606401602060405180830381865afa1580156119ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a239190614357565b905060008111611a755760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964206465706f73697420746f6b656e000000000000000000000060448201526064016104a4565b611a8a6001600160a01b038316333084612c28565b60008481526101916020908152604080832086845282528083206001600160a01b038616845290915281208054839290611ac590849061412d565b909155505060408051338152602081018390526001600160a01b03841691859187917f3360a6f28beae2ecd8c3c807e274aaae13fd8264155337e6d0535a44468f0942910160405180910390a450505050565b6033546001600160a01b0316331480611bb9575061019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba491906140d8565b6001600160a01b0316336001600160a01b0316145b611c055760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d65526567697374727900000000000060448201526064016104a4565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d91906140d8565b60405163aba869c560e01b8152600481018a90526001600160a01b038881166024830152919091169063aba869c590604401602060405180830381865afa158015611ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf091906140f5565b611d3c5760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e00000060448201526064016104a4565b6001600160a01b038616611d8b5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b846102d11480611d9c575084610483145b611dde5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b60448201526064016104a4565b828114611e2d5760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f736974206461746100000000000000000060448201526064016104a4565b6000856102d1141561206b576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea891906140f5565b611eed5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b8481101561201f57876001600160a01b03166342842e0e8c30898986818110611f1b57611f1b61421f565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b50505060008b8152610192602090815260408083208d845282528083206001600160a01b038d16845290915281206001925090888885818110611fcb57611fcb61421f565b90506020020135815260200190815260200160002060010181905550838382818110611ff957611ff961421f565b905060200201358261200b919061412d565b9150806120178161424c565b915050611ef0565b508084146120665760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b60448201526064016104a4565b61223a565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156120b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120da91906140f5565b61211f5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612163918e9130918b918b918b918b9190600401614370565b600060405180830381600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b5050505060005b84811015612238578383828181106121b2576121b261421f565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f1684528252822092029390930135929091508888858181106121f9576121f961421f565b9050602002013581526020019081526020016000206001016000828254612220919061412d565b909155508190506122308161424c565b915050612198565b505b866001600160a01b0316888a7f8aa5f867116bd0007022fe5e2205d78c5a5922c47331762e9e69ce2c9a8f6a95338e8b8b8b8b8b60405161228197969594939291906143d2565b60405180910390a450505050505050505050565b600054610100900460ff16158080156122b55750600054600160ff909116105b806122cf5750303b1580156122cf575060005460ff166001145b6123415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104a4565b6000805460ff191660011790558015612364576000805461ff0019166101001790555b61236c613564565b6123746135d7565b61237c61364a565b6123846136bd565b61238c6136bd565b6001600160a01b0382166123e25760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642041646472657373526567697374727900000000000000000060448201526064016104a4565b610193805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015612451576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b61245d6134ce565b612465612cae565b846102d11480612476575084610483145b6124b85760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b60448201526064016104a4565b8281146125075760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f736974206461746100000000000000000060448201526064016104a4565b6000856102d1141561284a576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa15801561255e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258291906140f5565b6125c75760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b848110156127fe5760008a8152610192602090815260408083208c845282528083206001600160a01b038c1684529091528120908787848181106126105761261061421f565b602090810292909201358352508181019290925260409081016000908120548d825261019284528282208d835284528282206001600160a01b038d168352909352908120908888858181106126675761266761421f565b9050602002013581526020019081526020016000206001015461268a9190614235565b6001146126d95760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a650000000000000000000060448201526064016104a4565b60008a8152610192602090815260408083208c845282528083206001600160a01b038c1684529091528120818888858181106127175761271761421f565b905060200201358152602001908152602001600020600101819055508383828181106127455761274561421f565b9050602002013582612757919061412d565b9150876001600160a01b03166342842e0e308d89898681811061277c5761277c61421f565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156127d357600080fd5b505af11580156127e7573d6000803e3d6000fd5b5050505080806127f69061424c565b9150506125ca565b508084146128455760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b60448201526064016104a4565b612b33565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015612895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b991906140f5565b6128fe5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b84811015612abb5783838281811061291b5761291b61421f565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f1684528252822092029390930135929091508888858181106129625761296261421f565b602090810292909201358352508181019290925260409081016000908120548e825261019284528282208e835284528282206001600160a01b038e168352909352908120908989868181106129b9576129b961421f565b905060200201358152602001908152602001600020600101546129dc9190614235565b1015612a2a5760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a650000000000000000000060448201526064016104a4565b838382818110612a3c57612a3c61421f565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f168452825282209202939093013592909150888885818110612a8357612a8361421f565b905060200201358152602001908152602001600020600101600082825403925050819055508080612ab39061424c565b915050612901565b5060408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612b009130918f918b918b918b918b9190600401614370565b600060405180830381600087803b158015612b1a57600080fd5b505af1158015612b2e573d6000803e3d6000fd5b505050505b866001600160a01b0316888a7f5a8dca5c67110aaf25dc3f613084907009569128e7e31216a0802dce0db9c784338e8b8b8b8b8b604051612b7a97969594939291906143d2565b60405180910390a450612b8d6001606555565b505050505050505050565b612ba0612cae565b6001600160a01b038116612c1c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104a4565b612c2581613432565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052612ca89085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613728565b50505050565b6033546001600160a01b031633146108335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a4565b612d1061380d565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff16156108335760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104a4565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015612df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1c91906140d8565b90506000806000805b8881101561324f5760008a8a83818110612e4157612e4161421f565b9050602002016020810190612e569190614052565b6001600160a01b03161415612ead5760405162461bcd60e51b815260206004820181905260248201527f57696e6e657220616464726573732073686f756c6420626520646566696e656460448201526064016104a4565b868682818110612ebf57612ebf61421f565b9050602002013560001415612f3c5760405162461bcd60e51b815260206004820152602960248201527f57696e6e657220616d6f756e742073686f756c6420626520677265617465722060448201527f7468616e207a65726f000000000000000000000000000000000000000000000060648201526084016104a4565b6000878783818110612f5057612f5061421f565b90506020020135905060006103e8876001600160a01b03166326232a2e6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc29190614357565b8a8a86818110612fd457612fd461421f565b90506020020135612fe59190614418565b612fef9190614437565b9050612ffb818761412d565b95506130078183614235565b9150506000866001600160a01b031663a7ab05498f8f6040518363ffffffff1660e01b8152600401613043929190918252602082015260400190565b602060405180830381865afa158015613060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130849190614357565b905060006103e8828b8b8781811061309e5761309e61421f565b905060200201356130af9190614418565b6130b99190614437565b90506130c5818761412d565b95506130d18184614235565b925050506000866001600160a01b03166322871dcd8f8f6040518363ffffffff1660e01b815260040161310e929190918252602082015260400190565b602060405180830381865afa15801561312b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314f9190614357565b905060006103e8828b8b878181106131695761316961421f565b9050602002013561317a9190614418565b6131849190614437565b9050613190818661412d565b945061319c8184614235565b925050508061019160008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160008282546131fb919061412d565b9091555061323c90508b8b848181106132165761321661421f565b905060200201602081019061322b9190614052565b6001600160a01b038b16908361352f565b50806132478161424c565b915050612e25565b508061325b838561412d565b613265919061412d565b60008c8152610191602090815260408083208e845282528083206001600160a01b038c168452909152812060020180549091906132a390849061412d565b92505081905550613322846001600160a01b031663469048406040518163ffffffff1660e01b81526004016020604051808303816000875af11580156132ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331191906140d8565b6001600160a01b038916908561352f565b6040516366f4688560e11b8152600481018c90526133a0906001600160a01b0386169063cde8d10a90602401602060405180830381865afa15801561336b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338f91906140d8565b6001600160a01b038916908461352f565b60405163f406c2d160e01b8152600481018c9052602481018b9052613425906001600160a01b0386169063f406c2d190604401602060405180830381865afa1580156133f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341491906140d8565b6001600160a01b038916908361352f565b5050505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b613499612d5a565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612d3d3390565b600260655414156135215760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a4565b6002606555565b6001606555565b6040516001600160a01b03831660248201526044810182905261355f90849063a9059cbb60e01b90606401612c5c565b505050565b600054610100900460ff166135cf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b61083361385f565b600054610100900460ff166136425760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b6108336138d3565b600054610100900460ff166136b55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b61083361393e565b600054610100900460ff166108335760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b600061377d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139b59092919063ffffffff16565b80519091501561355f578080602001905181019061379b91906140f5565b61355f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104a4565b60975460ff166108335760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104a4565b600054610100900460ff166138ca5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b61083333613432565b600054610100900460ff166135285760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b600054610100900460ff166139a95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b6097805460ff19169055565b60606103b3848460008585600080866001600160a01b031685876040516139dc9190614459565b60006040518083038185875af1925050503d8060008114613a19576040519150601f19603f3d011682016040523d82523d6000602084013e613a1e565b606091505b5091509150613a2f87838387613a3a565b979650505050505050565b60608315613aa6578251613a9f576001600160a01b0385163b613a9f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a4565b50816103b3565b6103b38383815115613abb5781518083602001fd5b8060405162461bcd60e51b81526004016104a49190614475565b600060208284031215613ae757600080fd5b81356001600160e01b031981168114613aff57600080fd5b9392505050565b6001600160a01b0381168114612c2557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613b5a57613b5a613b1b565b604052919050565b600082601f830112613b7357600080fd5b813567ffffffffffffffff811115613b8d57613b8d613b1b565b613ba0601f8201601f1916602001613b31565b818152846020838601011115613bb557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613be857600080fd5b8435613bf381613b06565b93506020850135613c0381613b06565b925060408501359150606085013567ffffffffffffffff811115613c2657600080fd5b613c3287828801613b62565b91505092959194509250565b600080600080600060a08688031215613c5657600080fd5b8535613c6181613b06565b945060208601359350604086013592506060860135613c7f81613b06565b949793965091946080013592915050565b60008083601f840112613ca257600080fd5b50813567ffffffffffffffff811115613cba57600080fd5b6020830191508360208260051b8501011115613cd557600080fd5b9250929050565b600080600080600080600060a0888a031215613cf757600080fd5b8735965060208801359550604088013567ffffffffffffffff80821115613d1d57600080fd5b613d298b838c01613c90565b909750955060608a01359150613d3e82613b06565b90935060808901359080821115613d5457600080fd5b50613d618a828b01613c90565b989b979a50959850939692959293505050565b60008060008060008060008060008060e08b8d031215613d9357600080fd5b8a35995060208b0135985060408b013567ffffffffffffffff80821115613db957600080fd5b613dc58e838f01613c90565b909a50985060608d01359150613dda82613b06565b90965060808c0135955060a08c01359080821115613df757600080fd5b613e038e838f01613c90565b909650945060c08d0135915080821115613e1c57600080fd5b50613e298d828e01613c90565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215613e5757600080fd5b83359250602084013591506040840135613e7081613b06565b809150509250925092565b600080600080600080600080600060e08a8c031215613e9957600080fd5b8935613ea481613b06565b985060208a0135975060408a0135965060608a0135613ec281613b06565b955060808a0135945060a08a013567ffffffffffffffff80821115613ee657600080fd5b613ef28d838e01613c90565b909650945060c08c0135915080821115613f0b57600080fd5b50613f188c828d01613c90565b915080935050809150509295985092959850929598565b600082601f830112613f4057600080fd5b8135602067ffffffffffffffff821115613f5c57613f5c613b1b565b8160051b613f6b828201613b31565b9283528481018201928281019087851115613f8557600080fd5b83870192505b84831015613a2f57823582529183019190830190613f8b565b600080600080600060a08688031215613fbc57600080fd5b8535613fc781613b06565b94506020860135613fd781613b06565b9350604086013567ffffffffffffffff80821115613ff457600080fd5b61400089838a01613f2f565b9450606088013591508082111561401657600080fd5b61402289838a01613f2f565b9350608088013591508082111561403857600080fd5b5061404588828901613b62565b9150509295509295909350565b60006020828403121561406457600080fd5b8135613aff81613b06565b600080600080600060a0868803121561408757600080fd5b853561409281613b06565b945060208601356140a281613b06565b93506040860135925060608601359150608086013567ffffffffffffffff8111156140cc57600080fd5b61404588828901613b62565b6000602082840312156140ea57600080fd5b8151613aff81613b06565b60006020828403121561410757600080fd5b81518015158114613aff57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561414057614140614117565b500190565b8183526000602080850194508260005b8581101561418357813561416881613b06565b6001600160a01b031687529582019590820190600101614155565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156141c057600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b0386168152606060208201526000614200606083018688614145565b828103604084015261421381858761418e565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008282101561424757614247614117565b500390565b600060001982141561426057614260614117565b5060010190565b60005b8381101561428257818101518382015260200161426a565b83811115612ca85750506000910152565b600081518084526142ab816020860160208601614267565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613a2f60a0830184614293565b6001600160a01b038916815260a06020820152600061431a60a08301898b614145565b876040840152828103606084015261433381878961418e565b9050828103608084015261434881858761418e565b9b9a5050505050505050505050565b60006020828403121561436957600080fd5b5051919050565b60006001600160a01b03808a16835280891660208401525060a0604083015261439d60a08301878961418e565b82810360608401526143b081868861418e565b905082810360808401526143c48185614293565b9a9950505050505050505050565b60006001600160a01b03808a16835280891660208401525086604083015260a0606083015261440560a08301868861418e565b82810360808401526143c481858761418e565b600081600019048311821515161561443257614432614117565b500290565b60008261445457634e487b7160e01b600052601260045260246000fd5b500490565b6000825161446b818460208701614267565b9190910192915050565b602081526000613aff602083018461429356fea26469706673582212203e4dd33329653912df891506186b7ea1080f3d99f8e63fb1418d32cba753ac3964736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061016c5760003560e01c80638da5cb5b116100cd578063c4d66de811610081578063f23a6e6111610066578063f23a6e611461032d578063f2fde38b1461034c578063f3ad65f41461035f57600080fd5b8063c4d66de814610307578063e3b2facc1461031a57600080fd5b80638f1a33ff116100b25780638f1a33ff1461026e578063b3a833b8146102d5578063bc197c81146102e857600080fd5b80638da5cb5b146102365780638dbdbe6d1461025b57600080fd5b80635c975abb116101245780638456cb59116101095780638456cb59146102085780638639c9a7146102105780638bd67fe81461022357600080fd5b80635c975abb146101f5578063715018a61461020057600080fd5b80631de6ba17116101555780631de6ba17146101c55780633f4ba83a146101da5780634ceba21a146101e257600080fd5b806301ffc9a714610171578063150b7a0214610199575b600080fd5b61018461017f366004613ad5565b610373565b60405190151581526020015b60405180910390f35b6101ac6101a7366004613bd2565b6103aa565b6040516001600160e01b03199091168152602001610190565b6101d86101d3366004613c3e565b6103bb565b005b6101d8610823565b6101d86101f0366004613cdc565b610835565b60975460ff16610184565b6101d8610bb5565b6101d8610bc7565b6101d861021e366004613d74565b610bd7565b6101d8610231366004613c3e565b611742565b6033546001600160a01b03165b6040516001600160a01b039091168152602001610190565b6101d8610269366004613e42565b611932565b6102b561027c366004613e42565b61019160209081526000938452604080852082529284528284209052825290208054600182015460028301546003909301549192909184565b604080519485526020850193909352918301526060820152608001610190565b6101d86102e3366004613e7b565b611b18565b6101ac6102f6366004613fa4565b63bc197c8160e01b95945050505050565b6101d8610315366004614052565b612295565b6101d8610328366004613e7b565b612455565b6101ac61033b36600461406f565b63f23a6e6160e01b95945050505050565b6101d861035a366004614052565b612b98565b61019354610243906001600160a01b031681565b60006001600160e01b03198216630271189760e51b14806103a457506301ffc9a760e01b6001600160e01b03198316145b92915050565b630a85bd0160e11b5b949350505050565b6033546001600160a01b031633148061045c575061019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610423573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044791906140d8565b6001600160a01b0316336001600160a01b0316145b6104ad5760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d65526567697374727900000000000060448201526064015b60405180910390fd5b6001600160a01b0382166105035760405162461bcd60e51b815260206004820152601860248201527f556e657870656374656420746f6b656e2061646472657373000000000000000060448201526064016104a4565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b91906140d8565b60405163aba869c560e01b8152600481018690526001600160a01b038481166024830152919091169063aba869c590604401602060405180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee91906140f5565b61063a5760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e00000060448201526064016104a4565b6040516301ffc9a760e01b81526380ac58cd60e01b60048201526000906001600160a01b038416906301ffc9a790602401602060405180830381865afa9250505080156106a4575060408051601f3d908101601f191682019092526106a1918101906140f5565b60015b6106b057506000610723565b506040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038416906301ffc9a790602401602060405180830381865afa1580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072091906140f5565b90505b80156107715760405162461bcd60e51b815260206004820152601860248201527f45524337323120746f6b656e206e6f7420616c6c6f776564000000000000000060448201526064016104a4565b6107866001600160a01b038416873085612c28565b60008581526101916020908152604080832087845282528083206001600160a01b0387168452909152812060030180548492906107c490849061412d565b9091555050604080513381526001600160a01b03888116602083015291810184905290841690859087907fa555954f2adaf5a353a1db2b9a28e229f872593323659c9f5ab9cc426d0c58a29060600160405180910390a4505050505050565b61082b612cae565b610833612d08565b565b61083d612d5a565b61019360009054906101000a90046001600160a01b03166001600160a01b0316639850d32b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b591906140d8565b6001600160a01b0316336001600160a01b0316146109075760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b60448201526064016104a4565b8381146109565760405162461bcd60e51b815260206004820152601e60248201527f4d69736d6174636865642077696e6e65727320616e6420616d6f756e7473000060448201526064016104a4565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa1580156109a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c591906140d8565b60405163aba869c560e01b8152600481018a90526001600160a01b0386811660248301529192509082169063aba869c590604401602060405180830381865afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a91906140f5565b610a865760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e00000060448201526064016104a4565b610a9588888888888888612dad565b6000888152610191602090815260408083208a845282528083206001600160a01b038816845290915290208054600390910154610ad2919061412d565b6000898152610191602090815260408083208b845282528083206001600160a01b038916845290915290206002810154600190910154610b12919061412d565b1115610b605760405162461bcd60e51b815260206004820152601560248201527f5072697a6520616d6f756e74206578636565646564000000000000000000000060448201526064016104a4565b836001600160a01b031687897f6b4488e823ebb77fdc3a58bb5cbc1af38a0b2e39ff4dc84c080c08540dcd1ebc338a8a8989604051610ba39594939291906141dd565b60405180910390a45050505050505050565b610bbd612cae565b6108336000613432565b610bcf612cae565b610833613491565b610bdf612d5a565b610be76134ce565b61019360009054906101000a90046001600160a01b03166001600160a01b0316639850d32b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f91906140d8565b6001600160a01b0316336001600160a01b031614610cb15760405162461bcd60e51b815260206004820152600f60248201526e27b7363c9036b0b4b73a30b4b732b960891b60448201526064016104a4565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d2991906140d8565b60405163aba869c560e01b8152600481018c90526001600160a01b038881166024830152919091169063aba869c590604401602060405180830381865afa158015610d78573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9c91906140f5565b610de85760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e00000060448201526064016104a4565b846102d11480610df9575084610483145b610e3b5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b60448201526064016104a4565b8683148015610e4957508281145b610e955760405162461bcd60e51b815260206004820181905260248201527f4d69736d617463686564204e465420646973747269627574696f6e206461746160448201526064016104a4565b6000856102d1141561128d576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906140f5565b610f555760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b888110156112415760008c8152610192602090815260408083208e845282528083206001600160a01b038c168452909152812090878784818110610f9e57610f9e61421f565b90506020020135815260200190815260200160002060010154600114801561101c575060008c8152610192602090815260408083208e845282528083206001600160a01b038c168452909152812090878784818110610fff57610fff61421f565b905060200201358152602001908152602001600020600001546000145b6110775760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b60648201526084016104a4565b60008c8152610192602090815260408083208e845282528083206001600160a01b038c16845290915281206001918888858181106110b7576110b761421f565b905060200201358152602001908152602001600020600001819055508383828181106110e5576110e561421f565b90506020020135826110f7919061412d565b9150876001600160a01b03166342842e0e308c8c8581811061111b5761111b61421f565b90506020020160208101906111309190614052565b8989868181106111425761114261421f565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b15801561119957600080fd5b505af19250505080156111aa575060015b61122f5760008c8152610192602090815260408083208e845282528083206001600160a01b038c1684529091528120818888858181106111ec576111ec61421f565b9050602002013581526020019081526020016000206000018190555083838281811061121a5761121a61421f565b905060200201358261122c9190614235565b91505b806112398161424c565b915050610f58565b508088146112885760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b60448201526064016104a4565b6116da565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc91906140f5565b6113415760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b888110156116d85783838281811061135e5761135e61421f565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008888858181106113c1576113c161421f565b9050602002013581526020019081526020016000206000015461019260008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008989868181106114365761143661421f565b905060200201358152602001908152602001600020600101546114599190614235565b10156114b65760405162461bcd60e51b815260206004820152602660248201527f4e4654207072697a6520646973747269627574696f6e20616d6f756e7420657860448201526518d95959195960d21b60648201526084016104a4565b8383828181106114c8576114c861421f565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b03168152602001908152602001600020600088888581811061152b5761152b61421f565b9050602002013581526020019081526020016000206000016000828254611552919061412d565b90915550506001600160a01b03881663f242432a308c8c858181106115795761157961421f565b905060200201602081019061158e9190614052565b8989868181106115a0576115a061421f565b905060200201358888878181106115b9576115b961421f565b90506020020135604051806020016040528060008152506040518663ffffffff1660e01b81526004016115f09594939291906142bf565b600060405180830381600087803b15801561160a57600080fd5b505af192505050801561161b575060015b6116c6578383828181106116315761163161421f565b9050602002013561019260008e815260200190815260200160002060008d815260200190815260200160002060008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008888858181106116945761169461421f565b90506020020135815260200190815260200160002060000160008282546116bb9190614235565b909155506116c69050565b806116d08161424c565b915050611344565b505b866001600160a01b03168a8c7fa825c8731f1dfe5c99472b7e94c839c9e6489ed55d0277366e867d8d88a306cf338d8d8c8c8c8c8c6040516117239897969594939291906142f7565b60405180910390a4506117366001606555565b50505050505050505050565b61019360009054906101000a90046001600160a01b03166001600160a01b031663d33219b46040518163ffffffff1660e01b8152600401602060405180830381865afa158015611796573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ba91906140d8565b6001600160a01b0316336001600160a01b03161461181a5760405162461bcd60e51b815260206004820152600d60248201527f4f6e6c792074696d656c6f636b0000000000000000000000000000000000000060448201526064016104a4565b60008481526101916020908152604080832086845282528083206001600160a01b03861684529091529020600301548111156118985760405162461bcd60e51b815260206004820152601260248201527f496e73756666696369656e74207072697a65000000000000000000000000000060448201526064016104a4565b60008481526101916020908152604080832086845282528083206001600160a01b0386168085529252909120600301805483900390556118d990868361352f565b604080513381526001600160a01b03878116602083015291810183905290831690849086907fe64a3a357c20289b8fff53d7fabedc1fec8b86c76f070a66dd167c055e43e38d9060600160405180910390a45050505050565b61193a612d5a565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015611985573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a991906140d8565b604051633586597160e01b815260048101869052602481018590526001600160a01b0384811660448301529190911690633586597190606401602060405180830381865afa1580156119ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a239190614357565b905060008111611a755760405162461bcd60e51b815260206004820152601560248201527f496e76616c6964206465706f73697420746f6b656e000000000000000000000060448201526064016104a4565b611a8a6001600160a01b038316333084612c28565b60008481526101916020908152604080832086845282528083206001600160a01b038616845290915281208054839290611ac590849061412d565b909155505060408051338152602081018390526001600160a01b03841691859187917f3360a6f28beae2ecd8c3c807e274aaae13fd8264155337e6d0535a44468f0942910160405180910390a450505050565b6033546001600160a01b0316331480611bb9575061019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ba491906140d8565b6001600160a01b0316336001600160a01b0316145b611c055760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c79206f776e6572206f722047616d65526567697374727900000000000060448201526064016104a4565b61019360009054906101000a90046001600160a01b03166001600160a01b031663da0907556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7d91906140d8565b60405163aba869c560e01b8152600481018a90526001600160a01b038881166024830152919091169063aba869c590604401602060405180830381865afa158015611ccc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf091906140f5565b611d3c5760405162461bcd60e51b815260206004820152601d60248201527f446973616c6c6f77656420646973747269627574696f6e20746f6b656e00000060448201526064016104a4565b6001600160a01b038616611d8b5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b846102d11480611d9c575084610483145b611dde5760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b60448201526064016104a4565b828114611e2d5760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f736974206461746100000000000000000060448201526064016104a4565b6000856102d1141561206b576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015611e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ea891906140f5565b611eed5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b8481101561201f57876001600160a01b03166342842e0e8c30898986818110611f1b57611f1b61421f565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b158015611f7257600080fd5b505af1158015611f86573d6000803e3d6000fd5b50505060008b8152610192602090815260408083208d845282528083206001600160a01b038d16845290915281206001925090888885818110611fcb57611fcb61421f565b90506020020135815260200190815260200160002060010181905550838382818110611ff957611ff961421f565b905060200201358261200b919061412d565b9150806120178161424c565b915050611ef0565b508084146120665760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b60448201526064016104a4565b61223a565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa1580156120b6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120da91906140f5565b61211f5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612163918e9130918b918b918b918b9190600401614370565b600060405180830381600087803b15801561217d57600080fd5b505af1158015612191573d6000803e3d6000fd5b5050505060005b84811015612238578383828181106121b2576121b261421f565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f1684528252822092029390930135929091508888858181106121f9576121f961421f565b9050602002013581526020019081526020016000206001016000828254612220919061412d565b909155508190506122308161424c565b915050612198565b505b866001600160a01b0316888a7f8aa5f867116bd0007022fe5e2205d78c5a5922c47331762e9e69ce2c9a8f6a95338e8b8b8b8b8b60405161228197969594939291906143d2565b60405180910390a450505050505050505050565b600054610100900460ff16158080156122b55750600054600160ff909116105b806122cf5750303b1580156122cf575060005460ff166001145b6123415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104a4565b6000805460ff191660011790558015612364576000805461ff0019166101001790555b61236c613564565b6123746135d7565b61237c61364a565b6123846136bd565b61238c6136bd565b6001600160a01b0382166123e25760405162461bcd60e51b815260206004820152601760248201527f496e76616c69642041646472657373526567697374727900000000000000000060448201526064016104a4565b610193805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0384161790558015612451576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b61245d6134ce565b612465612cae565b846102d11480612476575084610483145b6124b85760405162461bcd60e51b8152602060048201526013602482015272556e6578706563746564204e4654207479706560681b60448201526064016104a4565b8281146125075760405162461bcd60e51b815260206004820152601760248201527f4d69736d617463686564206465706f736974206461746100000000000000000060448201526064016104a4565b6000856102d1141561284a576040516301ffc9a760e01b81526380ac58cd60e01b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa15801561255e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258291906140f5565b6125c75760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b848110156127fe5760008a8152610192602090815260408083208c845282528083206001600160a01b038c1684529091528120908787848181106126105761261061421f565b602090810292909201358352508181019290925260409081016000908120548d825261019284528282208d835284528282206001600160a01b038d168352909352908120908888858181106126675761266761421f565b9050602002013581526020019081526020016000206001015461268a9190614235565b6001146126d95760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a650000000000000000000060448201526064016104a4565b60008a8152610192602090815260408083208c845282528083206001600160a01b038c1684529091528120818888858181106127175761271761421f565b905060200201358152602001908152602001600020600101819055508383828181106127455761274561421f565b9050602002013582612757919061412d565b9150876001600160a01b03166342842e0e308d89898681811061277c5761277c61421f565b6040516001600160e01b031960e088901b1681526001600160a01b03958616600482015294909316602485015250602090910201356044820152606401600060405180830381600087803b1580156127d357600080fd5b505af11580156127e7573d6000803e3d6000fd5b5050505080806127f69061424c565b9150506125ca565b508084146128455760405162461bcd60e51b8152602060048201526014602482015273496e76616c696420616d6f756e742076616c756560601b60448201526064016104a4565b612b33565b6040516301ffc9a760e01b8152636cdb3d1360e11b60048201526001600160a01b038816906301ffc9a790602401602060405180830381865afa158015612895573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128b991906140f5565b6128fe5760405162461bcd60e51b8152602060048201526016602482015275556e6578706563746564204e4654206164647265737360501b60448201526064016104a4565b60005b84811015612abb5783838281811061291b5761291b61421f565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f1684528252822092029390930135929091508888858181106129625761296261421f565b602090810292909201358352508181019290925260409081016000908120548e825261019284528282208e835284528282206001600160a01b038e168352909352908120908989868181106129b9576129b961421f565b905060200201358152602001908152602001600020600101546129dc9190614235565b1015612a2a5760405162461bcd60e51b815260206004820152601660248201527f496e73756666696369656e74204e4654207072697a650000000000000000000060448201526064016104a4565b838382818110612a3c57612a3c61421f565b60008d8152610192602090815260408083208f845282528083206001600160a01b038f168452825282209202939093013592909150888885818110612a8357612a8361421f565b905060200201358152602001908152602001600020600101600082825403925050819055508080612ab39061424c565b915050612901565b5060408051602081018252600081529051631759616b60e11b81526001600160a01b03891691632eb2c2d691612b009130918f918b918b918b918b9190600401614370565b600060405180830381600087803b158015612b1a57600080fd5b505af1158015612b2e573d6000803e3d6000fd5b505050505b866001600160a01b0316888a7f5a8dca5c67110aaf25dc3f613084907009569128e7e31216a0802dce0db9c784338e8b8b8b8b8b604051612b7a97969594939291906143d2565b60405180910390a450612b8d6001606555565b505050505050505050565b612ba0612cae565b6001600160a01b038116612c1c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104a4565b612c2581613432565b50565b6040516001600160a01b0380851660248301528316604482015260648101829052612ca89085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990931692909217909152613728565b50505050565b6033546001600160a01b031633146108335760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104a4565b612d1061380d565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60975460ff16156108335760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104a4565b610193546040805163da09075560e01b815290516000926001600160a01b03169163da0907559160048083019260209291908290030181865afa158015612df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e1c91906140d8565b90506000806000805b8881101561324f5760008a8a83818110612e4157612e4161421f565b9050602002016020810190612e569190614052565b6001600160a01b03161415612ead5760405162461bcd60e51b815260206004820181905260248201527f57696e6e657220616464726573732073686f756c6420626520646566696e656460448201526064016104a4565b868682818110612ebf57612ebf61421f565b9050602002013560001415612f3c5760405162461bcd60e51b815260206004820152602960248201527f57696e6e657220616d6f756e742073686f756c6420626520677265617465722060448201527f7468616e207a65726f000000000000000000000000000000000000000000000060648201526084016104a4565b6000878783818110612f5057612f5061421f565b90506020020135905060006103e8876001600160a01b03166326232a2e6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612f9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fc29190614357565b8a8a86818110612fd457612fd461421f565b90506020020135612fe59190614418565b612fef9190614437565b9050612ffb818761412d565b95506130078183614235565b9150506000866001600160a01b031663a7ab05498f8f6040518363ffffffff1660e01b8152600401613043929190918252602082015260400190565b602060405180830381865afa158015613060573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130849190614357565b905060006103e8828b8b8781811061309e5761309e61421f565b905060200201356130af9190614418565b6130b99190614437565b90506130c5818761412d565b95506130d18184614235565b925050506000866001600160a01b03166322871dcd8f8f6040518363ffffffff1660e01b815260040161310e929190918252602082015260400190565b602060405180830381865afa15801561312b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061314f9190614357565b905060006103e8828b8b878181106131695761316961421f565b9050602002013561317a9190614418565b6131849190614437565b9050613190818661412d565b945061319c8184614235565b925050508061019160008f815260200190815260200160002060008e815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060010160008282546131fb919061412d565b9091555061323c90508b8b848181106132165761321661421f565b905060200201602081019061322b9190614052565b6001600160a01b038b16908361352f565b50806132478161424c565b915050612e25565b508061325b838561412d565b613265919061412d565b60008c8152610191602090815260408083208e845282528083206001600160a01b038c168452909152812060020180549091906132a390849061412d565b92505081905550613322846001600160a01b031663469048406040518163ffffffff1660e01b81526004016020604051808303816000875af11580156132ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061331191906140d8565b6001600160a01b038916908561352f565b6040516366f4688560e11b8152600481018c90526133a0906001600160a01b0386169063cde8d10a90602401602060405180830381865afa15801561336b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061338f91906140d8565b6001600160a01b038916908461352f565b60405163f406c2d160e01b8152600481018c9052602481018b9052613425906001600160a01b0386169063f406c2d190604401602060405180830381865afa1580156133f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061341491906140d8565b6001600160a01b038916908361352f565b5050505050505050505050565b603380546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b613499612d5a565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612d3d3390565b600260655414156135215760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016104a4565b6002606555565b6001606555565b6040516001600160a01b03831660248201526044810182905261355f90849063a9059cbb60e01b90606401612c5c565b505050565b600054610100900460ff166135cf5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b61083361385f565b600054610100900460ff166136425760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b6108336138d3565b600054610100900460ff166136b55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b61083361393e565b600054610100900460ff166108335760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b600061377d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166139b59092919063ffffffff16565b80519091501561355f578080602001905181019061379b91906140f5565b61355f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016104a4565b60975460ff166108335760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104a4565b600054610100900460ff166138ca5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b61083333613432565b600054610100900460ff166135285760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b600054610100900460ff166139a95760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b60648201526084016104a4565b6097805460ff19169055565b60606103b3848460008585600080866001600160a01b031685876040516139dc9190614459565b60006040518083038185875af1925050503d8060008114613a19576040519150601f19603f3d011682016040523d82523d6000602084013e613a1e565b606091505b5091509150613a2f87838387613a3a565b979650505050505050565b60608315613aa6578251613a9f576001600160a01b0385163b613a9f5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104a4565b50816103b3565b6103b38383815115613abb5781518083602001fd5b8060405162461bcd60e51b81526004016104a49190614475565b600060208284031215613ae757600080fd5b81356001600160e01b031981168114613aff57600080fd5b9392505050565b6001600160a01b0381168114612c2557600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613b5a57613b5a613b1b565b604052919050565b600082601f830112613b7357600080fd5b813567ffffffffffffffff811115613b8d57613b8d613b1b565b613ba0601f8201601f1916602001613b31565b818152846020838601011115613bb557600080fd5b816020850160208301376000918101602001919091529392505050565b60008060008060808587031215613be857600080fd5b8435613bf381613b06565b93506020850135613c0381613b06565b925060408501359150606085013567ffffffffffffffff811115613c2657600080fd5b613c3287828801613b62565b91505092959194509250565b600080600080600060a08688031215613c5657600080fd5b8535613c6181613b06565b945060208601359350604086013592506060860135613c7f81613b06565b949793965091946080013592915050565b60008083601f840112613ca257600080fd5b50813567ffffffffffffffff811115613cba57600080fd5b6020830191508360208260051b8501011115613cd557600080fd5b9250929050565b600080600080600080600060a0888a031215613cf757600080fd5b8735965060208801359550604088013567ffffffffffffffff80821115613d1d57600080fd5b613d298b838c01613c90565b909750955060608a01359150613d3e82613b06565b90935060808901359080821115613d5457600080fd5b50613d618a828b01613c90565b989b979a50959850939692959293505050565b60008060008060008060008060008060e08b8d031215613d9357600080fd5b8a35995060208b0135985060408b013567ffffffffffffffff80821115613db957600080fd5b613dc58e838f01613c90565b909a50985060608d01359150613dda82613b06565b90965060808c0135955060a08c01359080821115613df757600080fd5b613e038e838f01613c90565b909650945060c08d0135915080821115613e1c57600080fd5b50613e298d828e01613c90565b915080935050809150509295989b9194979a5092959850565b600080600060608486031215613e5757600080fd5b83359250602084013591506040840135613e7081613b06565b809150509250925092565b600080600080600080600080600060e08a8c031215613e9957600080fd5b8935613ea481613b06565b985060208a0135975060408a0135965060608a0135613ec281613b06565b955060808a0135945060a08a013567ffffffffffffffff80821115613ee657600080fd5b613ef28d838e01613c90565b909650945060c08c0135915080821115613f0b57600080fd5b50613f188c828d01613c90565b915080935050809150509295985092959850929598565b600082601f830112613f4057600080fd5b8135602067ffffffffffffffff821115613f5c57613f5c613b1b565b8160051b613f6b828201613b31565b9283528481018201928281019087851115613f8557600080fd5b83870192505b84831015613a2f57823582529183019190830190613f8b565b600080600080600060a08688031215613fbc57600080fd5b8535613fc781613b06565b94506020860135613fd781613b06565b9350604086013567ffffffffffffffff80821115613ff457600080fd5b61400089838a01613f2f565b9450606088013591508082111561401657600080fd5b61402289838a01613f2f565b9350608088013591508082111561403857600080fd5b5061404588828901613b62565b9150509295509295909350565b60006020828403121561406457600080fd5b8135613aff81613b06565b600080600080600060a0868803121561408757600080fd5b853561409281613b06565b945060208601356140a281613b06565b93506040860135925060608601359150608086013567ffffffffffffffff8111156140cc57600080fd5b61404588828901613b62565b6000602082840312156140ea57600080fd5b8151613aff81613b06565b60006020828403121561410757600080fd5b81518015158114613aff57600080fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561414057614140614117565b500190565b8183526000602080850194508260005b8581101561418357813561416881613b06565b6001600160a01b031687529582019590820190600101614155565b509495945050505050565b81835260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156141c057600080fd5b8260051b8083602087013760009401602001938452509192915050565b6001600160a01b0386168152606060208201526000614200606083018688614145565b828103604084015261421381858761418e565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b60008282101561424757614247614117565b500390565b600060001982141561426057614260614117565b5060010190565b60005b8381101561428257818101518382015260200161426a565b83811115612ca85750506000910152565b600081518084526142ab816020860160208601614267565b601f01601f19169290920160200192915050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a06080830152613a2f60a0830184614293565b6001600160a01b038916815260a06020820152600061431a60a08301898b614145565b876040840152828103606084015261433381878961418e565b9050828103608084015261434881858761418e565b9b9a5050505050505050505050565b60006020828403121561436957600080fd5b5051919050565b60006001600160a01b03808a16835280891660208401525060a0604083015261439d60a08301878961418e565b82810360608401526143b081868861418e565b905082810360808401526143c48185614293565b9a9950505050505050505050565b60006001600160a01b03808a16835280891660208401525086604083015260a0606083015261440560a08301868861418e565b82810360808401526143c481858761418e565b600081600019048311821515161561443257614432614117565b500290565b60008261445457634e487b7160e01b600052601260045260246000fd5b500490565b6000825161446b818460208701614267565b9190910192915050565b602081526000613aff602083018461429356fea26469706673582212203e4dd33329653912df891506186b7ea1080f3d99f8e63fb1418d32cba753ac3964736f6c634300080b0033",
  "devdoc": {
    "author": "David Lee",
    "kind": "dev",
    "methods": {
      "deposit(uint256,uint256,address)": {
        "details": "Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit",
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Token address to deposit"
        }
      },
      "depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "details": "NFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_from": "NFT owner address",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_tokenIds": "Token Id list"
        }
      },
      "depositPrize(address,uint256,uint256,address,uint256)": {
        "details": "Only tokens which are allowed as a distributable token can be depositedPrize is transferred from _depositor address to this contract",
        "params": {
          "_amount": "Prize amount to deposit",
          "_depositor": "Depositor address",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Prize token address"
        }
      },
      "distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])": {
        "details": "Only maintainerNFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_tokenIds": "Token Id list",
          "_winners": "Winners list"
        }
      },
      "distributePrize(uint256,uint256,address[],address,uint256[])": {
        "details": "Only maintainerThe maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited",
        "params": {
          "_amounts": "Prize list",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Prize token address",
          "_winners": "Winners list"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Only owner"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Only owner"
      },
      "withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "details": "Only ownerNFT type should be either 721 or 1155",
        "params": {
          "_amounts": "Token amount list",
          "_gid": "Game ID",
          "_nftAddress": "NFT address",
          "_nftType": "NFT type (721/1155)",
          "_tid": "Tournament ID",
          "_to": "NFT receiver address",
          "_tokenIds": "Token Id list"
        }
      },
      "withdrawPrize(address,uint256,uint256,address,uint256)": {
        "details": "Only owner",
        "params": {
          "_amount": "Prize amount to withdraw",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_to": "Beneficiary address",
          "_token": "Prize token address"
        }
      }
    },
    "stateVariables": {
      "addressRegistry": {
        "details": "AddressRegistry"
      },
      "tournamentNftPrizes": {
        "details": "Game ID -> Tournament ID -> NFT Address -> Token ID -> Tournament NFT prizes"
      },
      "tournamentTokens": {
        "details": "Game ID -> Tournament ID -> Token Address -> Tournament tokens"
      }
    },
    "title": "Oparcade",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deposit(uint256,uint256,address)": {
        "notice": "Deposit ERC20 tokens from user"
      },
      "depositNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "notice": "Deposit NFT prize for the specific game/tournament"
      },
      "depositPrize(address,uint256,uint256,address,uint256)": {
        "notice": "Deposit the prize tokens for the specific game/tournament"
      },
      "distributeNFTPrize(uint256,uint256,address[],address,uint256,uint256[],uint256[])": {
        "notice": "Distribute winners' NFT prizes"
      },
      "distributePrize(uint256,uint256,address[],address,uint256[])": {
        "notice": "Distribute winners their prizes"
      },
      "pause()": {
        "notice": "Pause Oparcade"
      },
      "unpause()": {
        "notice": "Resume Oparcade"
      },
      "withdrawNFTPrize(address,uint256,uint256,address,uint256,uint256[],uint256[])": {
        "notice": "Withdraw NFT prize for the specific game/tournament"
      },
      "withdrawPrize(address,uint256,uint256,address,uint256)": {
        "notice": "Withdraw the prize tokens from the specific game/tournament"
      }
    },
    "notice": "This contract manages token deposit/distribution from/to the users playing the game/tournament",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 547,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 550,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2098,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 419,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 539,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 850,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 908,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 730,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 835,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1772,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "201",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2317,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1196,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "301",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1142,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 11127,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "tournamentTokens",
        "offset": 0,
        "slot": "401",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_struct(TournamentToken)11117_storage)))"
      },
      {
        "astId": 11144,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "tournamentNftPrizes",
        "offset": 0,
        "slot": "402",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)11132_storage))))"
      },
      {
        "astId": 11148,
        "contract": "contracts/Oparcade.sol:Oparcade",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "403",
        "type": "t_contract(IAddressRegistry)12677"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAddressRegistry)12677": {
        "encoding": "inplace",
        "label": "contract IAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)11132_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct Oparcade.TournamentNftPrize))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(TournamentNftPrize)11132_storage)"
      },
      "t_mapping(t_address,t_struct(TournamentToken)11117_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Oparcade.TournamentToken)",
        "numberOfBytes": "32",
        "value": "t_struct(TournamentToken)11117_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)11132_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => mapping(uint256 => struct Oparcade.TournamentNftPrize)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)11132_storage))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(TournamentToken)11117_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct Oparcade.TournamentToken))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(TournamentToken)11117_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)11132_storage))))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => mapping(uint256 => struct Oparcade.TournamentNftPrize))))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_mapping(t_uint256,t_struct(TournamentNftPrize)11132_storage)))"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_mapping(t_address,t_struct(TournamentToken)11117_storage)))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => mapping(address => struct Oparcade.TournamentToken)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_struct(TournamentToken)11117_storage))"
      },
      "t_mapping(t_uint256,t_struct(TournamentNftPrize)11132_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Oparcade.TournamentNftPrize)",
        "numberOfBytes": "32",
        "value": "t_struct(TournamentNftPrize)11132_storage"
      },
      "t_struct(TournamentNftPrize)11132_storage": {
        "encoding": "inplace",
        "label": "struct Oparcade.TournamentNftPrize",
        "members": [
          {
            "astId": 11129,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalDistribution",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11131,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalDeposit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TournamentToken)11117_storage": {
        "encoding": "inplace",
        "label": "struct Oparcade.TournamentToken",
        "members": [
          {
            "astId": 11110,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalUserDeposit",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11112,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalPrizeDistribution",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11114,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalPrizeFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 11116,
            "contract": "contracts/Oparcade.sol:Oparcade",
            "label": "totalPrizeDeposit",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}