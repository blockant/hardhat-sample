{
  "address": "0xE1Ce5e28dda4afa79DFA42EcFce8Ab7E60870883",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldBaseGameCreatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBaseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "BaseGameCreatorFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tournamentName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "DepositAmountUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "oldStatus",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "DistributableTokenAddressUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "GameAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldGameCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGameCreator",
          "type": "address"
        }
      ],
      "name": "GameCreatorUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "gameName",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameCreator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "baseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "GameRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldPlatformFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newFeeRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newPlatformFee",
          "type": "uint256"
        }
      ],
      "name": "PlatformFeeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tournamentName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "appliedGameCreatorFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tournamentCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "TournamentCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldTournamentCreationFeeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTournamentCreationFeeAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newTournamentCreationFeeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTournamentCreationFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "TournamentCreationFeeUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GAME_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TOURNAMENT_MANAGER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_gameName",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_gameCreator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_baseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "addGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressRegistry",
      "outputs": [
        {
          "internalType": "contract IAddressRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tournamentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposedGameCreatorFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "createTournamentByDAO",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tournamentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposedGameCreatorFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreatorFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameRegistry.Token",
          "name": "_depositToken",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_distributionTokenAddress",
          "type": "address"
        }
      ],
      "name": "createTournamentByDAOWithTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tournamentName",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_proposedGameCreatorFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreatorFee",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameRegistry.Token",
          "name": "_depositToken",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "internalType": "struct GameRegistry.Token",
          "name": "_tokenToAddPrizePool",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "_nftAddressToAddPrizePool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nftTypeToAddPrizePool",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_tokenIdsToAddPrizePool",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amountsToAddPrizePool",
          "type": "uint256[]"
        }
      ],
      "name": "createTournamentByUser",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tid",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "games",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "creatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "baseCreatorFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isDeprecated",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "tournamentsCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "getAppliedGameCreatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "getDepositTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getDepositTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getDistributableTokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getGameBaseCreatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getGameCreatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getGameName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "getTournamentCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "getTournamentCreator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "getTournamentCreatorFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        }
      ],
      "name": "getTournamentName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_addressRegistry",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tournamentCreationFeeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreationFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        }
      ],
      "name": "isDistributable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "isGameDeprecated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        }
      ],
      "name": "removeGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentCreationFeeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tournamentCreationFeeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseGameCreatorFee",
          "type": "uint256"
        }
      ],
      "name": "updateBaseGameCreatorFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "updateDepositTokenAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isDistributable",
          "type": "bool"
        }
      ],
      "name": "updateDistributableTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_gameCreator",
          "type": "address"
        }
      ],
      "name": "updateGameCreator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_platformFee",
          "type": "uint256"
        }
      ],
      "name": "updatePlatformFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tournamentCreationFeeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tournamentCreationFeeAmount",
          "type": "uint256"
        }
      ],
      "name": "updateTournamentCreationFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdcddd8a111a6b1403533bd12a32e31a223c78c14eb84acf4c9b685a085fed33a",
  "receipt": {
    "to": null,
    "from": "0xC1580afC68C82E110325b09313e059a8F5Cd68E9",
    "contractAddress": "0xE1Ce5e28dda4afa79DFA42EcFce8Ab7E60870883",
    "transactionIndex": 90,
    "gasUsed": "4009346",
    "logsBloom": "0x
    "blockHash": "0xcc14005a03deee55a882257fbd4c247bc1f3a7b23fdd10dbe723e35b4a607c68",
    "transactionHash": "0xdcddd8a111a6b1403533bd12a32e31a223c78c14eb84acf4c9b685a085fed33a",
    "logs": [
      {
        "transactionIndex": 90,
        "blockNumber": 35419573,
        "transactionHash": "0xdcddd8a111a6b1403533bd12a32e31a223c78c14eb84acf4c9b685a085fed33a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c1580afc68c82e110325b09313e059a8f5cd68e9",
          "0x000000000000000000000000ef46d5fe753c988606e6f703260d816af53b03eb"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001b72058f84424b200000000000000000000000000000000000000000000000037f28a828b0e4aa200000000000000000000000000000000000000000000398b134399c2b358bb72000000000000000000000000000000000000000000000000363b6a2992ca25f000000000000000000000000000000000000000000000398b14faba1bab9ce024",
        "logIndex": 396,
        "blockHash": "0xcc14005a03deee55a882257fbd4c247bc1f3a7b23fdd10dbe723e35b4a607c68"
      }
    ],
    "blockNumber": 35419573,
    "cumulativeGasUsed": "17019198",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1f056055441669d784e7e6671908d28c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldBaseGameCreatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBaseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"BaseGameCreatorFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tournamentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"DistributableTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"GameAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldGameCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGameCreator\",\"type\":\"address\"}],\"name\":\"GameCreatorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"gameName\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameCreator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"GameRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPlatformFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newFeeRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPlatformFee\",\"type\":\"uint256\"}],\"name\":\"PlatformFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tournamentName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"appliedGameCreatorFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tournamentCreatorFee\",\"type\":\"uint256\"}],\"name\":\"TournamentCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldTournamentCreationFeeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTournamentCreationFeeAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newTournamentCreationFeeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTournamentCreationFeeAmount\",\"type\":\"uint256\"}],\"name\":\"TournamentCreationFeeUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAME_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TOURNAMENT_MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_gameName\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_gameCreator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_baseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"addGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressRegistry\",\"outputs\":[{\"internalType\":\"contract IAddressRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tournamentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposedGameCreatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreatorFee\",\"type\":\"uint256\"}],\"name\":\"createTournamentByDAO\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tournamentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposedGameCreatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreatorFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameRegistry.Token\",\"name\":\"_depositToken\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_distributionTokenAddress\",\"type\":\"address\"}],\"name\":\"createTournamentByDAOWithTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tournamentName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_proposedGameCreatorFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreatorFee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameRegistry.Token\",\"name\":\"_depositToken\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct GameRegistry.Token\",\"name\":\"_tokenToAddPrizePool\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"_nftAddressToAddPrizePool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nftTypeToAddPrizePool\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIdsToAddPrizePool\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amountsToAddPrizePool\",\"type\":\"uint256[]\"}],\"name\":\"createTournamentByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tid\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"creatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"baseCreatorFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDeprecated\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tournamentsCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"getAppliedGameCreatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getDepositTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getDepositTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getDistributableTokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getGameBaseCreatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getGameCreatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getGameName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"getTournamentCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"getTournamentCreator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"getTournamentCreatorFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"}],\"name\":\"getTournamentName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addressRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tournamentCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreationFeeAmount\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isDistributable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"isGameDeprecated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"}],\"name\":\"removeGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentCreationFeeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tournamentCreationFeeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseGameCreatorFee\",\"type\":\"uint256\"}],\"name\":\"updateBaseGameCreatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateDepositTokenAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isDistributable\",\"type\":\"bool\"}],\"name\":\"updateDistributableTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gameCreator\",\"type\":\"address\"}],\"name\":\"updateGameCreator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tournamentCreationFeeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tournamentCreationFeeAmount\",\"type\":\"uint256\"}],\"name\":\"updateTournamentCreationFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"David Lee\",\"kind\":\"dev\",\"methods\":{\"addGame(string,address,uint256)\":{\"details\":\"Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the gameWhen creating the tournament of the game, the game creator fee can be proposed by the tournament creatorbut the proposed value can't be less than the base oneIf the proposed game creator fee is 0, the base game creator fee will be applied\",\"params\":{\"_baseGameCreatorFee\":\"Base game creator fee\",\"_gameCreator\":\"Game creator address\",\"_gameName\":\"Game name to add\"}},\"createTournamentByDAO(uint256,string,uint256,uint256)\":{\"details\":\"Only ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedThe prize pool for the tournament that the owner created is initialized on Oparcade contract\",\"params\":{\"_gid\":\"Game ID\",\"_proposedGameCreatorFee\":\"Proposed game creator fee\",\"_tournamentCreatorFee\":\"Tournament creator fee\"},\"returns\":{\"tid\":\"Tournament ID created\"}},\"createTournamentByDAOWithTokens(uint256,string,uint256,uint256,(address,uint256),address)\":{\"details\":\"Only ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedThe prize pool for the tournament that the owner created is initialized on Oparcade contract\",\"params\":{\"_depositToken\":\"Token to allow/disallow the deposit\",\"_distributionTokenAddress\":\"Distribution token address to be set to active\",\"_gid\":\"Game ID\",\"_proposedGameCreatorFee\":\"Proposed game creator fee\",\"_tournamentCreatorFee\":\"Tournament creator fee\"},\"returns\":{\"tid\":\"Tournament ID created\"}},\"createTournamentByUser(uint256,string,uint256,uint256,(address,uint256),(address,uint256),address,uint256,uint256[],uint256[])\":{\"details\":\"Anyone can create the tournament and initialize the prize pool with tokens and NFTsTournament creator should set all params necessary for the tournament in 1 tx andthe params set is immutable. It will be prevent the fraud tournament is createdTournament creator should pay fees to create the tournamentand the fee token address and fee token amount are set by the ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedNFT type to initialize the prize pool should be either 721 or 1155\",\"params\":{\"_amountsToAddPrizePool\":\"NFT token amount list to initialize the prize pool\",\"_depositToken\":\"Deposit token (address and amount) for playing the tournament\",\"_gid\":\"Game ID\",\"_nftAddressToAddPrizePool\":\"NFT address to initialize the prize pool\",\"_nftTypeToAddPrizePool\":\"NFT type to initialize the prize pool\",\"_proposedGameCreatorFee\":\"Proposed game creator fee\",\"_tokenIdsToAddPrizePool\":\"NFT token Id list to initialize the prize pool\",\"_tokenToAddPrizePool\":\"Token (address and amount) to initialize the prize pool\",\"_tournamentCreatorFee\":\"Tournament creator fee\"},\"returns\":{\"tid\":\"Tournament ID created\"}},\"gameCount()\":{\"returns\":{\"_0\":\"(uint256) Amount of games created\"}},\"getAppliedGameCreatorFee(uint256,uint256)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\"},\"returns\":{\"_0\":\"(string) Game applied game creator fee of a tournament\"}},\"getDepositTokenAmount(uint256,uint256,address)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_tokenAddress\":\"token address\"},\"returns\":{\"_0\":\"(uint256) Tournament deposit token amount\"}},\"getDepositTokenList(uint256)\":{\"params\":{\"\":\"(address[]) Deposit token list of the game\",\"_gid\":\"Game ID\"}},\"getDistributableTokenList(uint256)\":{\"params\":{\"\":\"(address[]) Distributable token list of the game\",\"_gid\":\"Game ID\"}},\"getGameBaseCreatorFee(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(uint256) Game creator fee\"}},\"getGameCreatorAddress(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(string) Game creator address\"}},\"getGameName(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(string) Game name\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getTournamentCount(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(uint256) Number of the tournament\"}},\"getTournamentCreator(uint256,uint256)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\"},\"returns\":{\"_0\":\"(address) Tournament creator address\"}},\"getTournamentCreatorFee(uint256,uint256)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\"},\"returns\":{\"_0\":\"(uint256) Tournament creator fee\"}},\"getTournamentName(uint256,uint256)\":{\"params\":{\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\"},\"returns\":{\"_0\":\"(string) Tournament name\"}},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isDistributable(uint256,address)\":{\"params\":{\"_gid\":\"Game ID\",\"_tokenAddress\":\"token address\"},\"returns\":{\"_0\":\"(uint256) Is token distributable\"}},\"isGameDeprecated(uint256)\":{\"params\":{\"_gid\":\"Game ID\"},\"returns\":{\"_0\":\"(bool) Is deprecated\"}},\"removeGame(uint256)\":{\"details\":\"Game is not removed from the games array, just set it deprecated\",\"params\":{\"_gid\":\"Game ID\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"updateBaseGameCreatorFee(uint256,uint256)\":{\"details\":\"Tournament creator fee is the royality that will be transferred to the tournament creator addressTournament creator can propose the game creator fee when creating the tournamentbut it can't be less than the base game creator fee\",\"params\":{\"_baseGameCreatorFee\":\"Base game creator fee\",\"_gid\":\"Game ID\"}},\"updateDepositTokenAmount(uint256,uint256,address,uint256)\":{\"details\":\"Only ownerOnly tokens with an amount greater than zero is valid for the deposit\",\"params\":{\"_amount\":\"Token amount\",\"_gid\":\"Game ID\",\"_tid\":\"Tournament ID\",\"_token\":\"Token address to allow/disallow the deposit\"}},\"updateDistributableTokenAddress(uint256,address,bool)\":{\"details\":\"Only owner\",\"params\":{\"_gid\":\"Game ID\",\"_isDistributable\":\"true: distributable false: not distributable\",\"_token\":\"Token address to allow/disallow the deposit\"}},\"updateGameCreator(uint256,address)\":{\"params\":{\"_gameCreator\":\"Game creator address\",\"_gid\":\"Game ID\"}},\"updatePlatformFee(address,uint256)\":{\"details\":\"Only ownerAllow zero recipient address only of fee is also zero\",\"params\":{\"_feeRecipient\":\"Platform fee recipient address\",\"_platformFee\":\"platform fee\"}},\"updateTournamentCreationFee(address,uint256)\":{\"details\":\"Only ownerTournament creator should pay this fee when creating the tournament\",\"params\":{\"_tournamentCreationFeeAmount\":\"Fee token amount\",\"_tournamentCreationFeeToken\":\"Fee token address\"}}},\"stateVariables\":{\"MAX_PERMILLAGE\":{\"details\":\"Max fee constant in permillage (percentage * 10)\"},\"addressRegistry\":{\"details\":\"AddressRegistry\"},\"feeRecipient\":{\"details\":\"Platform fee recipient\"},\"games\":{\"details\":\"Game name array\"},\"platformFee\":{\"details\":\"Platform fee\"},\"tournamentCreationFeeAmount\":{\"details\":\"Tournament creation fee token amount\"},\"tournamentCreationFeeToken\":{\"details\":\"Tournament creation fee token address\"}},\"title\":\"GameRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addGame(string,address,uint256)\":{\"notice\":\"Add the new game\"},\"createTournamentByDAO(uint256,string,uint256,uint256)\":{\"notice\":\"Create the tournament\"},\"createTournamentByDAOWithTokens(uint256,string,uint256,uint256,(address,uint256),address)\":{\"notice\":\"Create the tournament and set tokens\"},\"createTournamentByUser(uint256,string,uint256,uint256,(address,uint256),(address,uint256),address,uint256,uint256[],uint256[])\":{\"notice\":\"Create the tournament\"},\"gameCount()\":{\"notice\":\"Returns the number of games created\"},\"getAppliedGameCreatorFee(uint256,uint256)\":{\"notice\":\"Returns the applied game creator fee of the specific tournament\"},\"getDepositTokenAmount(uint256,uint256,address)\":{\"notice\":\"Returns the deposit token amount of the specific tournament\"},\"getDepositTokenList(uint256)\":{\"notice\":\"Returns the deposit token list of the game\"},\"getDistributableTokenList(uint256)\":{\"notice\":\"Returns the distributable token list of the game\"},\"getGameBaseCreatorFee(uint256)\":{\"notice\":\"Returns the game creator fee\"},\"getGameCreatorAddress(uint256)\":{\"notice\":\"Returns the game creator address\"},\"getGameName(uint256)\":{\"notice\":\"Returns the game name\"},\"getTournamentCount(uint256)\":{\"notice\":\"Returns the number of the tournaments of the specific game\"},\"getTournamentCreator(uint256,uint256)\":{\"notice\":\"Returns the tournament creator address of the specific tournament\"},\"getTournamentCreatorFee(uint256,uint256)\":{\"notice\":\"Returns the tournament creator fee of the specific tournament\"},\"getTournamentName(uint256,uint256)\":{\"notice\":\"Returns the tournament name of the specific tournament\"},\"isDistributable(uint256,address)\":{\"notice\":\"Returns true if the token of a specific game is distributable, false otherwise\"},\"isGameDeprecated(uint256)\":{\"notice\":\"Returns a boolean indicating if a specific game is deprecated\"},\"removeGame(uint256)\":{\"notice\":\"Remove the exising game\"},\"updateBaseGameCreatorFee(uint256,uint256)\":{\"notice\":\"Update the base game creator fee\"},\"updateDepositTokenAmount(uint256,uint256,address,uint256)\":{\"notice\":\"Update deposit token amount\"},\"updateDistributableTokenAddress(uint256,address,bool)\":{\"notice\":\"Update distributable token address\"},\"updateGameCreator(uint256,address)\":{\"notice\":\"Update the game creator\"},\"updatePlatformFee(address,uint256)\":{\"notice\":\"Update the platform fee\"},\"updateTournamentCreationFee(address,uint256)\":{\"notice\":\"Update the tournament creation fee\"}},\"notice\":\"This contract stores all info related to the game and tournament creation\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GameRegistry.sol\":\"GameRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe8f27a3e3e25067334e76799f03d4de6d8f8535c3fc4806468228a9ebd5de51a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xb8f5302f12138c5561362e88a78d061573e6298b7a1a5afe84a1e2c8d4d5aeaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xe798cadb41e2da274913e4b3183a80f50fb057a42238fe8467e077268100ec27\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x4e733d3164f73f461eaf9d8087a7ad1ea180bdc8ba0d3d61b0e1ae16d8e63dff\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xcc70d8e2281fb3ff69e8ab242500f10142cd0a7fa8dd9e45882be270d4d09024\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x220c4a5af915e656be2aaa85ca57505d102418e476b1e2ef6c62e0c6ac143871\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/MathUpgradeable.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = MathUpgradeable.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, MathUpgradeable.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0x6b9a5d35b744b25529a2856a8093e7c03fb35a34b1c4fb5499e560f8ade140da\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x9a3b990bd56d139df3e454a9edf1c64668530b5a77fc32eb063bc206f958274a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc1bd5b53319c68f84e3becd75694d941e8f4be94049903232cd8bc7c535aaa5a\",\"license\":\"MIT\"},\"contracts/GameRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/IAddressRegistry.sol\\\";\\nimport \\\"./interfaces/IOparcade.sol\\\";\\n\\n/**\\n * @title GameRegistry\\n * @notice This contract stores all info related to the game and tournament creation\\n * @author David Lee\\n */\\ncontract GameRegistry is AccessControlUpgradeable {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  bytes32 public constant GAME_MANAGER_ROLE = keccak256(\\\"GAME_MANAGER_ROLE\\\");\\n  bytes32 public constant TOURNAMENT_MANAGER_ROLE = keccak256(\\\"TOURNAMENT_MANAGER_ROLE\\\");\\n\\n  event GameAdded(\\n    address indexed by,\\n    uint256 indexed gid,\\n    string gameName,\\n    address indexed gameCreator,\\n    uint256 baseGameCreatorFee\\n  );\\n  event GameRemoved(\\n    address indexed by,\\n    uint256 indexed gid,\\n    string gameName,\\n    address indexed gameCreator,\\n    uint256 baseGameCreatorFee\\n  );\\n  event GameCreatorUpdated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    address indexed oldGameCreator,\\n    address newGameCreator\\n  );\\n  event BaseGameCreatorFeeUpdated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    uint256 indexed oldBaseGameCreatorFee,\\n    uint256 newBaseGameCreatorFee\\n  );\\n  event TournamentCreated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    string tournamentName,\\n    uint256 appliedGameCreatorFee,\\n    uint256 tournamentCreatorFee\\n  );\\n  event DepositAmountUpdated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    uint256 indexed tid,\\n    string tournamentName,\\n    address token,\\n    uint256 oldAmount,\\n    uint256 newAmount\\n  );\\n  event DistributableTokenAddressUpdated(\\n    address indexed by,\\n    uint256 indexed gid,\\n    address indexed token,\\n    bool oldStatus,\\n    bool newStatus\\n  );\\n  event PlatformFeeUpdated(\\n    address indexed by,\\n    address indexed oldFeeRecipient,\\n    uint256 oldPlatformFee,\\n    address indexed newFeeRecipient,\\n    uint256 newPlatformFee\\n  );\\n  event TournamentCreationFeeUpdated(\\n    address indexed by,\\n    address indexed oldTournamentCreationFeeToken,\\n    uint256 oldTournamentCreationFeeAmount,\\n    address indexed newTournamentCreationFeeToken,\\n    uint256 newTournamentCreationFeeAmount\\n  );\\n\\n  struct Token {\\n    address tokenAddress;\\n    uint256 tokenAmount;\\n  }\\n\\n  struct Tournament {\\n    string name;\\n    address creatorAddress;\\n    uint256 creatorFee;\\n    uint256 appliedGameCreatorFee;\\n    /// @dev Token address -> amount\\n    mapping(address => uint256) depositTokenAmount;\\n  }\\n\\n  struct Game {\\n    string name;\\n    address creatorAddress;\\n    uint256 baseCreatorFee;\\n    bool isDeprecated;\\n    address[] distributableTokenList; // return all array\\n    address[] depositTokenList;\\n    mapping(uint256 => Tournament) tournaments;\\n    uint256 tournamentsCount;\\n    /// @dev Token address -> Bool\\n    mapping(address => bool) distributable;\\n  }\\n\\n  /// @dev Game name array\\n  Game[] public games;\\n\\n  /// @dev AddressRegistry\\n  IAddressRegistry public addressRegistry;\\n\\n  /// @dev Platform fee recipient\\n  address public feeRecipient;\\n\\n  /// @dev Platform fee\\n  uint256 public platformFee;\\n\\n  /// @dev Tournament creation fee token address\\n  address public tournamentCreationFeeToken;\\n\\n  /// @dev Tournament creation fee token amount\\n  uint256 public tournamentCreationFeeAmount;\\n\\n  /// @dev Max fee constant in permillage (percentage * 10)\\n  uint256 constant MAX_PERMILLAGE = 100_0;\\n\\n  modifier onlyValidGID(uint256 _gid) {\\n    require(_gid < games.length, \\\"Invalid game index\\\");\\n    _;\\n  }\\n\\n  modifier onlyActiveGame(uint256 _gid) {\\n    require(_gid < games.length && !games[_gid].isDeprecated, \\\"Game not active\\\");\\n    _;\\n  }\\n\\n  modifier onlyValidTID(uint256 _gid, uint256 _tid) {\\n    require(_tid < games[_gid].tournamentsCount, \\\"Invalid tournament index\\\");\\n    _;\\n  }\\n\\n  modifier isGameManager() {\\n    require(hasRole(GAME_MANAGER_ROLE, _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Game manager role missing\\\");\\n\\t_;\\n  }\\n\\n  modifier isTournamentManager() {\\n    require(hasRole(TOURNAMENT_MANAGER_ROLE , _msgSender()) || hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Tournament manager role missing\\\");\\n\\t_;\\n  }\\n\\n  modifier isAdmin() {\\n    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Admin role missing\\\");\\n\\t_;\\n  }\\n\\n  function initialize(\\n    address _addressRegistry,\\n    address _feeRecipient,\\n    uint256 _platformFee,\\n    address _tournamentCreationFeeToken,\\n    uint256 _tournamentCreationFeeAmount\\n  ) public initializer {\\n    __AccessControl_init();\\n\\n    _grantRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n    _grantRole(GAME_MANAGER_ROLE, _msgSender());\\n    _grantRole(TOURNAMENT_MANAGER_ROLE, _msgSender());\\n\\n    require(_addressRegistry != address(0), \\\"Zero address registry\\\");\\n    require(_tournamentCreationFeeToken != address(0), \\\"Zero tournament fee token\\\");\\n    require(_feeRecipient != address(0) || _platformFee == 0, \\\"Fee recipient not set\\\");\\n    require(_platformFee <= MAX_PERMILLAGE, \\\"Platform fee exceeded\\\");\\n\\n    // initialize AddressRegistery\\n    addressRegistry = IAddressRegistry(_addressRegistry);\\n\\n    // initialize fee and recipient\\n    feeRecipient = _feeRecipient;\\n    platformFee = _platformFee;\\n    tournamentCreationFeeToken = _tournamentCreationFeeToken;\\n    tournamentCreationFeeAmount = _tournamentCreationFeeAmount;\\n  }\\n\\n  /**\\n   * @notice Returns a boolean indicating if a specific game is deprecated\\n   * @param _gid Game ID\\n   * @return (bool) Is deprecated\\n   */\\n  function isGameDeprecated(uint256 _gid) external view onlyValidGID(_gid) returns (bool) {\\n    return games[_gid].isDeprecated;\\n  }\\n\\n  /**\\n   * @notice Returns the game name\\n   * @param _gid Game ID\\n   * @return (string) Game name\\n   */\\n  function getGameName(uint256 _gid) external view onlyValidGID(_gid) returns (string memory) {\\n    return games[_gid].name;\\n  }\\n\\n  /**\\n   * @notice Returns the game creator address\\n   * @param _gid Game ID\\n   * @return (string) Game creator address\\n   */\\n  function getGameCreatorAddress(uint256 _gid) external view onlyValidGID(_gid) returns (address) {\\n    return games[_gid].creatorAddress;\\n  }\\n\\n  /**\\n   * @notice Returns the game creator fee\\n   * @param _gid Game ID\\n   * @return (uint256) Game creator fee\\n   */\\n  function getGameBaseCreatorFee(uint256 _gid) external view onlyValidGID(_gid) returns (uint256) {\\n    return games[_gid].baseCreatorFee;\\n  }\\n\\n  /**\\n   * @notice Returns true if the token of a specific game is distributable, false otherwise\\n   * @param _gid Game ID\\n   * @param _tokenAddress token address\\n   * @return (uint256) Is token distributable\\n   */\\n  function isDistributable(uint256 _gid, address _tokenAddress) external view onlyValidGID(_gid) returns (bool) {\\n    return games[_gid].distributable[_tokenAddress];\\n  }\\n\\n  /**\\n   * @notice Returns the deposit token list of the game\\n   * @param _gid Game ID\\n   * @param (address[]) Deposit token list of the game\\n   */\\n  function getDepositTokenList(uint256 _gid) external view returns (address[] memory) {\\n    return games[_gid].depositTokenList;\\n  }\\n\\n  /**\\n   * @notice Returns the distributable token list of the game\\n   * @param _gid Game ID\\n   * @param (address[]) Distributable token list of the game\\n   */\\n  function getDistributableTokenList(uint256 _gid) external view returns (address[] memory) {\\n    return games[_gid].distributableTokenList;\\n  }\\n\\n  /**\\n   * @notice Returns the number of games created\\n   * @return (uint256) Amount of games created\\n   */\\n  function gameCount() external view returns (uint256) {\\n    return games.length;\\n  }\\n\\n  /**\\n   * @notice Returns the number of the tournaments of the specific game\\n   * @param _gid Game ID\\n   * @return (uint256) Number of the tournament\\n   */\\n  function getTournamentCount(uint256 _gid) external view onlyValidGID(_gid) returns (uint256) {\\n    return games[_gid].tournamentsCount;\\n  }\\n\\n  /**\\n   * @notice Returns the tournament name of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (string) Tournament name\\n   */\\n  function getTournamentName(uint256 _gid, uint256 _tid)\\n    external\\n    view\\n    onlyValidGID(_gid)\\n    onlyValidTID(_gid, _tid)\\n    returns (string memory)\\n  {\\n    return games[_gid].tournaments[_tid].name;\\n  }\\n\\n  /**\\n   * @notice Returns the tournament creator fee of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (uint256) Tournament creator fee\\n   */\\n  function getTournamentCreatorFee(uint256 _gid, uint256 _tid)\\n    external\\n    view\\n    onlyValidGID(_gid)\\n    onlyValidTID(_gid, _tid)\\n    returns (uint256)\\n  {\\n    return games[_gid].tournaments[_tid].creatorFee;\\n  }\\n\\n  /**\\n   * @notice Returns the applied game creator fee of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (string) Game applied game creator fee of a tournament\\n   */\\n  function getAppliedGameCreatorFee(uint256 _gid, uint256 _tid)\\n    external\\n    view\\n    onlyValidGID(_gid)\\n    onlyValidTID(_gid, _tid)\\n    returns (uint256)\\n  {\\n    return games[_gid].tournaments[_tid].appliedGameCreatorFee;\\n  }\\n\\n  /**\\n   * @notice Returns the deposit token amount of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _tokenAddress token address\\n   * @return (uint256) Tournament deposit token amount\\n   */\\n  function getDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _tokenAddress\\n  ) external view onlyValidGID(_gid) onlyValidTID(_gid, _tid) returns (uint256) {\\n    return games[_gid].tournaments[_tid].depositTokenAmount[_tokenAddress];\\n  }\\n\\n  /**\\n   * @notice Returns the tournament creator address of the specific tournament\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @return (address) Tournament creator address\\n   */\\n  function getTournamentCreator(uint256 _gid, uint256 _tid)\\n    external\\n    view\\n    onlyValidGID(_gid)\\n    onlyValidTID(_gid, _tid)\\n    returns (address)\\n  {\\n    return games[_gid].tournaments[_tid].creatorAddress;\\n  }\\n\\n  /**\\n   * @notice Add the new game\\n   * @dev Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the game\\n   * @dev When creating the tournament of the game, the game creator fee can be proposed by the tournament creator\\n   * @dev but the proposed value can't be less than the base one\\n   * @dev If the proposed game creator fee is 0, the base game creator fee will be applied\\n   * @param _gameName Game name to add\\n   * @param _gameCreator Game creator address\\n   * @param _baseGameCreatorFee Base game creator fee\\n   */\\n  function addGame(\\n    string calldata _gameName,\\n    address _gameCreator,\\n    uint256 _baseGameCreatorFee\\n  ) external isGameManager returns (uint256 gid) {\\n    require(bytes(_gameName).length != 0, \\\"Empty game name\\\");\\n    require(_gameCreator != address(0), \\\"Zero game creator address\\\");\\n    require(platformFee + _baseGameCreatorFee <= MAX_PERMILLAGE, \\\"Exceeded base game creator fee\\\");\\n\\n    // Create game and set properties\\n    gid = games.length;\\n    games.push();\\n    games[gid].name = _gameName;\\n    games[gid].creatorAddress = _gameCreator;\\n    games[gid].baseCreatorFee = _baseGameCreatorFee;\\n\\n    emit GameAdded(msg.sender, gid, _gameName, _gameCreator, _baseGameCreatorFee);\\n  }\\n\\n  /**\\n   * @notice Remove the exising game\\n   * @dev Game is not removed from the games array, just set it deprecated\\n   * @param _gid Game ID\\n   */\\n  function removeGame(uint256 _gid) external isGameManager onlyActiveGame(_gid) {\\n    // remove game\\n    games[_gid].isDeprecated = true;\\n\\n    emit GameRemoved(msg.sender, _gid, games[_gid].name, games[_gid].creatorAddress, games[_gid].baseCreatorFee);\\n  }\\n\\n  /**\\n   * @notice Update the game creator\\n   * @param _gid Game ID\\n   * @param _gameCreator Game creator address\\n   */\\n  function updateGameCreator(uint256 _gid, address _gameCreator) external onlyActiveGame(_gid) {\\n    require(msg.sender == games[_gid].creatorAddress, \\\"Only game creator\\\");\\n    require(_gameCreator != address(0), \\\"Zero game creator address\\\");\\n\\n    emit GameCreatorUpdated(msg.sender, _gid, games[_gid].creatorAddress, _gameCreator);\\n\\n    // update the game creator address\\n    games[_gid].creatorAddress = _gameCreator;\\n  }\\n\\n  /**\\n   * @notice Update the base game creator fee\\n   * @dev Tournament creator fee is the royality that will be transferred to the tournament creator address\\n   * @dev Tournament creator can propose the game creator fee when creating the tournament\\n   * @dev but it can't be less than the base game creator fee\\n   * @param _gid Game ID\\n   * @param _baseGameCreatorFee Base game creator fee\\n   */\\n  function updateBaseGameCreatorFee(uint256 _gid, uint256 _baseGameCreatorFee) external isGameManager onlyActiveGame(_gid) {\\n    require(platformFee + _baseGameCreatorFee <= MAX_PERMILLAGE, \\\"Exceeded game creator fee\\\");\\n\\n    emit BaseGameCreatorFeeUpdated(msg.sender, _gid, games[_gid].baseCreatorFee, _baseGameCreatorFee);\\n\\n    // update the game creator fee\\n    games[_gid].baseCreatorFee = _baseGameCreatorFee;\\n  }\\n\\n  /**\\n   * @notice Create the tournament and set tokens\\n   * @dev Only owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @param _depositToken Token to allow/disallow the deposit\\n   * @param _distributionTokenAddress Distribution token address to be set to active\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByDAOWithTokens(\\n    uint256 _gid,\\n    string memory _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee,\\n    Token calldata _depositToken,\\n    address _distributionTokenAddress\\n  ) external isTournamentManager onlyActiveGame(_gid) returns (uint256 tid) {\\n    // create the tournament\\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\\n\\n    // set the deposit token address and amount\\n    _updateDepositTokenAmount(_gid, tid, _depositToken.tokenAddress, _depositToken.tokenAmount);\\n\\n    // set the distributable token address\\n    if (!games[_gid].distributable[_distributionTokenAddress]) {\\n      _updateDistributableTokenAddress(_gid, _distributionTokenAddress, true);\\n    }\\n\\n    return tid;\\n  }\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev Only owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev The prize pool for the tournament that the owner created is initialized on Oparcade contract\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByDAO(\\n    uint256 _gid,\\n    string calldata _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee\\n  ) external isTournamentManager onlyActiveGame(_gid) returns (uint256 tid) {\\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\\n  }\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @return tid Tournament ID created\\n   */\\n  function _createTournament(\\n    uint256 _gid,\\n    string memory _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee\\n  ) internal returns (uint256 tid) {\\n    // use baseCreatorFee if _proposedGameCreatorFee is zero\\n    uint256 appliedGameCreatorFee;\\n    if (_proposedGameCreatorFee == 0) {\\n      appliedGameCreatorFee = games[_gid].baseCreatorFee;\\n    } else {\\n      appliedGameCreatorFee = _proposedGameCreatorFee;\\n    }\\n\\n    // check fees\\n    require(games[_gid].baseCreatorFee <= appliedGameCreatorFee, \\\"Low game creator fee proposed\\\");\\n    require(platformFee + appliedGameCreatorFee + _tournamentCreatorFee <= MAX_PERMILLAGE, \\\"Exceeded fees\\\");\\n\\n    // get the new tournament ID\\n    tid = games[_gid].tournamentsCount;\\n\\n    // add tournament\\n    games[_gid].tournamentsCount += 1;\\n    games[_gid].tournaments[tid].name = _tournamentName;\\n    games[_gid].tournaments[tid].creatorAddress = msg.sender;\\n    games[_gid].tournaments[tid].appliedGameCreatorFee = appliedGameCreatorFee;\\n    games[_gid].tournaments[tid].creatorFee = _tournamentCreatorFee;\\n\\n    emit TournamentCreated(msg.sender, _gid, tid, _tournamentName, appliedGameCreatorFee, _tournamentCreatorFee);\\n  }\\n\\n  /**\\n   * @notice Create the tournament\\n   * @dev Anyone can create the tournament and initialize the prize pool with tokens and NFTs\\n   * @dev Tournament creator should set all params necessary for the tournament in 1 tx and\\n   * @dev the params set is immutable. It will be prevent the fraud tournament is created\\n   * @dev Tournament creator should pay fees to create the tournament\\n   * @dev and the fee token address and fee token amount are set by the owner\\n   * @dev If the proposed game creaetor fee is 0, the base game creator fee is applied\\n   * @dev NFT type to initialize the prize pool should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _proposedGameCreatorFee Proposed game creator fee\\n   * @param _tournamentCreatorFee Tournament creator fee\\n   * @param _depositToken Deposit token (address and amount) for playing the tournament\\n   * @param _tokenToAddPrizePool Token (address and amount) to initialize the prize pool\\n   * @param _nftAddressToAddPrizePool NFT address to initialize the prize pool\\n   * @param _nftTypeToAddPrizePool NFT type to initialize the prize pool\\n   * @param _tokenIdsToAddPrizePool NFT token Id list to initialize the prize pool\\n   * @param _amountsToAddPrizePool NFT token amount list to initialize the prize pool\\n   * @return tid Tournament ID created\\n   */\\n  function createTournamentByUser(\\n    uint256 _gid,\\n    string calldata _tournamentName,\\n    uint256 _proposedGameCreatorFee,\\n    uint256 _tournamentCreatorFee,\\n    Token calldata _depositToken,\\n    Token calldata _tokenToAddPrizePool,\\n    address _nftAddressToAddPrizePool,\\n    uint256 _nftTypeToAddPrizePool,\\n    uint256[] memory _tokenIdsToAddPrizePool,\\n    uint256[] memory _amountsToAddPrizePool\\n  ) external onlyActiveGame(_gid) returns (uint256 tid) {\\n    // pay the tournament creation fee\\n    IERC20Upgradeable(tournamentCreationFeeToken).safeTransferFrom(\\n      msg.sender,\\n      feeRecipient,\\n      tournamentCreationFeeAmount\\n    );\\n\\n    // create new tournament\\n    tid = _createTournament(_gid, _tournamentName, _proposedGameCreatorFee, _tournamentCreatorFee);\\n\\n    // set the deposit token amount\\n    _updateDepositTokenAmount(_gid, tid, _depositToken.tokenAddress, _depositToken.tokenAmount);\\n\\n    // set the distributable token\\n    if (!games[_gid].distributable[_depositToken.tokenAddress] && _depositToken.tokenAmount > 0) {\\n      _updateDistributableTokenAddress(_gid, _depositToken.tokenAddress, true);\\n    }\\n    if (!games[_gid].distributable[_tokenToAddPrizePool.tokenAddress] && _tokenToAddPrizePool.tokenAmount > 0) {\\n      _updateDistributableTokenAddress(_gid, _tokenToAddPrizePool.tokenAddress, true);\\n    }\\n\\n    // initialize the prize pool with tokens\\n    if (_tokenToAddPrizePool.tokenAmount > 0) {\\n      IOparcade(addressRegistry.oparcade()).depositPrize(\\n        msg.sender,\\n        _gid,\\n        tid,\\n        _tokenToAddPrizePool.tokenAddress,\\n        _tokenToAddPrizePool.tokenAmount\\n      );\\n    }\\n\\n    // initialize the prize pool with NFTs\\n    if (_nftTypeToAddPrizePool == 721 || _nftTypeToAddPrizePool == 1155) {\\n      // set the distributable token\\n      if (!games[_gid].distributable[_nftAddressToAddPrizePool] && _amountsToAddPrizePool.length > 0) {\\n        _updateDistributableTokenAddress(_gid, _nftAddressToAddPrizePool, true);\\n      }\\n\\n      IOparcade(addressRegistry.oparcade()).depositNFTPrize(\\n        msg.sender,\\n        _gid,\\n        tid,\\n        _nftAddressToAddPrizePool,\\n        _nftTypeToAddPrizePool,\\n        _tokenIdsToAddPrizePool,\\n        _amountsToAddPrizePool\\n      );\\n    }\\n  }\\n\\n  /**\\n   * @notice Update deposit token amount\\n   * @dev Only owner\\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _amount Token amount\\n   */\\n  function updateDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external isTournamentManager onlyActiveGame(_gid) onlyValidTID(_gid, _tid) {\\n    _updateDepositTokenAmount(_gid, _tid, _token, _amount);\\n  }\\n\\n  /**\\n   * @notice Update deposit token amount\\n   * @dev Only tokens with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _amount Token amount\\n   */\\n  function _updateDepositTokenAmount(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) internal {\\n    emit DepositAmountUpdated(\\n      msg.sender,\\n      _gid,\\n      _tid,\\n      games[_gid].tournaments[_tid].name,\\n      _token,\\n      games[_gid].tournaments[_tid].depositTokenAmount[_token],\\n      _amount\\n    );\\n\\n    // update deposit token list\\n    if (_amount > 0) {\\n      if (games[_gid].tournaments[_tid].depositTokenAmount[_token] == 0) {\\n        // add the token into the list only if it's added newly\\n        games[_gid].depositTokenList.push(_token);\\n      }\\n    } else {\\n      for (uint256 i; i < games[_gid].depositTokenList.length; i++) {\\n        if (_token == games[_gid].depositTokenList[i]) {\\n          // remove the token from the list\\n          games[_gid].depositTokenList[i] = games[_gid].depositTokenList[games[_gid].depositTokenList.length - 1];\\n          games[_gid].depositTokenList.pop();\\n          break;\\n        }\\n      }\\n    }\\n\\n    // update deposit token amount\\n    games[_gid].tournaments[_tid].depositTokenAmount[_token] = _amount;\\n  }\\n\\n  /**\\n   * @notice Update distributable token address\\n   * @dev Only owner\\n   * @param _gid Game ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _isDistributable true: distributable false: not distributable\\n   */\\n  function updateDistributableTokenAddress(\\n    uint256 _gid,\\n    address _token,\\n    bool _isDistributable\\n  ) external isGameManager onlyActiveGame(_gid) {\\n    _updateDistributableTokenAddress(_gid, _token, _isDistributable);\\n  }\\n\\n  /**\\n   * @notice Update distributable token address\\n   * @dev Only owner\\n   * @param _gid Game ID\\n   * @param _token Token address to allow/disallow the deposit\\n   * @param _isDistributable true: distributable false: not distributable\\n   */\\n  function _updateDistributableTokenAddress(\\n    uint256 _gid,\\n    address _token,\\n    bool _isDistributable\\n  ) internal {\\n    emit DistributableTokenAddressUpdated(\\n      msg.sender,\\n      _gid,\\n      _token,\\n      games[_gid].distributable[_token],\\n      _isDistributable\\n    );\\n\\n    // update distributable token list\\n    if (_isDistributable) {\\n      if (!games[_gid].distributable[_token]) {\\n        // add token to the list only if it's added newly\\n        games[_gid].distributableTokenList.push(_token);\\n      }\\n    } else {\\n      for (uint256 i; i < games[_gid].distributableTokenList.length; i++) {\\n        if (_token == games[_gid].distributableTokenList[i]) {\\n          games[_gid].distributableTokenList[i] = games[_gid].distributableTokenList[\\n            games[_gid].distributableTokenList.length - 1\\n          ];\\n          games[_gid].distributableTokenList.pop();\\n          break;\\n        }\\n      }\\n    }\\n\\n    // update distributable token amount\\n    games[_gid].distributable[_token] = _isDistributable;\\n  }\\n\\n  /**\\n   * @notice Update the platform fee\\n   * @dev Only owner\\n   * @dev Allow zero recipient address only of fee is also zero\\n   * @param _feeRecipient Platform fee recipient address\\n   * @param _platformFee platform fee\\n   */\\n  function updatePlatformFee(address _feeRecipient, uint256 _platformFee) external isAdmin {\\n    require(_feeRecipient != address(0) || _platformFee == 0, \\\"Fee recipient not set\\\");\\n    require(_platformFee <= MAX_PERMILLAGE, \\\"Platform fee exceeded\\\");\\n\\n    emit PlatformFeeUpdated(msg.sender, feeRecipient, platformFee, _feeRecipient, _platformFee);\\n\\n    feeRecipient = _feeRecipient;\\n    platformFee = _platformFee;\\n  }\\n\\n  /**\\n   * @notice Update the tournament creation fee\\n   * @dev Only owner\\n   * @dev Tournament creator should pay this fee when creating the tournament\\n   * @param _tournamentCreationFeeToken Fee token address\\n   * @param _tournamentCreationFeeAmount Fee token amount\\n   */\\n  function updateTournamentCreationFee(address _tournamentCreationFeeToken, uint256 _tournamentCreationFeeAmount)\\n    external\\n    isAdmin\\n  {\\n    require(_tournamentCreationFeeToken != address(0), \\\"Zero tournament creation fee token\\\");\\n    require(_tournamentCreationFeeAmount > 0, \\\"Zero tournament creation fee\\\");\\n\\n    emit TournamentCreationFeeUpdated(\\n      msg.sender,\\n      tournamentCreationFeeToken,\\n      tournamentCreationFeeAmount,\\n      _tournamentCreationFeeToken,\\n      _tournamentCreationFeeAmount\\n    );\\n\\n    tournamentCreationFeeToken = _tournamentCreationFeeToken;\\n    tournamentCreationFeeAmount = _tournamentCreationFeeAmount;\\n  }\\n}\\n\",\"keccak256\":\"0xa0837bb075b8d5a987239e170db7826bb5804f904d2ffe135ee8f43c171cd3dc\",\"license\":\"MIT\"},\"contracts/interfaces/IAddressRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title AddressRegistry Contract Interface\\n * @notice Define the interface used to get addresses in Oparcade\\n * @author David Lee\\n */\\ninterface IAddressRegistry {\\n  /**\\n   * @notice Provide the Oparcade contract address\\n   * @dev Can be zero in case of the Oparcade contract is not registered\\n   * @return address Oparcade contract address\\n   */\\n  function oparcade() external view returns (address);\\n\\n  /**\\n   * @notice Provide the GameRegistry contract address\\n   * @dev Can be zero in case of the GameRegistry contract is not registered\\n   * @return address GameRegistry contract address\\n   */\\n  function gameRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Provide the maintainer address\\n   * @dev Can be zero in case of the maintainer address is not registered\\n   * @return address Maintainer contract address\\n   */\\n  function maintainer() external view returns (address);\\n\\n  /**\\n   * @notice Provide the timelock contract address\\n   * @dev Can be zero in case of the timelock address is not registered\\n   * @return address Timelock contract address\\n   */\\n  function timelock() external view returns (address);\\n}\\n\",\"keccak256\":\"0x3f2cbab5d28ad41e776c8ec62d06b756bad0d20f587c3c028d119b6068017908\",\"license\":\"MIT\"},\"contracts/interfaces/IOparcade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\n/**\\n * @title Oparcade Contract Interface\\n * @notice Define the interface used to get the token deposit and withdrawal info\\n * @author David Lee\\n */\\ninterface IOparcade {\\n  /**\\n   * @notice Deposit ERC20 tokens from user\\n   * @dev Only tokens registered in GameRegistry with an amount greater than zero is valid for the deposit\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Token address to deposit\\n   */\\n  function deposit(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token\\n  ) external;\\n\\n  /**\\n   * @notice Deposit the prize tokens for the specific game/tournament\\n   * @dev Only tokens which are allowed as a distributable token can be deposited\\n   * @dev Prize is transferred from _depositor address to this contract\\n   * @param _depositor Depositor address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to deposit\\n   */\\n  function depositPrize(\\n    address _depositor,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Deposit NFT prize for the specific game/tournament\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _from NFT owner address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function depositNFTPrize(\\n    address _from,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external;\\n\\n  /**\\n   * @notice Distribute winners their prizes\\n   * @dev Only maintainer\\n   * @dev The maximum distributable prize amount is the sum of the users' deposit and the prize that the owner deposited\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _token Prize token address\\n   * @param _amounts Prize list\\n   */\\n  function distributePrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _token,\\n    uint256[] calldata _amounts\\n  ) external;\\n\\n  /**\\n   * @notice Distribute winners' NFT prizes\\n   * @dev Only maintainer\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _winners Winners list\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function distributeNFTPrize(\\n    uint256 _gid,\\n    uint256 _tid,\\n    address[] calldata _winners,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external;\\n\\n  /**\\n   * @notice Withdraw the prize tokens from the specific game/tournament\\n   * @dev Only owner\\n   * @param _to Beneficiary address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _token Prize token address\\n   * @param _amount Prize amount to withdraw\\n   */\\n  function withdrawPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _token,\\n    uint256 _amount\\n  ) external;\\n\\n  /**\\n   * @notice Withdraw NFT prize for the specific game/tournament\\n   * @dev Only owner\\n   * @dev NFT type should be either 721 or 1155\\n   * @param _to NFT receiver address\\n   * @param _gid Game ID\\n   * @param _tid Tournament ID\\n   * @param _nftAddress NFT address\\n   * @param _nftType NFT type (721/1155)\\n   * @param _tokenIds Token Id list\\n   * @param _amounts Token amount list\\n   */\\n  function withdrawNFTPrize(\\n    address _to,\\n    uint256 _gid,\\n    uint256 _tid,\\n    address _nftAddress,\\n    uint256 _nftType,\\n    uint256[] calldata _tokenIds,\\n    uint256[] calldata _amounts\\n  ) external;\\n\\n  /**\\n   * @notice Pause Oparcade\\n   * @dev Only owner\\n   */\\n  function pause() external;\\n\\n  /**\\n   * @notice Resume Oparcade\\n   * @dev Only owner\\n   */\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x0ae13c180038978a2868256997a7231b467d32bc26b45f83b36445b3e73311be\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506147a2806100206000396000f3fe608060405234801561001057600080fd5b50600436106102d35760003560e01c80638d2acf0e11610186578063cde8d10a116100e3578063f3ad65f411610097578063f7c00e6311610071578063f7c00e6314610632578063fbf60be414610645578063ff6fcdbd1461065857600080fd5b8063f3ad65f4146105ec578063f406c2d1146105ff578063f483a0ca1461061257600080fd5b8063ddeeec88116100c8578063ddeeec88146105b3578063edcd43ac146105c6578063f30818c1146105d957600080fd5b8063cde8d10a1461058d578063d547741f146105a057600080fd5b8063a7ab05491161013a578063aba869c51161011f578063aba869c514610554578063b6d3bc6414610567578063c94113b51461057a57600080fd5b8063a7ab05491461052e578063a7fbe6ba1461054157600080fd5b806391dd73f01161016b57806391dd73f014610500578063920a236b14610513578063a217fddf1461052657600080fd5b80638d2acf0e146104be57806391d14854146104c757600080fd5b806336568abe116102345780634d1975b4116101e857806364fe328e116101cd57806364fe328e1461048557806371a2304b1461049857806373d31240146104ab57600080fd5b80634d1975b41461046a5780636039197d1461047257600080fd5b806341c92c0a1161021957806341c92c0a146104245780634690484014610437578063478eedc81461044a57600080fd5b806336568abe146103fe5780634116b1ad1461041157600080fd5b8063248a9ca31161028b5780632a42b461116102705780632a42b461146103ad5780632f2ff15d146103d857806335865971146103eb57600080fd5b8063248a9ca31461038157806326232a2e146103a457600080fd5b80630fcf566e116102bc5780630fcf566e14610335578063117a5b901461034a57806322871dcd1461036e57600080fd5b806301ffc9a7146102d85780630b8ff6a914610300575b600080fd5b6102eb6102e6366004613d02565b61067f565b60405190151581526020015b60405180910390f35b6103277fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d81565b6040519081526020016102f7565b610348610343366004613d51565b6106b6565b005b61035d610358366004613d7d565b61083a565b6040516102f7959493929190613dee565b61032761037c366004613e2e565b610919565b61032761038f366004613d7d565b60009081526065602052604090206001015490565b610327609a5481565b609b546103c0906001600160a01b031681565b6040516001600160a01b0390911681526020016102f7565b6103486103e6366004613e50565b610a18565b6103276103f9366004613e80565b610a42565b61034861040c366004613e50565b610b51565b61034861041f366004613e50565b610bdd565b610327610432366004613d7d565b610de2565b6099546103c0906001600160a01b031681565b61045d610458366004613e2e565b610e5b565b6040516102f79190613eb9565b609754610327565b610327610480366004613f25565b610fdc565b610348610493366004613e2e565b611161565b6103486104a6366004613ff8565b611356565b6103486104b9366004613d7d565b6114da565b610327609c5481565b6102eb6104d5366004613e50565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61034861050e366004614045565b6116e6565b6102eb610521366004613d7d565b6117f6565b610327600081565b61032761053c366004613e2e565b611872565b61032761054f3660046140c5565b611971565b6102eb610562366004613e50565b611c09565b610327610575366004614122565b611c9c565b610348610588366004613d51565b611dec565b6103c061059b366004613d7d565b611f69565b6103486105ae366004613e50565b611feb565b6103276105c13660046141f5565b612010565b6103276105d4366004613d7d565b612492565b61045d6105e7366004613d7d565b61250a565b6098546103c0906001600160a01b031681565b6103c061060d366004613e2e565b61260a565b610625610620366004613d7d565b61270f565b6040516102f791906142e8565b610348610640366004614335565b612795565b610625610653366004613d7d565b612abf565b6103277fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b181565b60006001600160e01b03198216637965db0b60e01b14806106b057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106c16000336104d5565b6107125760405162461bcd60e51b815260206004820152601260248201527f41646d696e20726f6c65206d697373696e67000000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216151580610727575080155b6107735760405162461bcd60e51b815260206004820152601560248201527f46656520726563697069656e74206e6f742073657400000000000000000000006044820152606401610709565b6103e88111156107c55760405162461bcd60e51b815260206004820152601560248201527f506c6174666f726d2066656520657863656564656400000000000000000000006044820152606401610709565b609954609a5460408051918252602082018490526001600160a01b0385811693169133917f41340b8520c039756fdade211d2fd26138ba0673031cebf9ae4ae32d38357062910160405180910390a4609980546001600160a01b0319166001600160a01b039390931692909217909155609a55565b6097818154811061084a57600080fd5b906000526020600020906009020160009150905080600001805461086d90614390565b80601f016020809104026020016040519081016040528092919081815260200182805461089990614390565b80156108e65780601f106108bb576101008083540402835291602001916108e6565b820191906000526020600020905b8154815290600101906020018083116108c957829003601f168201915b50505060018401546002850154600386015460079096015494956001600160a01b039092169490935060ff909116915085565b609754600090839081106109645760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b838360978281548110610979576109796143c5565b90600052602060002090600902016007015481106109d45760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b609786815481106109e7576109e76143c5565b9060005260206000209060090201600601600086815260200190815260200160002060020154935050505092915050565b600082815260656020526040902060010154610a3381612b43565b610a3d8383612b50565b505050565b60975460009084908110610a8d5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b848460978281548110610aa257610aa26143c5565b9060005260206000209060090201600701548110610afd5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b60978781548110610b1057610b106143c5565b60009182526020808320898452600660099093020191909101815260408083206001600160a01b038916845260040190915290205493505050509392505050565b6001600160a01b0381163314610bcf5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610709565b610bd98282612bf2565b5050565b609754829081108015610c17575060978181548110610bfe57610bfe6143c5565b600091825260209091206003600990920201015460ff16155b610c555760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b60978381548110610c6857610c686143c5565b60009182526020909120600990910201600101546001600160a01b03163314610cd35760405162461bcd60e51b815260206004820152601160248201527f4f6e6c792067616d652063726561746f720000000000000000000000000000006044820152606401610709565b6001600160a01b038216610d295760405162461bcd60e51b815260206004820152601960248201527f5a65726f2067616d652063726561746f722061646472657373000000000000006044820152606401610709565b60978381548110610d3c57610d3c6143c5565b6000918252602091829020600990910201600101546040516001600160a01b03858116825290911691859133917fc3ead6876b368fd5723f08611f2323ab6862a20398921fb4c5d8102183752686910160405180910390a48160978481548110610da857610da86143c5565b906000526020600020906009020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b60975460009082908110610e2d5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978381548110610e4057610e406143c5565b90600052602060002090600902016007015491505b50919050565b60975460609083908110610ea65760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b838360978281548110610ebb57610ebb6143c5565b9060005260206000209060090201600701548110610f165760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b60978681548110610f2957610f296143c5565b600091825260208083208884526006600990930201919091019052604090208054610f5390614390565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7f90614390565b8015610fcc5780601f10610fa157610100808354040283529160200191610fcc565b820191906000526020600020905b815481529060010190602001808311610faf57829003601f168201915b5050505050935050505092915050565b60006110087fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d336104d5565b8061101957506110196000336104d5565b6110655760405162461bcd60e51b815260206004820152601f60248201527f546f75726e616d656e74206d616e6167657220726f6c65206d697373696e67006044820152606401610709565b60975487908110801561109f575060978181548110611086576110866143c5565b600091825260209091206003600990920201015460ff16155b6110dd5760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b6110e988888888612c75565b915061110788836110fd60208801886143db565b8760200135612f61565b6097888154811061111a5761111a6143c5565b600091825260208083206001600160a01b03871684526008600990930201919091019052604090205460ff1661115657611156888460016132fa565b509695505050505050565b61118b7fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b1336104d5565b8061119c575061119c6000336104d5565b6111e85760405162461bcd60e51b815260206004820152601960248201527f47616d65206d616e6167657220726f6c65206d697373696e67000000000000006044820152606401610709565b609754829081108015611222575060978181548110611209576112096143c5565b600091825260209091206003600990920201015460ff16155b6112605760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b6103e882609a54611271919061440e565b11156112bf5760405162461bcd60e51b815260206004820152601960248201527f45786365656465642067616d652063726561746f7220666565000000000000006044820152606401610709565b609783815481106112d2576112d26143c5565b90600052602060002090600902016002015483336001600160a01b03167f1368505f5ab324c064457c30f01846471732247325d44b676e806cc4cd884a708560405161132091815260200190565b60405180910390a4816097848154811061133c5761133c6143c5565b906000526020600020906009020160020181905550505050565b6113807fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d336104d5565b8061139157506113916000336104d5565b6113dd5760405162461bcd60e51b815260206004820152601f60248201527f546f75726e616d656e74206d616e6167657220726f6c65206d697373696e67006044820152606401610709565b6097548490811080156114175750609781815481106113fe576113fe6143c5565b600091825260209091206003600990920201015460ff16155b6114555760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b84846097828154811061146a5761146a6143c5565b90600052602060002090600902016007015481106114c55760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b6114d187878787612f61565b50505050505050565b6115047fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b1336104d5565b8061151557506115156000336104d5565b6115615760405162461bcd60e51b815260206004820152601960248201527f47616d65206d616e6167657220726f6c65206d697373696e67000000000000006044820152606401610709565b60975481908110801561159b575060978181548110611582576115826143c5565b600091825260209091206003600990920201015460ff16155b6115d95760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b6001609783815481106115ee576115ee6143c5565b906000526020600020906009020160030160006101000a81548160ff02191690831515021790555060978281548110611629576116296143c5565b906000526020600020906009020160010160009054906101000a90046001600160a01b03166001600160a01b031682336001600160a01b03167f87c3cbb8e83984547de922e1b60d2b0e975685ec4e9aca63d4eb28317d4da56060978681548110611696576116966143c5565b9060005260206000209060090201600001609787815481106116ba576116ba6143c5565b9060005260206000209060090201600201546040516116da9291906144c6565b60405180910390a45050565b6117107fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b1336104d5565b8061172157506117216000336104d5565b61176d5760405162461bcd60e51b815260206004820152601960248201527f47616d65206d616e6167657220726f6c65206d697373696e67000000000000006044820152606401610709565b6097548390811080156117a757506097818154811061178e5761178e6143c5565b600091825260209091206003600990920201015460ff16155b6117e55760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b6117f08484846132fa565b50505050565b609754600090829081106118415760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978381548110611854576118546143c5565b600091825260209091206009909102016003015460ff169392505050565b609754600090839081106118bd5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b8383609782815481106118d2576118d26143c5565b906000526020600020906009020160070154811061192d5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b60978681548110611940576119406143c5565b9060005260206000209060090201600601600086815260200190815260200160002060030154935050505092915050565b600061199d7fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b1336104d5565b806119ae57506119ae6000336104d5565b6119fa5760405162461bcd60e51b815260206004820152601960248201527f47616d65206d616e6167657220726f6c65206d697373696e67000000000000006044820152606401610709565b83611a475760405162461bcd60e51b815260206004820152600f60248201527f456d7074792067616d65206e616d6500000000000000000000000000000000006044820152606401610709565b6001600160a01b038316611a9d5760405162461bcd60e51b815260206004820152601960248201527f5a65726f2067616d652063726561746f722061646472657373000000000000006044820152606401610709565b6103e882609a54611aae919061440e565b1115611afc5760405162461bcd60e51b815260206004820152601e60248201527f457863656564656420626173652067616d652063726561746f722066656500006044820152606401610709565b50609780546001810180835560008390529091869186919084908110611b2457611b246143c5565b60009182526020909120611b3e9360099092020191613bf5565b508260978281548110611b5357611b536143c5565b906000526020600020906009020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160978281548110611b9c57611b9c6143c5565b906000526020600020906009020160020181905550826001600160a01b031681336001600160a01b03167f871f6ba5dcb0133e30d68dd1c00225621e34ea9882970c2578c9136a4113d04f888887604051611bf9939291906144e8565b60405180910390a4949350505050565b60975460009083908110611c545760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978481548110611c6757611c676143c5565b600091825260208083206001600160a01b03871684526008600990930201919091019052604090205460ff1691505092915050565b6000611cc87fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d336104d5565b80611cd95750611cd96000336104d5565b611d255760405162461bcd60e51b815260206004820152601f60248201527f546f75726e616d656e74206d616e6167657220726f6c65206d697373696e67006044820152606401610709565b609754869081108015611d5f575060978181548110611d4657611d466143c5565b600091825260209091206003600990920201015460ff16155b611d9d5760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b611de18787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250889150612c759050565b979650505050505050565b611df76000336104d5565b611e435760405162461bcd60e51b815260206004820152601260248201527f41646d696e20726f6c65206d697373696e6700000000000000000000000000006044820152606401610709565b6001600160a01b038216611ea45760405162461bcd60e51b815260206004820152602260248201527f5a65726f20746f75726e616d656e74206372656174696f6e2066656520746f6b60448201526132b760f11b6064820152608401610709565b60008111611ef45760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20746f75726e616d656e74206372656174696f6e20666565000000006044820152606401610709565b609b54609c5460408051918252602082018490526001600160a01b0385811693169133917f45bc4d0779d14a1aad1c23a7c7276ca222ceb0f53ce9ec76d88470974674a58f910160405180910390a4609b80546001600160a01b0319166001600160a01b039390931692909217909155609c55565b60975460009082908110611fb45760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978381548110611fc757611fc76143c5565b60009182526020909120600990910201600101546001600160a01b03169392505050565b60008281526065602052604090206001015461200681612b43565b610a3d8383612bf2565b6097546000908c908110801561204d575060978181548110612034576120346143c5565b600091825260209091206003600990920201015460ff16155b61208b5760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b609954609c54609b546120af926001600160a01b0391821692339290911690613657565b6120f38d8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508f92508e9150612c759050565b91506121118d8361210760208c018c6143db565b8b60200135612f61565b60978d81548110612124576121246143c5565b9060005260206000209060090201600801600089600001602081019061214a91906143db565b6001600160a01b0316815260208101919091526040016000205460ff16158015612178575060008860200135115b15612195576121958d61218e60208b018b6143db565b60016132fa565b60978d815481106121a8576121a86143c5565b906000526020600020906009020160080160008860000160208101906121ce91906143db565b6001600160a01b0316815260208101919091526040016000205460ff161580156121fc575060008760200135115b15612212576122128d61218e60208a018a6143db565b60208701351561232d57609860009054906101000a90046001600160a01b03166001600160a01b0316638d374f256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561226f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122939190614521565b6001600160a01b0316631de6ba17338f856122b160208d018d6143db565b60405160e086901b6001600160e01b03191681526001600160a01b03948516600482015260248101939093526044830191909152909116606482015260208a0135608482015260a401600060405180830381600087803b15801561231457600080fd5b505af1158015612328573d6000803e3d6000fd5b505050505b846102d1148061233e575084610483145b156124825760978d81548110612356576123566143c5565b600091825260208083206001600160a01b038a1684526008600990930201919091019052604090205460ff16158015612390575060008351115b156123a1576123a18d8760016132fa565b609860009054906101000a90046001600160a01b03166001600160a01b0316638d374f256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190614521565b6001600160a01b031663b3a833b8338f858a8a8a8a6040518863ffffffff1660e01b815260040161244f9796959493929190614579565b600060405180830381600087803b15801561246957600080fd5b505af115801561247d573d6000803e3d6000fd5b505050505b509b9a5050505050505050505050565b609754600090829081106124dd5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b609783815481106124f0576124f06143c5565b906000526020600020906009020160020154915050919050565b609754606090829081106125555760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978381548110612568576125686143c5565b9060005260206000209060090201600001805461258490614390565b80601f01602080910402602001604051908101604052809291908181526020018280546125b090614390565b80156125fd5780601f106125d2576101008083540402835291602001916125fd565b820191906000526020600020905b8154815290600101906020018083116125e057829003601f168201915b5050505050915050919050565b609754600090839081106126555760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b83836097828154811061266a5761266a6143c5565b90600052602060002090600902016007015481106126c55760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b609786815481106126d8576126d86143c5565b60009182526020808320888452600660099093020191909101905260409020600101546001600160a01b0316935050505092915050565b606060978281548110612724576127246143c5565b906000526020600020906009020160050180548060200260200160405190810160405280929190818152602001828054801561278957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161276b575b50505050509050919050565b600054610100900460ff16158080156127b55750600054600160ff909116105b806127cf5750303b1580156127cf575060005460ff166001145b6128415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610709565b6000805460ff191660011790558015612864576000805461ff0019166101001790555b61286c6136c6565b612877600033612b50565b6128a17fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b133612b50565b6128cb7fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d33612b50565b6001600160a01b0386166129215760405162461bcd60e51b815260206004820152601560248201527f5a65726f206164647265737320726567697374727900000000000000000000006044820152606401610709565b6001600160a01b0383166129775760405162461bcd60e51b815260206004820152601960248201527f5a65726f20746f75726e616d656e742066656520746f6b656e000000000000006044820152606401610709565b6001600160a01b03851615158061298c575083155b6129d85760405162461bcd60e51b815260206004820152601560248201527f46656520726563697069656e74206e6f742073657400000000000000000000006044820152606401610709565b6103e8841115612a2a5760405162461bcd60e51b815260206004820152601560248201527f506c6174666f726d2066656520657863656564656400000000000000000000006044820152606401610709565b609880546001600160a01b038089166001600160a01b03199283161790925560998054888416908316179055609a869055609b805492861692909116919091179055609c8290558015612ab7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b606060978281548110612ad457612ad46143c5565b9060005260206000209060090201600401805480602002602001604051908101604052809291908181526020018280548015612789576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161276b5750505050509050919050565b612b4d8133613745565b50565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610bd95760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612bae3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1615610bd95760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008083612ca95760978681548110612c9057612c906143c5565b9060005260206000209060090201600201549050612cac565b50825b8060978781548110612cc057612cc06143c5565b9060005260206000209060090201600201541115612d205760405162461bcd60e51b815260206004820152601d60248201527f4c6f772067616d652063726561746f72206665652070726f706f7365640000006044820152606401610709565b6103e88382609a54612d32919061440e565b612d3c919061440e565b1115612d8a5760405162461bcd60e51b815260206004820152600d60248201527f45786365656465642066656573000000000000000000000000000000000000006044820152606401610709565b60978681548110612d9d57612d9d6143c5565b9060005260206000209060090201600701549150600160978781548110612dc657612dc66143c5565b90600052602060002090600902016007016000828254612de6919061440e565b925050819055508460978781548110612e0157612e016143c5565b906000526020600020906009020160060160008481526020019081526020016000206000019080519060200190612e39929190613c79565b503360978781548110612e4e57612e4e6143c5565b9060005260206000209060090201600601600084815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060978781548110612eab57612eab6143c5565b90600052602060002090600902016006016000848152602001908152602001600020600301819055508260978781548110612ee857612ee86143c5565b90600052602060002090600902016006016000848152602001908152602001600020600201819055508186336001600160a01b03167f5b1600316d8d2966d4cad163e656448a5622202016ec8b306efe11d70fa58d51888588604051612f50939291906145d7565b60405180910390a450949350505050565b8284336001600160a01b03167fa5c159e7b999109ecb53422b7b9c90ccbadb6ed8896d2e239257d284ce6d57aa60978881548110612fa157612fa16143c5565b906000526020600020906009020160060160008881526020019081526020016000206000018660978a81548110612fda57612fda6143c5565b600091825260208083208c8452600660099093020191909101815260408083206001600160a01b038c168452600401909152908190205490516130219392919089906145fc565b60405180910390a480156130d15760978481548110613042576130426143c5565b60009182526020808320868452600660099093020191909101815260408083206001600160a01b03861684526004019091529020546130cc576097848154811061308e5761308e6143c5565b60009182526020808320600992909202909101600501805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b6132a9565b60005b609785815481106130e7576130e76143c5565b9060005260206000209060090201600501805490508110156132a75760978581548110613116576131166143c5565b90600052602060002090600902016005018181548110613138576131386143c5565b6000918252602090912001546001600160a01b0384811691161415613295576097858154811061316a5761316a6143c5565b9060005260206000209060090201600501600160978781548110613190576131906143c5565b9060005260206000209060090201600501805490506131af9190614634565b815481106131bf576131bf6143c5565b600091825260209091200154609780546001600160a01b0390921691879081106131eb576131eb6143c5565b9060005260206000209060090201600501828154811061320d5761320d6143c5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506097858154811061324e5761324e6143c5565b906000526020600020906009020160050180548061326e5761326e61464b565b600082815260209020810160001990810180546001600160a01b03191690550190556132a7565b8061329f81614661565b9150506130d4565b505b80609785815481106132bd576132bd6143c5565b600091825260208083209683526006600990920290960101855260408082206001600160a01b039095168252600490940190945291909220555050565b816001600160a01b031683336001600160a01b03167f55c3f1ffae9780d4a4ce8073352d34fea806bb40540f99c3e32abaac63de3b1b60978781548110613343576133436143c5565b600091825260208083206001600160a01b038a168452600992909202909101600801815260409182902054825160ff90911615158152871515918101919091520160405180910390a4801561342b57609783815481106133a5576133a56143c5565b600091825260208083206001600160a01b03861684526008600990930201919091019052604090205460ff1661342657609783815481106133e8576133e86143c5565b60009182526020808320600992909202909101600401805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b613603565b60005b60978481548110613441576134416143c5565b9060005260206000209060090201600401805490508110156136015760978481548110613470576134706143c5565b90600052602060002090600902016004018181548110613492576134926143c5565b6000918252602090912001546001600160a01b03848116911614156135ef57609784815481106134c4576134c46143c5565b90600052602060002090600902016004016001609786815481106134ea576134ea6143c5565b9060005260206000209060090201600401805490506135099190614634565b81548110613519576135196143c5565b600091825260209091200154609780546001600160a01b039092169186908110613545576135456143c5565b90600052602060002090600902016004018281548110613567576135676143c5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550609784815481106135a8576135a86143c5565b90600052602060002090600902016004018054806135c8576135c861464b565b600082815260209020810160001990810180546001600160a01b0319169055019055613601565b806135f981614661565b91505061342e565b505b8060978481548110613617576136176143c5565b600091825260208083206001600160a01b03909616835260086009909202909501019093526040909220805492151560ff19909316929092179091555050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526117f09085906137ba565b600054610100900460ff166137435760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610709565b565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610bd9576137788161389f565b6137838360206138b1565b60405160200161379492919061467c565b60408051601f198184030181529082905262461bcd60e51b825261070991600401613eb9565b600061380f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a619092919063ffffffff16565b805190915015610a3d578080602001905181019061382d91906146fd565b610a3d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610709565b60606106b06001600160a01b03831660145b606060006138c083600261471a565b6138cb90600261440e565b67ffffffffffffffff8111156138e3576138e3613ecc565b6040519080825280601f01601f19166020018201604052801561390d576020820181803683370190505b509050600360fc1b81600081518110613928576139286143c5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613957576139576143c5565b60200101906001600160f81b031916908160001a905350600061397b84600261471a565b61398690600161440e565b90505b6001811115613a0b577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106139c7576139c76143c5565b1a60f81b8282815181106139dd576139dd6143c5565b60200101906001600160f81b031916908160001a90535060049490941c93613a0481614739565b9050613989565b508315613a5a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610709565b9392505050565b6060613a708484600085613a78565b949350505050565b606082471015613af05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610709565b600080866001600160a01b03168587604051613b0c9190614750565b60006040518083038185875af1925050503d8060008114613b49576040519150601f19603f3d011682016040523d82523d6000602084013e613b4e565b606091505b5091509150611de18783838760608315613bc6578251613bbf576001600160a01b0385163b613bbf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610709565b5081613a70565b613a708383815115613bdb5781518083602001fd5b8060405162461bcd60e51b81526004016107099190613eb9565b828054613c0190614390565b90600052602060002090601f016020900481019282613c235760008555613c69565b82601f10613c3c5782800160ff19823516178555613c69565b82800160010185558215613c69579182015b82811115613c69578235825591602001919060010190613c4e565b50613c75929150613ced565b5090565b828054613c8590614390565b90600052602060002090601f016020900481019282613ca75760008555613c69565b82601f10613cc057805160ff1916838001178555613c69565b82800160010185558215613c69579182015b82811115613c69578251825591602001919060010190613cd2565b5b80821115613c755760008155600101613cee565b600060208284031215613d1457600080fd5b81356001600160e01b031981168114613a5a57600080fd5b6001600160a01b0381168114612b4d57600080fd5b8035613d4c81613d2c565b919050565b60008060408385031215613d6457600080fd5b8235613d6f81613d2c565b946020939093013593505050565b600060208284031215613d8f57600080fd5b5035919050565b60005b83811015613db1578181015183820152602001613d99565b838111156117f05750506000910152565b60008151808452613dda816020860160208601613d96565b601f01601f19169290920160200192915050565b60a081526000613e0160a0830188613dc2565b6001600160a01b039690961660208301525060408101939093529015156060830152608090910152919050565b60008060408385031215613e4157600080fd5b50508035926020909101359150565b60008060408385031215613e6357600080fd5b823591506020830135613e7581613d2c565b809150509250929050565b600080600060608486031215613e9557600080fd5b83359250602084013591506040840135613eae81613d2c565b809150509250925092565b602081526000613a5a6020830184613dc2565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613f0b57613f0b613ecc565b604052919050565b600060408284031215610e5557600080fd5b60008060008060008060e08789031215613f3e57600080fd5b8635955060208088013567ffffffffffffffff80821115613f5e57600080fd5b818a0191508a601f830112613f7257600080fd5b813581811115613f8457613f84613ecc565b613f96601f8201601f19168501613ee2565b91508082528b84828501011115613fac57600080fd5b80848401858401376000848284010152508097505050506040870135935060608701359250613fde8860808901613f13565b9150613fec60c08801613d41565b90509295509295509295565b6000806000806080858703121561400e57600080fd5b8435935060208501359250604085013561402781613d2c565b9396929550929360600135925050565b8015158114612b4d57600080fd5b60008060006060848603121561405a57600080fd5b83359250602084013561406c81613d2c565b91506040840135613eae81614037565b60008083601f84011261408e57600080fd5b50813567ffffffffffffffff8111156140a657600080fd5b6020830191508360208285010111156140be57600080fd5b9250929050565b600080600080606085870312156140db57600080fd5b843567ffffffffffffffff8111156140f257600080fd5b6140fe8782880161407c565b909550935050602085013561411281613d2c565b9396929550929360400135925050565b60008060008060006080868803121561413a57600080fd5b85359450602086013567ffffffffffffffff81111561415857600080fd5b6141648882890161407c565b9699909850959660408101359660609091013595509350505050565b600082601f83011261419157600080fd5b8135602067ffffffffffffffff8211156141ad576141ad613ecc565b8160051b6141bc828201613ee2565b92835284810182019282810190878511156141d657600080fd5b83870192505b84831015611de1578235825291830191908301906141dc565b60008060008060008060008060008060006101808c8e03121561421757600080fd5b8b359a5067ffffffffffffffff8060208e0135111561423557600080fd5b6142458e60208f01358f0161407c565b909b50995060408d0135985060608d013597506142658e60808f01613f13565b96506142748e60c08f01613f13565b95506142836101008e01613d41565b94506101208d01359350806101408e0135111561429f57600080fd5b6142b08e6101408f01358f01614180565b9250806101608e013511156142c457600080fd5b506142d68d6101608e01358e01614180565b90509295989b509295989b9093969950565b6020808252825182820181905260009190848201906040850190845b818110156143295783516001600160a01b031683529284019291840191600101614304565b50909695505050505050565b600080600080600060a0868803121561434d57600080fd5b853561435881613d2c565b9450602086013561436881613d2c565b935060408601359250606086013561437f81613d2c565b949793965091946080013592915050565b600181811c908216806143a457607f821691505b60208210811415610e5557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156143ed57600080fd5b8135613a5a81613d2c565b634e487b7160e01b600052601160045260246000fd5b60008219821115614421576144216143f8565b500190565b8054600090600181811c908083168061444057607f831692505b602080841082141561446257634e487b7160e01b600052602260045260246000fd5b8388526020880182801561447d576001811461448e576144b9565b60ff198716825282820197506144b9565b60008981526020902060005b878110156144b35781548482015290860190840161449a565b83019850505b5050505050505092915050565b6040815260006144d96040830185614426565b90508260208301529392505050565b604081528260408201528284606083013760006060848301015260006060601f19601f8601168301019050826020830152949350505050565b60006020828403121561453357600080fd5b8151613a5a81613d2c565b600081518084526020808501945080840160005b8381101561456e57815187529582019590820190600101614552565b509495945050505050565b60006001600160a01b03808a16835288602084015287604084015280871660608401525084608083015260e060a08301526145b760e083018561453e565b82810360c08401526145c9818561453e565b9a9950505050505050505050565b6060815260006145ea6060830186613dc2565b60208301949094525060400152919050565b60808152600061460f6080830187614426565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b600082821015614646576146466143f8565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415614675576146756143f8565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516146b4816017850160208801613d96565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516146f1816028840160208801613d96565b01602801949350505050565b60006020828403121561470f57600080fd5b8151613a5a81614037565b6000816000190483118215151615614734576147346143f8565b500290565b600081614748576147486143f8565b506000190190565b60008251614762818460208701613d96565b919091019291505056fea26469706673582212208c04bf86ecc25c8e28a333ffc547d6baa48ebe6c703c723fe9cb8ac9d628203764736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102d35760003560e01c80638d2acf0e11610186578063cde8d10a116100e3578063f3ad65f411610097578063f7c00e6311610071578063f7c00e6314610632578063fbf60be414610645578063ff6fcdbd1461065857600080fd5b8063f3ad65f4146105ec578063f406c2d1146105ff578063f483a0ca1461061257600080fd5b8063ddeeec88116100c8578063ddeeec88146105b3578063edcd43ac146105c6578063f30818c1146105d957600080fd5b8063cde8d10a1461058d578063d547741f146105a057600080fd5b8063a7ab05491161013a578063aba869c51161011f578063aba869c514610554578063b6d3bc6414610567578063c94113b51461057a57600080fd5b8063a7ab05491461052e578063a7fbe6ba1461054157600080fd5b806391dd73f01161016b57806391dd73f014610500578063920a236b14610513578063a217fddf1461052657600080fd5b80638d2acf0e146104be57806391d14854146104c757600080fd5b806336568abe116102345780634d1975b4116101e857806364fe328e116101cd57806364fe328e1461048557806371a2304b1461049857806373d31240146104ab57600080fd5b80634d1975b41461046a5780636039197d1461047257600080fd5b806341c92c0a1161021957806341c92c0a146104245780634690484014610437578063478eedc81461044a57600080fd5b806336568abe146103fe5780634116b1ad1461041157600080fd5b8063248a9ca31161028b5780632a42b461116102705780632a42b461146103ad5780632f2ff15d146103d857806335865971146103eb57600080fd5b8063248a9ca31461038157806326232a2e146103a457600080fd5b80630fcf566e116102bc5780630fcf566e14610335578063117a5b901461034a57806322871dcd1461036e57600080fd5b806301ffc9a7146102d85780630b8ff6a914610300575b600080fd5b6102eb6102e6366004613d02565b61067f565b60405190151581526020015b60405180910390f35b6103277fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d81565b6040519081526020016102f7565b610348610343366004613d51565b6106b6565b005b61035d610358366004613d7d565b61083a565b6040516102f7959493929190613dee565b61032761037c366004613e2e565b610919565b61032761038f366004613d7d565b60009081526065602052604090206001015490565b610327609a5481565b609b546103c0906001600160a01b031681565b6040516001600160a01b0390911681526020016102f7565b6103486103e6366004613e50565b610a18565b6103276103f9366004613e80565b610a42565b61034861040c366004613e50565b610b51565b61034861041f366004613e50565b610bdd565b610327610432366004613d7d565b610de2565b6099546103c0906001600160a01b031681565b61045d610458366004613e2e565b610e5b565b6040516102f79190613eb9565b609754610327565b610327610480366004613f25565b610fdc565b610348610493366004613e2e565b611161565b6103486104a6366004613ff8565b611356565b6103486104b9366004613d7d565b6114da565b610327609c5481565b6102eb6104d5366004613e50565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b61034861050e366004614045565b6116e6565b6102eb610521366004613d7d565b6117f6565b610327600081565b61032761053c366004613e2e565b611872565b61032761054f3660046140c5565b611971565b6102eb610562366004613e50565b611c09565b610327610575366004614122565b611c9c565b610348610588366004613d51565b611dec565b6103c061059b366004613d7d565b611f69565b6103486105ae366004613e50565b611feb565b6103276105c13660046141f5565b612010565b6103276105d4366004613d7d565b612492565b61045d6105e7366004613d7d565b61250a565b6098546103c0906001600160a01b031681565b6103c061060d366004613e2e565b61260a565b610625610620366004613d7d565b61270f565b6040516102f791906142e8565b610348610640366004614335565b612795565b610625610653366004613d7d565b612abf565b6103277fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b181565b60006001600160e01b03198216637965db0b60e01b14806106b057506301ffc9a760e01b6001600160e01b03198316145b92915050565b6106c16000336104d5565b6107125760405162461bcd60e51b815260206004820152601260248201527f41646d696e20726f6c65206d697373696e67000000000000000000000000000060448201526064015b60405180910390fd5b6001600160a01b038216151580610727575080155b6107735760405162461bcd60e51b815260206004820152601560248201527f46656520726563697069656e74206e6f742073657400000000000000000000006044820152606401610709565b6103e88111156107c55760405162461bcd60e51b815260206004820152601560248201527f506c6174666f726d2066656520657863656564656400000000000000000000006044820152606401610709565b609954609a5460408051918252602082018490526001600160a01b0385811693169133917f41340b8520c039756fdade211d2fd26138ba0673031cebf9ae4ae32d38357062910160405180910390a4609980546001600160a01b0319166001600160a01b039390931692909217909155609a55565b6097818154811061084a57600080fd5b906000526020600020906009020160009150905080600001805461086d90614390565b80601f016020809104026020016040519081016040528092919081815260200182805461089990614390565b80156108e65780601f106108bb576101008083540402835291602001916108e6565b820191906000526020600020905b8154815290600101906020018083116108c957829003601f168201915b50505060018401546002850154600386015460079096015494956001600160a01b039092169490935060ff909116915085565b609754600090839081106109645760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b838360978281548110610979576109796143c5565b90600052602060002090600902016007015481106109d45760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b609786815481106109e7576109e76143c5565b9060005260206000209060090201600601600086815260200190815260200160002060020154935050505092915050565b600082815260656020526040902060010154610a3381612b43565b610a3d8383612b50565b505050565b60975460009084908110610a8d5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b848460978281548110610aa257610aa26143c5565b9060005260206000209060090201600701548110610afd5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b60978781548110610b1057610b106143c5565b60009182526020808320898452600660099093020191909101815260408083206001600160a01b038916845260040190915290205493505050509392505050565b6001600160a01b0381163314610bcf5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610709565b610bd98282612bf2565b5050565b609754829081108015610c17575060978181548110610bfe57610bfe6143c5565b600091825260209091206003600990920201015460ff16155b610c555760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b60978381548110610c6857610c686143c5565b60009182526020909120600990910201600101546001600160a01b03163314610cd35760405162461bcd60e51b815260206004820152601160248201527f4f6e6c792067616d652063726561746f720000000000000000000000000000006044820152606401610709565b6001600160a01b038216610d295760405162461bcd60e51b815260206004820152601960248201527f5a65726f2067616d652063726561746f722061646472657373000000000000006044820152606401610709565b60978381548110610d3c57610d3c6143c5565b6000918252602091829020600990910201600101546040516001600160a01b03858116825290911691859133917fc3ead6876b368fd5723f08611f2323ab6862a20398921fb4c5d8102183752686910160405180910390a48160978481548110610da857610da86143c5565b906000526020600020906009020160010160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550505050565b60975460009082908110610e2d5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978381548110610e4057610e406143c5565b90600052602060002090600902016007015491505b50919050565b60975460609083908110610ea65760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b838360978281548110610ebb57610ebb6143c5565b9060005260206000209060090201600701548110610f165760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b60978681548110610f2957610f296143c5565b600091825260208083208884526006600990930201919091019052604090208054610f5390614390565b80601f0160208091040260200160405190810160405280929190818152602001828054610f7f90614390565b8015610fcc5780601f10610fa157610100808354040283529160200191610fcc565b820191906000526020600020905b815481529060010190602001808311610faf57829003601f168201915b5050505050935050505092915050565b60006110087fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d336104d5565b8061101957506110196000336104d5565b6110655760405162461bcd60e51b815260206004820152601f60248201527f546f75726e616d656e74206d616e6167657220726f6c65206d697373696e67006044820152606401610709565b60975487908110801561109f575060978181548110611086576110866143c5565b600091825260209091206003600990920201015460ff16155b6110dd5760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b6110e988888888612c75565b915061110788836110fd60208801886143db565b8760200135612f61565b6097888154811061111a5761111a6143c5565b600091825260208083206001600160a01b03871684526008600990930201919091019052604090205460ff1661115657611156888460016132fa565b509695505050505050565b61118b7fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b1336104d5565b8061119c575061119c6000336104d5565b6111e85760405162461bcd60e51b815260206004820152601960248201527f47616d65206d616e6167657220726f6c65206d697373696e67000000000000006044820152606401610709565b609754829081108015611222575060978181548110611209576112096143c5565b600091825260209091206003600990920201015460ff16155b6112605760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b6103e882609a54611271919061440e565b11156112bf5760405162461bcd60e51b815260206004820152601960248201527f45786365656465642067616d652063726561746f7220666565000000000000006044820152606401610709565b609783815481106112d2576112d26143c5565b90600052602060002090600902016002015483336001600160a01b03167f1368505f5ab324c064457c30f01846471732247325d44b676e806cc4cd884a708560405161132091815260200190565b60405180910390a4816097848154811061133c5761133c6143c5565b906000526020600020906009020160020181905550505050565b6113807fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d336104d5565b8061139157506113916000336104d5565b6113dd5760405162461bcd60e51b815260206004820152601f60248201527f546f75726e616d656e74206d616e6167657220726f6c65206d697373696e67006044820152606401610709565b6097548490811080156114175750609781815481106113fe576113fe6143c5565b600091825260209091206003600990920201015460ff16155b6114555760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b84846097828154811061146a5761146a6143c5565b90600052602060002090600902016007015481106114c55760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b6114d187878787612f61565b50505050505050565b6115047fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b1336104d5565b8061151557506115156000336104d5565b6115615760405162461bcd60e51b815260206004820152601960248201527f47616d65206d616e6167657220726f6c65206d697373696e67000000000000006044820152606401610709565b60975481908110801561159b575060978181548110611582576115826143c5565b600091825260209091206003600990920201015460ff16155b6115d95760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b6001609783815481106115ee576115ee6143c5565b906000526020600020906009020160030160006101000a81548160ff02191690831515021790555060978281548110611629576116296143c5565b906000526020600020906009020160010160009054906101000a90046001600160a01b03166001600160a01b031682336001600160a01b03167f87c3cbb8e83984547de922e1b60d2b0e975685ec4e9aca63d4eb28317d4da56060978681548110611696576116966143c5565b9060005260206000209060090201600001609787815481106116ba576116ba6143c5565b9060005260206000209060090201600201546040516116da9291906144c6565b60405180910390a45050565b6117107fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b1336104d5565b8061172157506117216000336104d5565b61176d5760405162461bcd60e51b815260206004820152601960248201527f47616d65206d616e6167657220726f6c65206d697373696e67000000000000006044820152606401610709565b6097548390811080156117a757506097818154811061178e5761178e6143c5565b600091825260209091206003600990920201015460ff16155b6117e55760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b6117f08484846132fa565b50505050565b609754600090829081106118415760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978381548110611854576118546143c5565b600091825260209091206009909102016003015460ff169392505050565b609754600090839081106118bd5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b8383609782815481106118d2576118d26143c5565b906000526020600020906009020160070154811061192d5760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b60978681548110611940576119406143c5565b9060005260206000209060090201600601600086815260200190815260200160002060030154935050505092915050565b600061199d7fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b1336104d5565b806119ae57506119ae6000336104d5565b6119fa5760405162461bcd60e51b815260206004820152601960248201527f47616d65206d616e6167657220726f6c65206d697373696e67000000000000006044820152606401610709565b83611a475760405162461bcd60e51b815260206004820152600f60248201527f456d7074792067616d65206e616d6500000000000000000000000000000000006044820152606401610709565b6001600160a01b038316611a9d5760405162461bcd60e51b815260206004820152601960248201527f5a65726f2067616d652063726561746f722061646472657373000000000000006044820152606401610709565b6103e882609a54611aae919061440e565b1115611afc5760405162461bcd60e51b815260206004820152601e60248201527f457863656564656420626173652067616d652063726561746f722066656500006044820152606401610709565b50609780546001810180835560008390529091869186919084908110611b2457611b246143c5565b60009182526020909120611b3e9360099092020191613bf5565b508260978281548110611b5357611b536143c5565b906000526020600020906009020160010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508160978281548110611b9c57611b9c6143c5565b906000526020600020906009020160020181905550826001600160a01b031681336001600160a01b03167f871f6ba5dcb0133e30d68dd1c00225621e34ea9882970c2578c9136a4113d04f888887604051611bf9939291906144e8565b60405180910390a4949350505050565b60975460009083908110611c545760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978481548110611c6757611c676143c5565b600091825260208083206001600160a01b03871684526008600990930201919091019052604090205460ff1691505092915050565b6000611cc87fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d336104d5565b80611cd95750611cd96000336104d5565b611d255760405162461bcd60e51b815260206004820152601f60248201527f546f75726e616d656e74206d616e6167657220726f6c65206d697373696e67006044820152606401610709565b609754869081108015611d5f575060978181548110611d4657611d466143c5565b600091825260209091206003600990920201015460ff16155b611d9d5760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b611de18787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250889150612c759050565b979650505050505050565b611df76000336104d5565b611e435760405162461bcd60e51b815260206004820152601260248201527f41646d696e20726f6c65206d697373696e6700000000000000000000000000006044820152606401610709565b6001600160a01b038216611ea45760405162461bcd60e51b815260206004820152602260248201527f5a65726f20746f75726e616d656e74206372656174696f6e2066656520746f6b60448201526132b760f11b6064820152608401610709565b60008111611ef45760405162461bcd60e51b815260206004820152601c60248201527f5a65726f20746f75726e616d656e74206372656174696f6e20666565000000006044820152606401610709565b609b54609c5460408051918252602082018490526001600160a01b0385811693169133917f45bc4d0779d14a1aad1c23a7c7276ca222ceb0f53ce9ec76d88470974674a58f910160405180910390a4609b80546001600160a01b0319166001600160a01b039390931692909217909155609c55565b60975460009082908110611fb45760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978381548110611fc757611fc76143c5565b60009182526020909120600990910201600101546001600160a01b03169392505050565b60008281526065602052604090206001015461200681612b43565b610a3d8383612bf2565b6097546000908c908110801561204d575060978181548110612034576120346143c5565b600091825260209091206003600990920201015460ff16155b61208b5760405162461bcd60e51b815260206004820152600f60248201526e47616d65206e6f742061637469766560881b6044820152606401610709565b609954609c54609b546120af926001600160a01b0391821692339290911690613657565b6120f38d8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508f92508e9150612c759050565b91506121118d8361210760208c018c6143db565b8b60200135612f61565b60978d81548110612124576121246143c5565b9060005260206000209060090201600801600089600001602081019061214a91906143db565b6001600160a01b0316815260208101919091526040016000205460ff16158015612178575060008860200135115b15612195576121958d61218e60208b018b6143db565b60016132fa565b60978d815481106121a8576121a86143c5565b906000526020600020906009020160080160008860000160208101906121ce91906143db565b6001600160a01b0316815260208101919091526040016000205460ff161580156121fc575060008760200135115b15612212576122128d61218e60208a018a6143db565b60208701351561232d57609860009054906101000a90046001600160a01b03166001600160a01b0316638d374f256040518163ffffffff1660e01b8152600401602060405180830381865afa15801561226f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122939190614521565b6001600160a01b0316631de6ba17338f856122b160208d018d6143db565b60405160e086901b6001600160e01b03191681526001600160a01b03948516600482015260248101939093526044830191909152909116606482015260208a0135608482015260a401600060405180830381600087803b15801561231457600080fd5b505af1158015612328573d6000803e3d6000fd5b505050505b846102d1148061233e575084610483145b156124825760978d81548110612356576123566143c5565b600091825260208083206001600160a01b038a1684526008600990930201919091019052604090205460ff16158015612390575060008351115b156123a1576123a18d8760016132fa565b609860009054906101000a90046001600160a01b03166001600160a01b0316638d374f256040518163ffffffff1660e01b8152600401602060405180830381865afa1580156123f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124189190614521565b6001600160a01b031663b3a833b8338f858a8a8a8a6040518863ffffffff1660e01b815260040161244f9796959493929190614579565b600060405180830381600087803b15801561246957600080fd5b505af115801561247d573d6000803e3d6000fd5b505050505b509b9a5050505050505050505050565b609754600090829081106124dd5760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b609783815481106124f0576124f06143c5565b906000526020600020906009020160020154915050919050565b609754606090829081106125555760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b60978381548110612568576125686143c5565b9060005260206000209060090201600001805461258490614390565b80601f01602080910402602001604051908101604052809291908181526020018280546125b090614390565b80156125fd5780601f106125d2576101008083540402835291602001916125fd565b820191906000526020600020905b8154815290600101906020018083116125e057829003601f168201915b5050505050915050919050565b609754600090839081106126555760405162461bcd60e51b8152602060048201526012602482015271092dcecc2d8d2c840cec2daca40d2dcc8caf60731b6044820152606401610709565b83836097828154811061266a5761266a6143c5565b90600052602060002090600902016007015481106126c55760405162461bcd60e51b8152602060048201526018602482015277092dcecc2d8d2c840e8deeae4dcc2dacadce840d2dcc8caf60431b6044820152606401610709565b609786815481106126d8576126d86143c5565b60009182526020808320888452600660099093020191909101905260409020600101546001600160a01b0316935050505092915050565b606060978281548110612724576127246143c5565b906000526020600020906009020160050180548060200260200160405190810160405280929190818152602001828054801561278957602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161276b575b50505050509050919050565b600054610100900460ff16158080156127b55750600054600160ff909116105b806127cf5750303b1580156127cf575060005460ff166001145b6128415760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610709565b6000805460ff191660011790558015612864576000805461ff0019166101001790555b61286c6136c6565b612877600033612b50565b6128a17fef17b1f3c5a412f9c8e887e3abd186802afec7dc657fd3b7002bf87b128dd0b133612b50565b6128cb7fa8c4d79ed8c483e024438d9d6fcb433eca78b35312f8be0ff85ea66aab126e4d33612b50565b6001600160a01b0386166129215760405162461bcd60e51b815260206004820152601560248201527f5a65726f206164647265737320726567697374727900000000000000000000006044820152606401610709565b6001600160a01b0383166129775760405162461bcd60e51b815260206004820152601960248201527f5a65726f20746f75726e616d656e742066656520746f6b656e000000000000006044820152606401610709565b6001600160a01b03851615158061298c575083155b6129d85760405162461bcd60e51b815260206004820152601560248201527f46656520726563697069656e74206e6f742073657400000000000000000000006044820152606401610709565b6103e8841115612a2a5760405162461bcd60e51b815260206004820152601560248201527f506c6174666f726d2066656520657863656564656400000000000000000000006044820152606401610709565b609880546001600160a01b038089166001600160a01b03199283161790925560998054888416908316179055609a869055609b805492861692909116919091179055609c8290558015612ab7576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050505050565b606060978281548110612ad457612ad46143c5565b9060005260206000209060090201600401805480602002602001604051908101604052809291908181526020018280548015612789576020028201919060005260206000209081546001600160a01b0316815260019091019060200180831161276b5750505050509050919050565b612b4d8133613745565b50565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610bd95760008281526065602090815260408083206001600160a01b03851684529091529020805460ff19166001179055612bae3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff1615610bd95760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008083612ca95760978681548110612c9057612c906143c5565b9060005260206000209060090201600201549050612cac565b50825b8060978781548110612cc057612cc06143c5565b9060005260206000209060090201600201541115612d205760405162461bcd60e51b815260206004820152601d60248201527f4c6f772067616d652063726561746f72206665652070726f706f7365640000006044820152606401610709565b6103e88382609a54612d32919061440e565b612d3c919061440e565b1115612d8a5760405162461bcd60e51b815260206004820152600d60248201527f45786365656465642066656573000000000000000000000000000000000000006044820152606401610709565b60978681548110612d9d57612d9d6143c5565b9060005260206000209060090201600701549150600160978781548110612dc657612dc66143c5565b90600052602060002090600902016007016000828254612de6919061440e565b925050819055508460978781548110612e0157612e016143c5565b906000526020600020906009020160060160008481526020019081526020016000206000019080519060200190612e39929190613c79565b503360978781548110612e4e57612e4e6143c5565b9060005260206000209060090201600601600084815260200190815260200160002060010160006101000a8154816001600160a01b0302191690836001600160a01b031602179055508060978781548110612eab57612eab6143c5565b90600052602060002090600902016006016000848152602001908152602001600020600301819055508260978781548110612ee857612ee86143c5565b90600052602060002090600902016006016000848152602001908152602001600020600201819055508186336001600160a01b03167f5b1600316d8d2966d4cad163e656448a5622202016ec8b306efe11d70fa58d51888588604051612f50939291906145d7565b60405180910390a450949350505050565b8284336001600160a01b03167fa5c159e7b999109ecb53422b7b9c90ccbadb6ed8896d2e239257d284ce6d57aa60978881548110612fa157612fa16143c5565b906000526020600020906009020160060160008881526020019081526020016000206000018660978a81548110612fda57612fda6143c5565b600091825260208083208c8452600660099093020191909101815260408083206001600160a01b038c168452600401909152908190205490516130219392919089906145fc565b60405180910390a480156130d15760978481548110613042576130426143c5565b60009182526020808320868452600660099093020191909101815260408083206001600160a01b03861684526004019091529020546130cc576097848154811061308e5761308e6143c5565b60009182526020808320600992909202909101600501805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b6132a9565b60005b609785815481106130e7576130e76143c5565b9060005260206000209060090201600501805490508110156132a75760978581548110613116576131166143c5565b90600052602060002090600902016005018181548110613138576131386143c5565b6000918252602090912001546001600160a01b0384811691161415613295576097858154811061316a5761316a6143c5565b9060005260206000209060090201600501600160978781548110613190576131906143c5565b9060005260206000209060090201600501805490506131af9190614634565b815481106131bf576131bf6143c5565b600091825260209091200154609780546001600160a01b0390921691879081106131eb576131eb6143c5565b9060005260206000209060090201600501828154811061320d5761320d6143c5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506097858154811061324e5761324e6143c5565b906000526020600020906009020160050180548061326e5761326e61464b565b600082815260209020810160001990810180546001600160a01b03191690550190556132a7565b8061329f81614661565b9150506130d4565b505b80609785815481106132bd576132bd6143c5565b600091825260208083209683526006600990920290960101855260408082206001600160a01b039095168252600490940190945291909220555050565b816001600160a01b031683336001600160a01b03167f55c3f1ffae9780d4a4ce8073352d34fea806bb40540f99c3e32abaac63de3b1b60978781548110613343576133436143c5565b600091825260208083206001600160a01b038a168452600992909202909101600801815260409182902054825160ff90911615158152871515918101919091520160405180910390a4801561342b57609783815481106133a5576133a56143c5565b600091825260208083206001600160a01b03861684526008600990930201919091019052604090205460ff1661342657609783815481106133e8576133e86143c5565b60009182526020808320600992909202909101600401805460018101825590835291200180546001600160a01b0319166001600160a01b0384161790555b613603565b60005b60978481548110613441576134416143c5565b9060005260206000209060090201600401805490508110156136015760978481548110613470576134706143c5565b90600052602060002090600902016004018181548110613492576134926143c5565b6000918252602090912001546001600160a01b03848116911614156135ef57609784815481106134c4576134c46143c5565b90600052602060002090600902016004016001609786815481106134ea576134ea6143c5565b9060005260206000209060090201600401805490506135099190614634565b81548110613519576135196143c5565b600091825260209091200154609780546001600160a01b039092169186908110613545576135456143c5565b90600052602060002090600902016004018281548110613567576135676143c5565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550609784815481106135a8576135a86143c5565b90600052602060002090600902016004018054806135c8576135c861464b565b600082815260209020810160001990810180546001600160a01b0319169055019055613601565b806135f981614661565b91505061342e565b505b8060978481548110613617576136176143c5565b600091825260208083206001600160a01b03909616835260086009909202909501019093526040909220805492151560ff19909316929092179091555050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526117f09085906137ba565b600054610100900460ff166137435760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610709565b565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16610bd9576137788161389f565b6137838360206138b1565b60405160200161379492919061467c565b60408051601f198184030181529082905262461bcd60e51b825261070991600401613eb9565b600061380f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613a619092919063ffffffff16565b805190915015610a3d578080602001905181019061382d91906146fd565b610a3d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610709565b60606106b06001600160a01b03831660145b606060006138c083600261471a565b6138cb90600261440e565b67ffffffffffffffff8111156138e3576138e3613ecc565b6040519080825280601f01601f19166020018201604052801561390d576020820181803683370190505b509050600360fc1b81600081518110613928576139286143c5565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110613957576139576143c5565b60200101906001600160f81b031916908160001a905350600061397b84600261471a565b61398690600161440e565b90505b6001811115613a0b577f303132333435363738396162636465660000000000000000000000000000000085600f16601081106139c7576139c76143c5565b1a60f81b8282815181106139dd576139dd6143c5565b60200101906001600160f81b031916908160001a90535060049490941c93613a0481614739565b9050613989565b508315613a5a5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610709565b9392505050565b6060613a708484600085613a78565b949350505050565b606082471015613af05760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610709565b600080866001600160a01b03168587604051613b0c9190614750565b60006040518083038185875af1925050503d8060008114613b49576040519150601f19603f3d011682016040523d82523d6000602084013e613b4e565b606091505b5091509150611de18783838760608315613bc6578251613bbf576001600160a01b0385163b613bbf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610709565b5081613a70565b613a708383815115613bdb5781518083602001fd5b8060405162461bcd60e51b81526004016107099190613eb9565b828054613c0190614390565b90600052602060002090601f016020900481019282613c235760008555613c69565b82601f10613c3c5782800160ff19823516178555613c69565b82800160010185558215613c69579182015b82811115613c69578235825591602001919060010190613c4e565b50613c75929150613ced565b5090565b828054613c8590614390565b90600052602060002090601f016020900481019282613ca75760008555613c69565b82601f10613cc057805160ff1916838001178555613c69565b82800160010185558215613c69579182015b82811115613c69578251825591602001919060010190613cd2565b5b80821115613c755760008155600101613cee565b600060208284031215613d1457600080fd5b81356001600160e01b031981168114613a5a57600080fd5b6001600160a01b0381168114612b4d57600080fd5b8035613d4c81613d2c565b919050565b60008060408385031215613d6457600080fd5b8235613d6f81613d2c565b946020939093013593505050565b600060208284031215613d8f57600080fd5b5035919050565b60005b83811015613db1578181015183820152602001613d99565b838111156117f05750506000910152565b60008151808452613dda816020860160208601613d96565b601f01601f19169290920160200192915050565b60a081526000613e0160a0830188613dc2565b6001600160a01b039690961660208301525060408101939093529015156060830152608090910152919050565b60008060408385031215613e4157600080fd5b50508035926020909101359150565b60008060408385031215613e6357600080fd5b823591506020830135613e7581613d2c565b809150509250929050565b600080600060608486031215613e9557600080fd5b83359250602084013591506040840135613eae81613d2c565b809150509250925092565b602081526000613a5a6020830184613dc2565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715613f0b57613f0b613ecc565b604052919050565b600060408284031215610e5557600080fd5b60008060008060008060e08789031215613f3e57600080fd5b8635955060208088013567ffffffffffffffff80821115613f5e57600080fd5b818a0191508a601f830112613f7257600080fd5b813581811115613f8457613f84613ecc565b613f96601f8201601f19168501613ee2565b91508082528b84828501011115613fac57600080fd5b80848401858401376000848284010152508097505050506040870135935060608701359250613fde8860808901613f13565b9150613fec60c08801613d41565b90509295509295509295565b6000806000806080858703121561400e57600080fd5b8435935060208501359250604085013561402781613d2c565b9396929550929360600135925050565b8015158114612b4d57600080fd5b60008060006060848603121561405a57600080fd5b83359250602084013561406c81613d2c565b91506040840135613eae81614037565b60008083601f84011261408e57600080fd5b50813567ffffffffffffffff8111156140a657600080fd5b6020830191508360208285010111156140be57600080fd5b9250929050565b600080600080606085870312156140db57600080fd5b843567ffffffffffffffff8111156140f257600080fd5b6140fe8782880161407c565b909550935050602085013561411281613d2c565b9396929550929360400135925050565b60008060008060006080868803121561413a57600080fd5b85359450602086013567ffffffffffffffff81111561415857600080fd5b6141648882890161407c565b9699909850959660408101359660609091013595509350505050565b600082601f83011261419157600080fd5b8135602067ffffffffffffffff8211156141ad576141ad613ecc565b8160051b6141bc828201613ee2565b92835284810182019282810190878511156141d657600080fd5b83870192505b84831015611de1578235825291830191908301906141dc565b60008060008060008060008060008060006101808c8e03121561421757600080fd5b8b359a5067ffffffffffffffff8060208e0135111561423557600080fd5b6142458e60208f01358f0161407c565b909b50995060408d0135985060608d013597506142658e60808f01613f13565b96506142748e60c08f01613f13565b95506142836101008e01613d41565b94506101208d01359350806101408e0135111561429f57600080fd5b6142b08e6101408f01358f01614180565b9250806101608e013511156142c457600080fd5b506142d68d6101608e01358e01614180565b90509295989b509295989b9093969950565b6020808252825182820181905260009190848201906040850190845b818110156143295783516001600160a01b031683529284019291840191600101614304565b50909695505050505050565b600080600080600060a0868803121561434d57600080fd5b853561435881613d2c565b9450602086013561436881613d2c565b935060408601359250606086013561437f81613d2c565b949793965091946080013592915050565b600181811c908216806143a457607f821691505b60208210811415610e5557634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156143ed57600080fd5b8135613a5a81613d2c565b634e487b7160e01b600052601160045260246000fd5b60008219821115614421576144216143f8565b500190565b8054600090600181811c908083168061444057607f831692505b602080841082141561446257634e487b7160e01b600052602260045260246000fd5b8388526020880182801561447d576001811461448e576144b9565b60ff198716825282820197506144b9565b60008981526020902060005b878110156144b35781548482015290860190840161449a565b83019850505b5050505050505092915050565b6040815260006144d96040830185614426565b90508260208301529392505050565b604081528260408201528284606083013760006060848301015260006060601f19601f8601168301019050826020830152949350505050565b60006020828403121561453357600080fd5b8151613a5a81613d2c565b600081518084526020808501945080840160005b8381101561456e57815187529582019590820190600101614552565b509495945050505050565b60006001600160a01b03808a16835288602084015287604084015280871660608401525084608083015260e060a08301526145b760e083018561453e565b82810360c08401526145c9818561453e565b9a9950505050505050505050565b6060815260006145ea6060830186613dc2565b60208301949094525060400152919050565b60808152600061460f6080830187614426565b6001600160a01b03959095166020830152506040810192909252606090910152919050565b600082821015614646576146466143f8565b500390565b634e487b7160e01b600052603160045260246000fd5b6000600019821415614675576146756143f8565b5060010190565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516146b4816017850160208801613d96565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516146f1816028840160208801613d96565b01602801949350505050565b60006020828403121561470f57600080fd5b8151613a5a81614037565b6000816000190483118215151615614734576147346143f8565b500290565b600081614748576147486143f8565b506000190190565b60008251614762818460208701613d96565b919091019291505056fea26469706673582212208c04bf86ecc25c8e28a333ffc547d6baa48ebe6c703c723fe9cb8ac9d628203764736f6c634300080b0033",
  "devdoc": {
    "author": "David Lee",
    "kind": "dev",
    "methods": {
      "addGame(string,address,uint256)": {
        "details": "Base game creator fee is the minimum fee vaule that the game creator should be rewarded from the tournamnet of the gameWhen creating the tournament of the game, the game creator fee can be proposed by the tournament creatorbut the proposed value can't be less than the base oneIf the proposed game creator fee is 0, the base game creator fee will be applied",
        "params": {
          "_baseGameCreatorFee": "Base game creator fee",
          "_gameCreator": "Game creator address",
          "_gameName": "Game name to add"
        }
      },
      "createTournamentByDAO(uint256,string,uint256,uint256)": {
        "details": "Only ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedThe prize pool for the tournament that the owner created is initialized on Oparcade contract",
        "params": {
          "_gid": "Game ID",
          "_proposedGameCreatorFee": "Proposed game creator fee",
          "_tournamentCreatorFee": "Tournament creator fee"
        },
        "returns": {
          "tid": "Tournament ID created"
        }
      },
      "createTournamentByDAOWithTokens(uint256,string,uint256,uint256,(address,uint256),address)": {
        "details": "Only ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedThe prize pool for the tournament that the owner created is initialized on Oparcade contract",
        "params": {
          "_depositToken": "Token to allow/disallow the deposit",
          "_distributionTokenAddress": "Distribution token address to be set to active",
          "_gid": "Game ID",
          "_proposedGameCreatorFee": "Proposed game creator fee",
          "_tournamentCreatorFee": "Tournament creator fee"
        },
        "returns": {
          "tid": "Tournament ID created"
        }
      },
      "createTournamentByUser(uint256,string,uint256,uint256,(address,uint256),(address,uint256),address,uint256,uint256[],uint256[])": {
        "details": "Anyone can create the tournament and initialize the prize pool with tokens and NFTsTournament creator should set all params necessary for the tournament in 1 tx andthe params set is immutable. It will be prevent the fraud tournament is createdTournament creator should pay fees to create the tournamentand the fee token address and fee token amount are set by the ownerIf the proposed game creaetor fee is 0, the base game creator fee is appliedNFT type to initialize the prize pool should be either 721 or 1155",
        "params": {
          "_amountsToAddPrizePool": "NFT token amount list to initialize the prize pool",
          "_depositToken": "Deposit token (address and amount) for playing the tournament",
          "_gid": "Game ID",
          "_nftAddressToAddPrizePool": "NFT address to initialize the prize pool",
          "_nftTypeToAddPrizePool": "NFT type to initialize the prize pool",
          "_proposedGameCreatorFee": "Proposed game creator fee",
          "_tokenIdsToAddPrizePool": "NFT token Id list to initialize the prize pool",
          "_tokenToAddPrizePool": "Token (address and amount) to initialize the prize pool",
          "_tournamentCreatorFee": "Tournament creator fee"
        },
        "returns": {
          "tid": "Tournament ID created"
        }
      },
      "gameCount()": {
        "returns": {
          "_0": "(uint256) Amount of games created"
        }
      },
      "getAppliedGameCreatorFee(uint256,uint256)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID"
        },
        "returns": {
          "_0": "(string) Game applied game creator fee of a tournament"
        }
      },
      "getDepositTokenAmount(uint256,uint256,address)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_tokenAddress": "token address"
        },
        "returns": {
          "_0": "(uint256) Tournament deposit token amount"
        }
      },
      "getDepositTokenList(uint256)": {
        "params": {
          "": "(address[]) Deposit token list of the game",
          "_gid": "Game ID"
        }
      },
      "getDistributableTokenList(uint256)": {
        "params": {
          "": "(address[]) Distributable token list of the game",
          "_gid": "Game ID"
        }
      },
      "getGameBaseCreatorFee(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(uint256) Game creator fee"
        }
      },
      "getGameCreatorAddress(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(string) Game creator address"
        }
      },
      "getGameName(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(string) Game name"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getTournamentCount(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(uint256) Number of the tournament"
        }
      },
      "getTournamentCreator(uint256,uint256)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID"
        },
        "returns": {
          "_0": "(address) Tournament creator address"
        }
      },
      "getTournamentCreatorFee(uint256,uint256)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID"
        },
        "returns": {
          "_0": "(uint256) Tournament creator fee"
        }
      },
      "getTournamentName(uint256,uint256)": {
        "params": {
          "_gid": "Game ID",
          "_tid": "Tournament ID"
        },
        "returns": {
          "_0": "(string) Tournament name"
        }
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isDistributable(uint256,address)": {
        "params": {
          "_gid": "Game ID",
          "_tokenAddress": "token address"
        },
        "returns": {
          "_0": "(uint256) Is token distributable"
        }
      },
      "isGameDeprecated(uint256)": {
        "params": {
          "_gid": "Game ID"
        },
        "returns": {
          "_0": "(bool) Is deprecated"
        }
      },
      "removeGame(uint256)": {
        "details": "Game is not removed from the games array, just set it deprecated",
        "params": {
          "_gid": "Game ID"
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "updateBaseGameCreatorFee(uint256,uint256)": {
        "details": "Tournament creator fee is the royality that will be transferred to the tournament creator addressTournament creator can propose the game creator fee when creating the tournamentbut it can't be less than the base game creator fee",
        "params": {
          "_baseGameCreatorFee": "Base game creator fee",
          "_gid": "Game ID"
        }
      },
      "updateDepositTokenAmount(uint256,uint256,address,uint256)": {
        "details": "Only ownerOnly tokens with an amount greater than zero is valid for the deposit",
        "params": {
          "_amount": "Token amount",
          "_gid": "Game ID",
          "_tid": "Tournament ID",
          "_token": "Token address to allow/disallow the deposit"
        }
      },
      "updateDistributableTokenAddress(uint256,address,bool)": {
        "details": "Only owner",
        "params": {
          "_gid": "Game ID",
          "_isDistributable": "true: distributable false: not distributable",
          "_token": "Token address to allow/disallow the deposit"
        }
      },
      "updateGameCreator(uint256,address)": {
        "params": {
          "_gameCreator": "Game creator address",
          "_gid": "Game ID"
        }
      },
      "updatePlatformFee(address,uint256)": {
        "details": "Only ownerAllow zero recipient address only of fee is also zero",
        "params": {
          "_feeRecipient": "Platform fee recipient address",
          "_platformFee": "platform fee"
        }
      },
      "updateTournamentCreationFee(address,uint256)": {
        "details": "Only ownerTournament creator should pay this fee when creating the tournament",
        "params": {
          "_tournamentCreationFeeAmount": "Fee token amount",
          "_tournamentCreationFeeToken": "Fee token address"
        }
      }
    },
    "stateVariables": {
      "MAX_PERMILLAGE": {
        "details": "Max fee constant in permillage (percentage * 10)"
      },
      "addressRegistry": {
        "details": "AddressRegistry"
      },
      "feeRecipient": {
        "details": "Platform fee recipient"
      },
      "games": {
        "details": "Game name array"
      },
      "platformFee": {
        "details": "Platform fee"
      },
      "tournamentCreationFeeAmount": {
        "details": "Tournament creation fee token amount"
      },
      "tournamentCreationFeeToken": {
        "details": "Tournament creation fee token address"
      }
    },
    "title": "GameRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addGame(string,address,uint256)": {
        "notice": "Add the new game"
      },
      "createTournamentByDAO(uint256,string,uint256,uint256)": {
        "notice": "Create the tournament"
      },
      "createTournamentByDAOWithTokens(uint256,string,uint256,uint256,(address,uint256),address)": {
        "notice": "Create the tournament and set tokens"
      },
      "createTournamentByUser(uint256,string,uint256,uint256,(address,uint256),(address,uint256),address,uint256,uint256[],uint256[])": {
        "notice": "Create the tournament"
      },
      "gameCount()": {
        "notice": "Returns the number of games created"
      },
      "getAppliedGameCreatorFee(uint256,uint256)": {
        "notice": "Returns the applied game creator fee of the specific tournament"
      },
      "getDepositTokenAmount(uint256,uint256,address)": {
        "notice": "Returns the deposit token amount of the specific tournament"
      },
      "getDepositTokenList(uint256)": {
        "notice": "Returns the deposit token list of the game"
      },
      "getDistributableTokenList(uint256)": {
        "notice": "Returns the distributable token list of the game"
      },
      "getGameBaseCreatorFee(uint256)": {
        "notice": "Returns the game creator fee"
      },
      "getGameCreatorAddress(uint256)": {
        "notice": "Returns the game creator address"
      },
      "getGameName(uint256)": {
        "notice": "Returns the game name"
      },
      "getTournamentCount(uint256)": {
        "notice": "Returns the number of the tournaments of the specific game"
      },
      "getTournamentCreator(uint256,uint256)": {
        "notice": "Returns the tournament creator address of the specific tournament"
      },
      "getTournamentCreatorFee(uint256,uint256)": {
        "notice": "Returns the tournament creator fee of the specific tournament"
      },
      "getTournamentName(uint256,uint256)": {
        "notice": "Returns the tournament name of the specific tournament"
      },
      "isDistributable(uint256,address)": {
        "notice": "Returns true if the token of a specific game is distributable, false otherwise"
      },
      "isGameDeprecated(uint256)": {
        "notice": "Returns a boolean indicating if a specific game is deprecated"
      },
      "removeGame(uint256)": {
        "notice": "Remove the exising game"
      },
      "updateBaseGameCreatorFee(uint256,uint256)": {
        "notice": "Update the base game creator fee"
      },
      "updateDepositTokenAmount(uint256,uint256,address,uint256)": {
        "notice": "Update deposit token amount"
      },
      "updateDistributableTokenAddress(uint256,address,bool)": {
        "notice": "Update distributable token address"
      },
      "updateGameCreator(uint256,address)": {
        "notice": "Update the game creator"
      },
      "updatePlatformFee(address,uint256)": {
        "notice": "Update the platform fee"
      },
      "updateTournamentCreationFee(address,uint256)": {
        "notice": "Update the tournament creation fee"
      }
    },
    "notice": "This contract stores all info related to the game and tournament creation",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 547,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 550,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2098,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 2317,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 39,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)34_storage)"
      },
      {
        "astId": 334,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 9472,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "games",
        "offset": 0,
        "slot": "151",
        "type": "t_array(t_struct(Game)9467_storage)dyn_storage"
      },
      {
        "astId": 9476,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "addressRegistry",
        "offset": 0,
        "slot": "152",
        "type": "t_contract(IAddressRegistry)12677"
      },
      {
        "astId": 9479,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "feeRecipient",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 9482,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "platformFee",
        "offset": 0,
        "slot": "154",
        "type": "t_uint256"
      },
      {
        "astId": 9485,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "tournamentCreationFeeToken",
        "offset": 0,
        "slot": "155",
        "type": "t_address"
      },
      {
        "astId": 9488,
        "contract": "contracts/GameRegistry.sol:GameRegistry",
        "label": "tournamentCreationFeeAmount",
        "offset": 0,
        "slot": "156",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Game)9467_storage)dyn_storage": {
        "base": "t_struct(Game)9467_storage",
        "encoding": "dynamic_array",
        "label": "struct GameRegistry.Game[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAddressRegistry)12677": {
        "encoding": "inplace",
        "label": "contract IAddressRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)34_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)34_storage"
      },
      "t_mapping(t_uint256,t_struct(Tournament)9440_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GameRegistry.Tournament)",
        "numberOfBytes": "32",
        "value": "t_struct(Tournament)9440_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Game)9467_storage": {
        "encoding": "inplace",
        "label": "struct GameRegistry.Game",
        "members": [
          {
            "astId": 9442,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9444,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "creatorAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9446,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "baseCreatorFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9448,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "isDeprecated",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 9451,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "distributableTokenList",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9454,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "depositTokenList",
            "offset": 0,
            "slot": "5",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9459,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "tournaments",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint256,t_struct(Tournament)9440_storage)"
          },
          {
            "astId": 9461,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "tournamentsCount",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 9466,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "distributable",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "288"
      },
      "t_struct(RoleData)34_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 33,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Tournament)9440_storage": {
        "encoding": "inplace",
        "label": "struct GameRegistry.Tournament",
        "members": [
          {
            "astId": 9428,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 9430,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "creatorAddress",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 9432,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "creatorFee",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 9434,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "appliedGameCreatorFee",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9439,
            "contract": "contracts/GameRegistry.sol:GameRegistry",
            "label": "depositTokenAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}